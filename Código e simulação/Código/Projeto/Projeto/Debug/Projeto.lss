
Projeto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000100  00800100  00001e6c  00001f00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000207  00800200  00800200  00002000  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002030  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00002070  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010e7  00000000  00000000  00002138  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e2  00000000  00000000  0000321f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da8  00000000  00000000  00003b01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000036c  00000000  00000000  000048ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000577  00000000  00000000  00004c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000076a  00000000  00000000  0000518f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000058f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
       4:	0c 94 4a 03 	jmp	0x694	; 0x694 <__vector_1>
       8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
       c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      14:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      38:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      48:	0c 94 05 04 	jmp	0x80a	; 0x80a <__vector_18>
      4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      54:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_21>
      58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <CHARSET>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	d8 e0       	ldi	r29, 0x08	; 8
     250:	de bf       	out	0x3e, r29	; 62
     252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
     254:	12 e0       	ldi	r17, 0x02	; 2
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	ec e6       	ldi	r30, 0x6C	; 108
     25c:	fe e1       	ldi	r31, 0x1E	; 30
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
     260:	05 90       	lpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	a0 30       	cpi	r26, 0x00	; 0
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
     26a:	24 e0       	ldi	r18, 0x04	; 4
     26c:	a0 e0       	ldi	r26, 0x00	; 0
     26e:	b2 e0       	ldi	r27, 0x02	; 2
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	a7 30       	cpi	r26, 0x07	; 7
     276:	b2 07       	cpc	r27, r18
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
     27a:	0e 94 a1 01 	call	0x342	; 0x342 <main>
     27e:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <_exit>

00000282 <__bad_interrupt>:
     282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <__vector_21>:
}
unsigned char USART_Receive(void)
{
	while(!(UCSR0A = 0b00100000));//espera o dado ser recebido
	return UDR0;// lê o dado e retorna 
}
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     28e:	0f 92       	push	r0
     290:	11 24       	eor	r1, r1
     292:	8f 93       	push	r24
     294:	9f 93       	push	r25
     296:	ef 93       	push	r30
     298:	ff 93       	push	r31
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
     2a2:	88 e7       	ldi	r24, 0x78	; 120
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	fc 01       	movw	r30, r24
     2a8:	80 81       	ld	r24, Z
     2aa:	91 81       	ldd	r25, Z+1	; 0x01
     2ac:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_end+0x1>
     2b0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_end>
     2b4:	00 00       	nop
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	ff 91       	pop	r31
     2bc:	ef 91       	pop	r30
     2be:	9f 91       	pop	r25
     2c0:	8f 91       	pop	r24
     2c2:	0f 90       	pop	r0
     2c4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     2c8:	0f 90       	pop	r0
     2ca:	1f 90       	pop	r1
     2cc:	18 95       	reti

000002ce <USART_Init>:
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <USART_Init+0x6>
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
     2d8:	9a 83       	std	Y+2, r25	; 0x02
     2da:	89 83       	std	Y+1, r24	; 0x01
     2dc:	85 ec       	ldi	r24, 0xC5	; 197
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	29 81       	ldd	r18, Y+1	; 0x01
     2e2:	3a 81       	ldd	r19, Y+2	; 0x02
     2e4:	23 2f       	mov	r18, r19
     2e6:	33 27       	eor	r19, r19
     2e8:	fc 01       	movw	r30, r24
     2ea:	20 83       	st	Z, r18
     2ec:	84 ec       	ldi	r24, 0xC4	; 196
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	29 81       	ldd	r18, Y+1	; 0x01
     2f2:	fc 01       	movw	r30, r24
     2f4:	20 83       	st	Z, r18
     2f6:	81 ec       	ldi	r24, 0xC1	; 193
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	28 e9       	ldi	r18, 0x98	; 152
     2fc:	fc 01       	movw	r30, r24
     2fe:	20 83       	st	Z, r18
     300:	82 ec       	ldi	r24, 0xC2	; 194
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	2e e0       	ldi	r18, 0x0E	; 14
     306:	fc 01       	movw	r30, r24
     308:	20 83       	st	Z, r18
     30a:	00 00       	nop
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <USART_transmit>:
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	1f 92       	push	r1
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62
     320:	89 83       	std	Y+1, r24	; 0x01
     322:	00 00       	nop
     324:	80 ec       	ldi	r24, 0xC0	; 192
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	20 e2       	ldi	r18, 0x20	; 32
     32a:	fc 01       	movw	r30, r24
     32c:	20 83       	st	Z, r18
     32e:	86 ec       	ldi	r24, 0xC6	; 198
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	29 81       	ldd	r18, Y+1	; 0x01
     334:	fc 01       	movw	r30, r24
     336:	20 83       	st	Z, r18
     338:	00 00       	nop
     33a:	0f 90       	pop	r0
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	08 95       	ret

00000342 <main>:
int i = 0;
int test = 1;


int main(void)
{
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
     34a:	2e 97       	sbiw	r28, 0x0e	; 14
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	f8 94       	cli
     350:	de bf       	out	0x3e, r29	; 62
     352:	0f be       	out	0x3f, r0	; 63
     354:	cd bf       	out	0x3d, r28	; 61
	
	//Portas GPIO
	DDRD = 0b01000001; // todos os pinos da porta D como entrada, somente o 6 e o 0 como saida
     356:	8a e2       	ldi	r24, 0x2A	; 42
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	21 e4       	ldi	r18, 0x41	; 65
     35c:	fc 01       	movw	r30, r24
     35e:	20 83       	st	Z, r18
	DDRC = 0b01100001; // pinos 6 , 5 e 0 como saida
     360:	87 e2       	ldi	r24, 0x27	; 39
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	21 e6       	ldi	r18, 0x61	; 97
     366:	fc 01       	movw	r30, r24
     368:	20 83       	st	Z, r18
	PORTD= 0b00000100;// GPIO para interrupção Pino D2
     36a:	8b e2       	ldi	r24, 0x2B	; 43
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	24 e0       	ldi	r18, 0x04	; 4
     370:	fc 01       	movw	r30, r24
     372:	20 83       	st	Z, r18
	PORTC = 0x00; //todos com nivel baixo 
     374:	88 e2       	ldi	r24, 0x28	; 40
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	fc 01       	movw	r30, r24
     37a:	10 82       	st	Z, r1
	
	//configuração das interrupções
	EICRA = 0b00000010;	// configurando como borda de descida
     37c:	89 e6       	ldi	r24, 0x69	; 105
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	22 e0       	ldi	r18, 0x02	; 2
     382:	fc 01       	movw	r30, r24
     384:	20 83       	st	Z, r18
	EIMSK = 0b00000001; //habilita a interrupção extrena INT0 
     386:	8d e3       	ldi	r24, 0x3D	; 61
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	fc 01       	movw	r30, r24
     38e:	20 83       	st	Z, r18
	sei(); //habilita a chave de interrupção global
     390:	78 94       	sei
	
	//modo PWM
	TCCR0A = 0b10100011; // habilita o Modo PWM rapido e modo nao invertido  nos pinos OC0A e OC0B
     392:	84 e4       	ldi	r24, 0x44	; 68
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	23 ea       	ldi	r18, 0xA3	; 163
     398:	fc 01       	movw	r30, r24
     39a:	20 83       	st	Z, r18
	TCCR0B = 0b00000101;	//liga TC0, prescaler = 1024, fpwm =  16MHZ/(256*1024) = 61Hz
     39c:	85 e4       	ldi	r24, 0x45	; 69
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	25 e0       	ldi	r18, 0x05	; 5
     3a2:	fc 01       	movw	r30, r24
     3a4:	20 83       	st	Z, r18
	OCR0A = 0; // controle do ciclo ativo do PWM OC0A(PD6)Duty = 200/256 = 78%
     3a6:	87 e4       	ldi	r24, 0x47	; 71
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	fc 01       	movw	r30, r24
     3ac:	10 82       	st	Z, r1
	
	//configurando o ADC
	ADMUX = 0b11000000; // tensao interna de ref(1.1v)
     3ae:	8c e7       	ldi	r24, 0x7C	; 124
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	20 ec       	ldi	r18, 0xC0	; 192
     3b4:	fc 01       	movw	r30, r24
     3b6:	20 83       	st	Z, r18
	ADCSRA = 0b11101111;//habilita o AD, interrupção, conversao, prescaler 128
     3b8:	8a e7       	ldi	r24, 0x7A	; 122
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	2f ee       	ldi	r18, 0xEF	; 239
     3be:	fc 01       	movw	r30, r24
     3c0:	20 83       	st	Z, r18
	ADCSRB = 0x00;// conversão continua
     3c2:	8b e7       	ldi	r24, 0x7B	; 123
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	fc 01       	movw	r30, r24
     3c8:	10 82       	st	Z, r1
	DIDR0 = 0b00111110;// habilita o PC0 como entrada do ADC0
     3ca:	8e e7       	ldi	r24, 0x7E	; 126
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	2e e3       	ldi	r18, 0x3E	; 62
     3d0:	fc 01       	movw	r30, r24
     3d2:	20 83       	st	Z, r18
	
	sei();//Habilita interrupção Global 
     3d4:	78 94       	sei
	
	USART_Init(MYUBRR);// Inicializa o protocolo USART
     3d6:	87 e6       	ldi	r24, 0x67	; 103
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 67 01 	call	0x2ce	; 0x2ce <USART_Init>
   
    while (1) 
    {
		// trava o display 
		if (test == 1)
     3de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3e6:	01 97       	sbiw	r24, 0x01	; 1
     3e8:	51 f4       	brne	.+20     	; 0x3fe <main+0xbc>
		{
			nokia_lcd_init();
     3ea:	0e 94 44 0a 	call	0x1488	; 0x1488 <nokia_lcd_init>
			nokia_lcd_clear();
     3ee:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nokia_lcd_clear>
			nokia_lcd_render();
     3f2:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <nokia_lcd_render>
			test = 0;
     3f6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3fa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		//Calculo do sensor LM35 Vout = 0.01 * T ;
		
		Celsius = (leitura_ADC/1023.0)*100;
     3fe:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end>
     402:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_end+0x1>
     406:	cc 01       	movw	r24, r24
     408:	a0 e0       	ldi	r26, 0x00	; 0
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	bc 01       	movw	r22, r24
     40e:	cd 01       	movw	r24, r26
     410:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <__floatunsisf>
     414:	dc 01       	movw	r26, r24
     416:	cb 01       	movw	r24, r22
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 ec       	ldi	r19, 0xC0	; 192
     41c:	4f e7       	ldi	r20, 0x7F	; 127
     41e:	54 e4       	ldi	r21, 0x44	; 68
     420:	bc 01       	movw	r22, r24
     422:	cd 01       	movw	r24, r26
     424:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__divsf3>
     428:	dc 01       	movw	r26, r24
     42a:	cb 01       	movw	r24, r22
     42c:	20 e0       	ldi	r18, 0x00	; 0
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	48 ec       	ldi	r20, 0xC8	; 200
     432:	52 e4       	ldi	r21, 0x42	; 66
     434:	bc 01       	movw	r22, r24
     436:	cd 01       	movw	r24, r26
     438:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
     43c:	dc 01       	movw	r26, r24
     43e:	cb 01       	movw	r24, r22
     440:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <Celsius>
     444:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <Celsius+0x1>
     448:	a0 93 05 04 	sts	0x0405, r26	; 0x800405 <Celsius+0x2>
     44c:	b0 93 06 04 	sts	0x0406, r27	; 0x800406 <Celsius+0x3>
		
		
		// monitoramento da temperatura em tempo real 
		nokia_lcd_clear();
     450:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nokia_lcd_clear>
		int_to_str(Celsius, leitura_ADC_string);
     454:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <Celsius>
     458:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <Celsius+0x1>
     45c:	a0 91 05 04 	lds	r26, 0x0405	; 0x800405 <Celsius+0x2>
     460:	b0 91 06 04 	lds	r27, 0x0406	; 0x800406 <Celsius+0x3>
     464:	bc 01       	movw	r22, r24
     466:	cd 01       	movw	r24, r26
     468:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
     46c:	dc 01       	movw	r26, r24
     46e:	cb 01       	movw	r24, r22
     470:	6e ef       	ldi	r22, 0xFE	; 254
     472:	73 e0       	ldi	r23, 0x03	; 3
     474:	0e 94 f6 02 	call	0x5ec	; 0x5ec <int_to_str>
		nokia_lcd_write_string("Monitoramento ",1);
     478:	61 e0       	ldi	r22, 0x01	; 1
     47a:	82 e0       	ldi	r24, 0x02	; 2
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 10);
     482:	6a e0       	ldi	r22, 0x0A	; 10
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("*------------*", 1);
     48a:	61 e0       	ldi	r22, 0x01	; 1
     48c:	81 e1       	ldi	r24, 0x11	; 17
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 20);
     494:	64 e1       	ldi	r22, 0x14	; 20
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Temperatura: ",1);
     49c:	61 e0       	ldi	r22, 0x01	; 1
     49e:	80 e2       	ldi	r24, 0x20	; 32
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 30);
     4a6:	6e e1       	ldi	r22, 0x1E	; 30
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <nokia_lcd_set_cursor>
		nokia_lcd_write_string(leitura_ADC_string, 1);
     4ae:	61 e0       	ldi	r22, 0x01	; 1
     4b0:	8e ef       	ldi	r24, 0xFE	; 254
     4b2:	93 e0       	ldi	r25, 0x03	; 3
     4b4:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nokia_lcd_write_string>
		nokia_lcd_write_string(" Celsius ",1);
     4b8:	61 e0       	ldi	r22, 0x01	; 1
     4ba:	8e e2       	ldi	r24, 0x2E	; 46
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
     4c2:	68 e2       	ldi	r22, 0x28	; 40
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <nokia_lcd_set_cursor>
		nokia_lcd_render();
     4ca:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <nokia_lcd_render>
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	aa e7       	ldi	r26, 0x7A	; 122
     4d4:	b4 e4       	ldi	r27, 0x44	; 68
     4d6:	89 83       	std	Y+1, r24	; 0x01
     4d8:	9a 83       	std	Y+2, r25	; 0x02
     4da:	ab 83       	std	Y+3, r26	; 0x03
     4dc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4de:	20 e0       	ldi	r18, 0x00	; 0
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	4a e7       	ldi	r20, 0x7A	; 122
     4e4:	55 e4       	ldi	r21, 0x45	; 69
     4e6:	69 81       	ldd	r22, Y+1	; 0x01
     4e8:	7a 81       	ldd	r23, Y+2	; 0x02
     4ea:	8b 81       	ldd	r24, Y+3	; 0x03
     4ec:	9c 81       	ldd	r25, Y+4	; 0x04
     4ee:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
     4f2:	dc 01       	movw	r26, r24
     4f4:	cb 01       	movw	r24, r22
     4f6:	8d 83       	std	Y+5, r24	; 0x05
     4f8:	9e 83       	std	Y+6, r25	; 0x06
     4fa:	af 83       	std	Y+7, r26	; 0x07
     4fc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	40 e8       	ldi	r20, 0x80	; 128
     504:	5f e3       	ldi	r21, 0x3F	; 63
     506:	6d 81       	ldd	r22, Y+5	; 0x05
     508:	7e 81       	ldd	r23, Y+6	; 0x06
     50a:	8f 81       	ldd	r24, Y+7	; 0x07
     50c:	98 85       	ldd	r25, Y+8	; 0x08
     50e:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__cmpsf2>
     512:	88 23       	and	r24, r24
     514:	2c f4       	brge	.+10     	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
		__ticks = 1;
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	9a 87       	std	Y+10, r25	; 0x0a
     51c:	89 87       	std	Y+9, r24	; 0x09
     51e:	3f c0       	rjmp	.+126    	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
	else if (__tmp > 65535)
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	3f ef       	ldi	r19, 0xFF	; 255
     524:	4f e7       	ldi	r20, 0x7F	; 127
     526:	57 e4       	ldi	r21, 0x47	; 71
     528:	6d 81       	ldd	r22, Y+5	; 0x05
     52a:	7e 81       	ldd	r23, Y+6	; 0x06
     52c:	8f 81       	ldd	r24, Y+7	; 0x07
     52e:	98 85       	ldd	r25, Y+8	; 0x08
     530:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__gesf2>
     534:	18 16       	cp	r1, r24
     536:	4c f5       	brge	.+82     	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	40 e2       	ldi	r20, 0x20	; 32
     53e:	51 e4       	ldi	r21, 0x41	; 65
     540:	69 81       	ldd	r22, Y+1	; 0x01
     542:	7a 81       	ldd	r23, Y+2	; 0x02
     544:	8b 81       	ldd	r24, Y+3	; 0x03
     546:	9c 81       	ldd	r25, Y+4	; 0x04
     548:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
     54c:	dc 01       	movw	r26, r24
     54e:	cb 01       	movw	r24, r22
     550:	bc 01       	movw	r22, r24
     552:	cd 01       	movw	r24, r26
     554:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
     558:	dc 01       	movw	r26, r24
     55a:	cb 01       	movw	r24, r22
     55c:	9a 87       	std	Y+10, r25	; 0x0a
     55e:	89 87       	std	Y+9, r24	; 0x09
     560:	0f c0       	rjmp	.+30     	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
     562:	80 e9       	ldi	r24, 0x90	; 144
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	9c 87       	std	Y+12, r25	; 0x0c
     568:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     56a:	8b 85       	ldd	r24, Y+11	; 0x0b
     56c:	9c 85       	ldd	r25, Y+12	; 0x0c
     56e:	01 97       	sbiw	r24, 0x01	; 1
     570:	f1 f7       	brne	.-4      	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
     572:	9c 87       	std	Y+12, r25	; 0x0c
     574:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     576:	89 85       	ldd	r24, Y+9	; 0x09
     578:	9a 85       	ldd	r25, Y+10	; 0x0a
     57a:	01 97       	sbiw	r24, 0x01	; 1
     57c:	9a 87       	std	Y+10, r25	; 0x0a
     57e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     580:	89 85       	ldd	r24, Y+9	; 0x09
     582:	9a 85       	ldd	r25, Y+10	; 0x0a
     584:	89 2b       	or	r24, r25
     586:	69 f7       	brne	.-38     	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
     588:	14 c0       	rjmp	.+40     	; 0x5b2 <__EEPROM_REGION_LENGTH__+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     58a:	6d 81       	ldd	r22, Y+5	; 0x05
     58c:	7e 81       	ldd	r23, Y+6	; 0x06
     58e:	8f 81       	ldd	r24, Y+7	; 0x07
     590:	98 85       	ldd	r25, Y+8	; 0x08
     592:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
     596:	dc 01       	movw	r26, r24
     598:	cb 01       	movw	r24, r22
     59a:	9a 87       	std	Y+10, r25	; 0x0a
     59c:	89 87       	std	Y+9, r24	; 0x09
     59e:	89 85       	ldd	r24, Y+9	; 0x09
     5a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5a2:	9e 87       	std	Y+14, r25	; 0x0e
     5a4:	8d 87       	std	Y+13, r24	; 0x0d
     5a6:	8d 85       	ldd	r24, Y+13	; 0x0d
     5a8:	9e 85       	ldd	r25, Y+14	; 0x0e
     5aa:	01 97       	sbiw	r24, 0x01	; 1
     5ac:	f1 f7       	brne	.-4      	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
     5ae:	9e 87       	std	Y+14, r25	; 0x0e
     5b0:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(1000);
		
		//condição de acionamento do motor 
		if (Celsius <=70)
     5b2:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <Celsius>
     5b6:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <Celsius+0x1>
     5ba:	a0 91 05 04 	lds	r26, 0x0405	; 0x800405 <Celsius+0x2>
     5be:	b0 91 06 04 	lds	r27, 0x0406	; 0x800406 <Celsius+0x3>
     5c2:	20 e0       	ldi	r18, 0x00	; 0
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	4c e8       	ldi	r20, 0x8C	; 140
     5c8:	52 e4       	ldi	r21, 0x42	; 66
     5ca:	bc 01       	movw	r22, r24
     5cc:	cd 01       	movw	r24, r26
     5ce:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__cmpsf2>
     5d2:	18 16       	cp	r1, r24
     5d4:	2c f0       	brlt	.+10     	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
		{
			PORTC = 0b00000000;
     5d6:	88 e2       	ldi	r24, 0x28	; 40
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	fc 01       	movw	r30, r24
     5dc:	10 82       	st	Z, r1
     5de:	ff ce       	rjmp	.-514    	; 0x3de <main+0x9c>
			
		}
		
		else
		{
			PORTC = 0b00100000;
     5e0:	88 e2       	ldi	r24, 0x28	; 40
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	20 e2       	ldi	r18, 0x20	; 32
     5e6:	fc 01       	movw	r30, r24
     5e8:	20 83       	st	Z, r18
	
		}	
		
    }
     5ea:	f9 ce       	rjmp	.-526    	; 0x3de <main+0x9c>

000005ec <int_to_str>:
}

//Função para o display 
void int_to_str(uint16_t s, unsigned char *d)
{
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	00 d0       	rcall	.+0      	; 0x5f2 <int_to_str+0x6>
     5f2:	00 d0       	rcall	.+0      	; 0x5f4 <int_to_str+0x8>
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <int_to_str+0xa>
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	9c 83       	std	Y+4, r25	; 0x04
     5fc:	8b 83       	std	Y+3, r24	; 0x03
     5fe:	7e 83       	std	Y+6, r23	; 0x06
     600:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t n = tam_vetor - 2;
     602:	83 e0       	ldi	r24, 0x03	; 3
     604:	8a 83       	std	Y+2, r24	; 0x02

	for (int8_t i = n; i >= 0; i--)
     606:	8a 81       	ldd	r24, Y+2	; 0x02
     608:	89 83       	std	Y+1, r24	; 0x01
     60a:	37 c0       	rjmp	.+110    	; 0x67a <int_to_str+0x8e>
	{
		d[i]=s%10+48;
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	08 2e       	mov	r0, r24
     610:	00 0c       	add	r0, r0
     612:	99 0b       	sbc	r25, r25
     614:	2d 81       	ldd	r18, Y+5	; 0x05
     616:	3e 81       	ldd	r19, Y+6	; 0x06
     618:	f9 01       	movw	r30, r18
     61a:	e8 0f       	add	r30, r24
     61c:	f9 1f       	adc	r31, r25
     61e:	4b 81       	ldd	r20, Y+3	; 0x03
     620:	5c 81       	ldd	r21, Y+4	; 0x04
     622:	9a 01       	movw	r18, r20
     624:	ad ec       	ldi	r26, 0xCD	; 205
     626:	bc ec       	ldi	r27, 0xCC	; 204
     628:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <__umulhisi3>
     62c:	96 95       	lsr	r25
     62e:	87 95       	ror	r24
     630:	96 95       	lsr	r25
     632:	87 95       	ror	r24
     634:	96 95       	lsr	r25
     636:	87 95       	ror	r24
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	9c 01       	movw	r18, r24
     63e:	22 0f       	add	r18, r18
     640:	33 1f       	adc	r19, r19
     642:	22 0f       	add	r18, r18
     644:	33 1f       	adc	r19, r19
     646:	82 0f       	add	r24, r18
     648:	93 1f       	adc	r25, r19
     64a:	9a 01       	movw	r18, r20
     64c:	28 1b       	sub	r18, r24
     64e:	39 0b       	sbc	r19, r25
     650:	c9 01       	movw	r24, r18
     652:	80 5d       	subi	r24, 0xD0	; 208
     654:	80 83       	st	Z, r24
		s/=10;
     656:	8b 81       	ldd	r24, Y+3	; 0x03
     658:	9c 81       	ldd	r25, Y+4	; 0x04
     65a:	9c 01       	movw	r18, r24
     65c:	ad ec       	ldi	r26, 0xCD	; 205
     65e:	bc ec       	ldi	r27, 0xCC	; 204
     660:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <__umulhisi3>
     664:	96 95       	lsr	r25
     666:	87 95       	ror	r24
     668:	96 95       	lsr	r25
     66a:	87 95       	ror	r24
     66c:	96 95       	lsr	r25
     66e:	87 95       	ror	r24
     670:	9c 83       	std	Y+4, r25	; 0x04
     672:	8b 83       	std	Y+3, r24	; 0x03
//Função para o display 
void int_to_str(uint16_t s, unsigned char *d)
{
	uint8_t n = tam_vetor - 2;

	for (int8_t i = n; i >= 0; i--)
     674:	89 81       	ldd	r24, Y+1	; 0x01
     676:	81 50       	subi	r24, 0x01	; 1
     678:	89 83       	std	Y+1, r24	; 0x01
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	88 23       	and	r24, r24
     67e:	34 f6       	brge	.-116    	; 0x60c <int_to_str+0x20>
	{
		d[i]=s%10+48;
		s/=10;
	}
}
     680:	00 00       	nop
     682:	26 96       	adiw	r28, 0x06	; 6
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	f8 94       	cli
     688:	de bf       	out	0x3e, r29	; 62
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	cd bf       	out	0x3d, r28	; 61
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <__vector_1>:


ISR(INT0_vect) //Sensor de presença
{
     694:	1f 92       	push	r1
     696:	0f 92       	push	r0
     698:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     69c:	0f 92       	push	r0
     69e:	11 24       	eor	r1, r1
     6a0:	2f 93       	push	r18
     6a2:	3f 93       	push	r19
     6a4:	4f 93       	push	r20
     6a6:	5f 93       	push	r21
     6a8:	6f 93       	push	r22
     6aa:	7f 93       	push	r23
     6ac:	8f 93       	push	r24
     6ae:	9f 93       	push	r25
     6b0:	af 93       	push	r26
     6b2:	bf 93       	push	r27
     6b4:	ef 93       	push	r30
     6b6:	ff 93       	push	r31
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	cd b7       	in	r28, 0x3d	; 61
     6be:	de b7       	in	r29, 0x3e	; 62
     6c0:	2e 97       	sbiw	r28, 0x0e	; 14
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	cd bf       	out	0x3d, r28	; 61
	
	nokia_lcd_init();
     6c6:	0e 94 44 0a 	call	0x1488	; 0x1488 <nokia_lcd_init>
	nokia_lcd_clear();
     6ca:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nokia_lcd_clear>
	nokia_lcd_write_string("Seja bem vindo",1);
     6ce:	61 e0       	ldi	r22, 0x01	; 1
     6d0:	88 e3       	ldi	r24, 0x38	; 56
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 20);
     6d8:	64 e1       	ldi	r22, 0x14	; 20
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <nokia_lcd_set_cursor>
	nokia_lcd_render();
     6e0:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <nokia_lcd_render>
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	aa ef       	ldi	r26, 0xFA	; 250
     6ea:	b4 e4       	ldi	r27, 0x44	; 68
     6ec:	89 83       	std	Y+1, r24	; 0x01
     6ee:	9a 83       	std	Y+2, r25	; 0x02
     6f0:	ab 83       	std	Y+3, r26	; 0x03
     6f2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	4a e7       	ldi	r20, 0x7A	; 122
     6fa:	55 e4       	ldi	r21, 0x45	; 69
     6fc:	69 81       	ldd	r22, Y+1	; 0x01
     6fe:	7a 81       	ldd	r23, Y+2	; 0x02
     700:	8b 81       	ldd	r24, Y+3	; 0x03
     702:	9c 81       	ldd	r25, Y+4	; 0x04
     704:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
     708:	dc 01       	movw	r26, r24
     70a:	cb 01       	movw	r24, r22
     70c:	8d 83       	std	Y+5, r24	; 0x05
     70e:	9e 83       	std	Y+6, r25	; 0x06
     710:	af 83       	std	Y+7, r26	; 0x07
     712:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	40 e8       	ldi	r20, 0x80	; 128
     71a:	5f e3       	ldi	r21, 0x3F	; 63
     71c:	6d 81       	ldd	r22, Y+5	; 0x05
     71e:	7e 81       	ldd	r23, Y+6	; 0x06
     720:	8f 81       	ldd	r24, Y+7	; 0x07
     722:	98 85       	ldd	r25, Y+8	; 0x08
     724:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__cmpsf2>
     728:	88 23       	and	r24, r24
     72a:	2c f4       	brge	.+10     	; 0x736 <__vector_1+0xa2>
		__ticks = 1;
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	9a 87       	std	Y+10, r25	; 0x0a
     732:	89 87       	std	Y+9, r24	; 0x09
     734:	3f c0       	rjmp	.+126    	; 0x7b4 <__vector_1+0x120>
	else if (__tmp > 65535)
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	3f ef       	ldi	r19, 0xFF	; 255
     73a:	4f e7       	ldi	r20, 0x7F	; 127
     73c:	57 e4       	ldi	r21, 0x47	; 71
     73e:	6d 81       	ldd	r22, Y+5	; 0x05
     740:	7e 81       	ldd	r23, Y+6	; 0x06
     742:	8f 81       	ldd	r24, Y+7	; 0x07
     744:	98 85       	ldd	r25, Y+8	; 0x08
     746:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__gesf2>
     74a:	18 16       	cp	r1, r24
     74c:	4c f5       	brge	.+82     	; 0x7a0 <__vector_1+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	40 e2       	ldi	r20, 0x20	; 32
     754:	51 e4       	ldi	r21, 0x41	; 65
     756:	69 81       	ldd	r22, Y+1	; 0x01
     758:	7a 81       	ldd	r23, Y+2	; 0x02
     75a:	8b 81       	ldd	r24, Y+3	; 0x03
     75c:	9c 81       	ldd	r25, Y+4	; 0x04
     75e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
     762:	dc 01       	movw	r26, r24
     764:	cb 01       	movw	r24, r22
     766:	bc 01       	movw	r22, r24
     768:	cd 01       	movw	r24, r26
     76a:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
     76e:	dc 01       	movw	r26, r24
     770:	cb 01       	movw	r24, r22
     772:	9a 87       	std	Y+10, r25	; 0x0a
     774:	89 87       	std	Y+9, r24	; 0x09
     776:	0f c0       	rjmp	.+30     	; 0x796 <__vector_1+0x102>
     778:	80 e9       	ldi	r24, 0x90	; 144
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	9c 87       	std	Y+12, r25	; 0x0c
     77e:	8b 87       	std	Y+11, r24	; 0x0b
     780:	8b 85       	ldd	r24, Y+11	; 0x0b
     782:	9c 85       	ldd	r25, Y+12	; 0x0c
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	f1 f7       	brne	.-4      	; 0x784 <__vector_1+0xf0>
     788:	9c 87       	std	Y+12, r25	; 0x0c
     78a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     78c:	89 85       	ldd	r24, Y+9	; 0x09
     78e:	9a 85       	ldd	r25, Y+10	; 0x0a
     790:	01 97       	sbiw	r24, 0x01	; 1
     792:	9a 87       	std	Y+10, r25	; 0x0a
     794:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     796:	89 85       	ldd	r24, Y+9	; 0x09
     798:	9a 85       	ldd	r25, Y+10	; 0x0a
     79a:	89 2b       	or	r24, r25
     79c:	69 f7       	brne	.-38     	; 0x778 <__vector_1+0xe4>
     79e:	14 c0       	rjmp	.+40     	; 0x7c8 <__vector_1+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7a0:	6d 81       	ldd	r22, Y+5	; 0x05
     7a2:	7e 81       	ldd	r23, Y+6	; 0x06
     7a4:	8f 81       	ldd	r24, Y+7	; 0x07
     7a6:	98 85       	ldd	r25, Y+8	; 0x08
     7a8:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
     7ac:	dc 01       	movw	r26, r24
     7ae:	cb 01       	movw	r24, r22
     7b0:	9a 87       	std	Y+10, r25	; 0x0a
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	89 85       	ldd	r24, Y+9	; 0x09
     7b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     7b8:	9e 87       	std	Y+14, r25	; 0x0e
     7ba:	8d 87       	std	Y+13, r24	; 0x0d
     7bc:	8d 85       	ldd	r24, Y+13	; 0x0d
     7be:	9e 85       	ldd	r25, Y+14	; 0x0e
     7c0:	01 97       	sbiw	r24, 0x01	; 1
     7c2:	f1 f7       	brne	.-4      	; 0x7c0 <__vector_1+0x12c>
     7c4:	9e 87       	std	Y+14, r25	; 0x0e
     7c6:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(2000);
	test = 1;
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
     7d4:	00 00       	nop
     7d6:	2e 96       	adiw	r28, 0x0e	; 14
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	cd bf       	out	0x3d, r28	; 61
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	ff 91       	pop	r31
     7e8:	ef 91       	pop	r30
     7ea:	bf 91       	pop	r27
     7ec:	af 91       	pop	r26
     7ee:	9f 91       	pop	r25
     7f0:	8f 91       	pop	r24
     7f2:	7f 91       	pop	r23
     7f4:	6f 91       	pop	r22
     7f6:	5f 91       	pop	r21
     7f8:	4f 91       	pop	r20
     7fa:	3f 91       	pop	r19
     7fc:	2f 91       	pop	r18
     7fe:	0f 90       	pop	r0
     800:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     804:	0f 90       	pop	r0
     806:	1f 90       	pop	r1
     808:	18 95       	reti

0000080a <__vector_18>:

//Protocolo Usart para definição de luminosidade da lampada
ISR(USART_RX_vect)
{
     80a:	1f 92       	push	r1
     80c:	0f 92       	push	r0
     80e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     812:	0f 92       	push	r0
     814:	11 24       	eor	r1, r1
     816:	0f 93       	push	r16
     818:	1f 93       	push	r17
     81a:	2f 93       	push	r18
     81c:	3f 93       	push	r19
     81e:	4f 93       	push	r20
     820:	5f 93       	push	r21
     822:	6f 93       	push	r22
     824:	7f 93       	push	r23
     826:	8f 93       	push	r24
     828:	9f 93       	push	r25
     82a:	af 93       	push	r26
     82c:	bf 93       	push	r27
     82e:	ef 93       	push	r30
     830:	ff 93       	push	r31
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	cd b7       	in	r28, 0x3d	; 61
     838:	de b7       	in	r29, 0x3e	; 62
     83a:	c3 56       	subi	r28, 0x63	; 99
     83c:	d1 09       	sbc	r29, r1
     83e:	de bf       	out	0x3e, r29	; 62
     840:	cd bf       	out	0x3d, r28	; 61
		char recebido;
		recebido = UDR0;
     842:	86 ec       	ldi	r24, 0xC6	; 198
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	fc 01       	movw	r30, r24
     848:	80 81       	ld	r24, Z
     84a:	89 83       	std	Y+1, r24	; 0x01
		
		if (recebido == 'l')
     84c:	89 81       	ldd	r24, Y+1	; 0x01
     84e:	8c 36       	cpi	r24, 0x6C	; 108
     850:	09 f0       	breq	.+2      	; 0x854 <__vector_18+0x4a>
     852:	8c c0       	rjmp	.+280    	; 0x96c <__stack+0x6d>
		{
			PORTD = 0b00000001;
     854:	8b e2       	ldi	r24, 0x2B	; 43
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	21 e0       	ldi	r18, 0x01	; 1
     85a:	fc 01       	movw	r30, r24
     85c:	20 83       	st	Z, r18
			nokia_lcd_init();
     85e:	0e 94 44 0a 	call	0x1488	; 0x1488 <nokia_lcd_init>
			nokia_lcd_clear();
     862:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nokia_lcd_clear>
			nokia_lcd_write_string("Lamp. das Maquinas:ligada",1);
     866:	61 e0       	ldi	r22, 0x01	; 1
     868:	87 e4       	ldi	r24, 0x47	; 71
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 10);
     870:	6a e0       	ldi	r22, 0x0A	; 10
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <nokia_lcd_set_cursor>
			nokia_lcd_render();
     878:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <nokia_lcd_render>
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	aa ef       	ldi	r26, 0xFA	; 250
     882:	b4 e4       	ldi	r27, 0x44	; 68
     884:	8a 8f       	std	Y+26, r24	; 0x1a
     886:	9b 8f       	std	Y+27, r25	; 0x1b
     888:	ac 8f       	std	Y+28, r26	; 0x1c
     88a:	bd 8f       	std	Y+29, r27	; 0x1d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	4a e7       	ldi	r20, 0x7A	; 122
     892:	55 e4       	ldi	r21, 0x45	; 69
     894:	6a 8d       	ldd	r22, Y+26	; 0x1a
     896:	7b 8d       	ldd	r23, Y+27	; 0x1b
     898:	8c 8d       	ldd	r24, Y+28	; 0x1c
     89a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     89c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
     8a0:	dc 01       	movw	r26, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	8e 8f       	std	Y+30, r24	; 0x1e
     8a6:	9f 8f       	std	Y+31, r25	; 0x1f
     8a8:	a8 a3       	std	Y+32, r26	; 0x20
     8aa:	b9 a3       	std	Y+33, r27	; 0x21
	if (__tmp < 1.0)
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	40 e8       	ldi	r20, 0x80	; 128
     8b2:	5f e3       	ldi	r21, 0x3F	; 63
     8b4:	6e 8d       	ldd	r22, Y+30	; 0x1e
     8b6:	7f 8d       	ldd	r23, Y+31	; 0x1f
     8b8:	88 a1       	ldd	r24, Y+32	; 0x20
     8ba:	99 a1       	ldd	r25, Y+33	; 0x21
     8bc:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__cmpsf2>
     8c0:	88 23       	and	r24, r24
     8c2:	2c f4       	brge	.+10     	; 0x8ce <__vector_18+0xc4>
		__ticks = 1;
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	9b a3       	std	Y+35, r25	; 0x23
     8ca:	8a a3       	std	Y+34, r24	; 0x22
     8cc:	3f c0       	rjmp	.+126    	; 0x94c <__stack+0x4d>
	else if (__tmp > 65535)
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	3f ef       	ldi	r19, 0xFF	; 255
     8d2:	4f e7       	ldi	r20, 0x7F	; 127
     8d4:	57 e4       	ldi	r21, 0x47	; 71
     8d6:	6e 8d       	ldd	r22, Y+30	; 0x1e
     8d8:	7f 8d       	ldd	r23, Y+31	; 0x1f
     8da:	88 a1       	ldd	r24, Y+32	; 0x20
     8dc:	99 a1       	ldd	r25, Y+33	; 0x21
     8de:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__gesf2>
     8e2:	18 16       	cp	r1, r24
     8e4:	4c f5       	brge	.+82     	; 0x938 <__stack+0x39>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	40 e2       	ldi	r20, 0x20	; 32
     8ec:	51 e4       	ldi	r21, 0x41	; 65
     8ee:	6a 8d       	ldd	r22, Y+26	; 0x1a
     8f0:	7b 8d       	ldd	r23, Y+27	; 0x1b
     8f2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     8f4:	9d 8d       	ldd	r25, Y+29	; 0x1d
     8f6:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
     8fa:	dc 01       	movw	r26, r24
     8fc:	cb 01       	movw	r24, r22
     8fe:	bc 01       	movw	r22, r24
     900:	cd 01       	movw	r24, r26
     902:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
     906:	dc 01       	movw	r26, r24
     908:	cb 01       	movw	r24, r22
     90a:	9b a3       	std	Y+35, r25	; 0x23
     90c:	8a a3       	std	Y+34, r24	; 0x22
     90e:	0f c0       	rjmp	.+30     	; 0x92e <__stack+0x2f>
     910:	80 e9       	ldi	r24, 0x90	; 144
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	9d a3       	std	Y+37, r25	; 0x25
     916:	8c a3       	std	Y+36, r24	; 0x24
     918:	8c a1       	ldd	r24, Y+36	; 0x24
     91a:	9d a1       	ldd	r25, Y+37	; 0x25
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	f1 f7       	brne	.-4      	; 0x91c <__stack+0x1d>
     920:	9d a3       	std	Y+37, r25	; 0x25
     922:	8c a3       	std	Y+36, r24	; 0x24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     924:	8a a1       	ldd	r24, Y+34	; 0x22
     926:	9b a1       	ldd	r25, Y+35	; 0x23
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	9b a3       	std	Y+35, r25	; 0x23
     92c:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     92e:	8a a1       	ldd	r24, Y+34	; 0x22
     930:	9b a1       	ldd	r25, Y+35	; 0x23
     932:	89 2b       	or	r24, r25
     934:	69 f7       	brne	.-38     	; 0x910 <__stack+0x11>
     936:	14 c0       	rjmp	.+40     	; 0x960 <__stack+0x61>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     938:	6e 8d       	ldd	r22, Y+30	; 0x1e
     93a:	7f 8d       	ldd	r23, Y+31	; 0x1f
     93c:	88 a1       	ldd	r24, Y+32	; 0x20
     93e:	99 a1       	ldd	r25, Y+33	; 0x21
     940:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
     944:	dc 01       	movw	r26, r24
     946:	cb 01       	movw	r24, r22
     948:	9b a3       	std	Y+35, r25	; 0x23
     94a:	8a a3       	std	Y+34, r24	; 0x22
     94c:	8a a1       	ldd	r24, Y+34	; 0x22
     94e:	9b a1       	ldd	r25, Y+35	; 0x23
     950:	9f a3       	std	Y+39, r25	; 0x27
     952:	8e a3       	std	Y+38, r24	; 0x26
     954:	8e a1       	ldd	r24, Y+38	; 0x26
     956:	9f a1       	ldd	r25, Y+39	; 0x27
     958:	01 97       	sbiw	r24, 0x01	; 1
     95a:	f1 f7       	brne	.-4      	; 0x958 <__stack+0x59>
     95c:	9f a3       	std	Y+39, r25	; 0x27
     95e:	8e a3       	std	Y+38, r24	; 0x26
			_delay_ms(2000);
			test = 1;
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     968:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		if (recebido == 'd')
     96c:	89 81       	ldd	r24, Y+1	; 0x01
     96e:	84 36       	cpi	r24, 0x64	; 100
     970:	09 f0       	breq	.+2      	; 0x974 <__stack+0x75>
     972:	8b c0       	rjmp	.+278    	; 0xa8a <__stack+0x18b>
		{
			PORTD = 0b00000000;
     974:	8b e2       	ldi	r24, 0x2B	; 43
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	fc 01       	movw	r30, r24
     97a:	10 82       	st	Z, r1
			nokia_lcd_init();
     97c:	0e 94 44 0a 	call	0x1488	; 0x1488 <nokia_lcd_init>
			nokia_lcd_clear();
     980:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nokia_lcd_clear>
			nokia_lcd_write_string("Lamp. das Maquinas:desligada",1);
     984:	61 e0       	ldi	r22, 0x01	; 1
     986:	81 e6       	ldi	r24, 0x61	; 97
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 10);
     98e:	6a e0       	ldi	r22, 0x0A	; 10
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <nokia_lcd_set_cursor>
			nokia_lcd_render();
     996:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <nokia_lcd_render>
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	aa ef       	ldi	r26, 0xFA	; 250
     9a0:	b4 e4       	ldi	r27, 0x44	; 68
     9a2:	8a 83       	std	Y+2, r24	; 0x02
     9a4:	9b 83       	std	Y+3, r25	; 0x03
     9a6:	ac 83       	std	Y+4, r26	; 0x04
     9a8:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	4a e7       	ldi	r20, 0x7A	; 122
     9b0:	55 e4       	ldi	r21, 0x45	; 69
     9b2:	6a 81       	ldd	r22, Y+2	; 0x02
     9b4:	7b 81       	ldd	r23, Y+3	; 0x03
     9b6:	8c 81       	ldd	r24, Y+4	; 0x04
     9b8:	9d 81       	ldd	r25, Y+5	; 0x05
     9ba:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
     9be:	dc 01       	movw	r26, r24
     9c0:	cb 01       	movw	r24, r22
     9c2:	88 a7       	std	Y+40, r24	; 0x28
     9c4:	99 a7       	std	Y+41, r25	; 0x29
     9c6:	aa a7       	std	Y+42, r26	; 0x2a
     9c8:	bb a7       	std	Y+43, r27	; 0x2b
	if (__tmp < 1.0)
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	40 e8       	ldi	r20, 0x80	; 128
     9d0:	5f e3       	ldi	r21, 0x3F	; 63
     9d2:	68 a5       	ldd	r22, Y+40	; 0x28
     9d4:	79 a5       	ldd	r23, Y+41	; 0x29
     9d6:	8a a5       	ldd	r24, Y+42	; 0x2a
     9d8:	9b a5       	ldd	r25, Y+43	; 0x2b
     9da:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__cmpsf2>
     9de:	88 23       	and	r24, r24
     9e0:	2c f4       	brge	.+10     	; 0x9ec <__stack+0xed>
		__ticks = 1;
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	9d a7       	std	Y+45, r25	; 0x2d
     9e8:	8c a7       	std	Y+44, r24	; 0x2c
     9ea:	3f c0       	rjmp	.+126    	; 0xa6a <__stack+0x16b>
	else if (__tmp > 65535)
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	3f ef       	ldi	r19, 0xFF	; 255
     9f0:	4f e7       	ldi	r20, 0x7F	; 127
     9f2:	57 e4       	ldi	r21, 0x47	; 71
     9f4:	68 a5       	ldd	r22, Y+40	; 0x28
     9f6:	79 a5       	ldd	r23, Y+41	; 0x29
     9f8:	8a a5       	ldd	r24, Y+42	; 0x2a
     9fa:	9b a5       	ldd	r25, Y+43	; 0x2b
     9fc:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__gesf2>
     a00:	18 16       	cp	r1, r24
     a02:	4c f5       	brge	.+82     	; 0xa56 <__stack+0x157>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	40 e2       	ldi	r20, 0x20	; 32
     a0a:	51 e4       	ldi	r21, 0x41	; 65
     a0c:	6a 81       	ldd	r22, Y+2	; 0x02
     a0e:	7b 81       	ldd	r23, Y+3	; 0x03
     a10:	8c 81       	ldd	r24, Y+4	; 0x04
     a12:	9d 81       	ldd	r25, Y+5	; 0x05
     a14:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
     a18:	dc 01       	movw	r26, r24
     a1a:	cb 01       	movw	r24, r22
     a1c:	bc 01       	movw	r22, r24
     a1e:	cd 01       	movw	r24, r26
     a20:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
     a24:	dc 01       	movw	r26, r24
     a26:	cb 01       	movw	r24, r22
     a28:	9d a7       	std	Y+45, r25	; 0x2d
     a2a:	8c a7       	std	Y+44, r24	; 0x2c
     a2c:	0f c0       	rjmp	.+30     	; 0xa4c <__stack+0x14d>
     a2e:	80 e9       	ldi	r24, 0x90	; 144
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	9f a7       	std	Y+47, r25	; 0x2f
     a34:	8e a7       	std	Y+46, r24	; 0x2e
     a36:	8e a5       	ldd	r24, Y+46	; 0x2e
     a38:	9f a5       	ldd	r25, Y+47	; 0x2f
     a3a:	01 97       	sbiw	r24, 0x01	; 1
     a3c:	f1 f7       	brne	.-4      	; 0xa3a <__stack+0x13b>
     a3e:	9f a7       	std	Y+47, r25	; 0x2f
     a40:	8e a7       	std	Y+46, r24	; 0x2e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a42:	8c a5       	ldd	r24, Y+44	; 0x2c
     a44:	9d a5       	ldd	r25, Y+45	; 0x2d
     a46:	01 97       	sbiw	r24, 0x01	; 1
     a48:	9d a7       	std	Y+45, r25	; 0x2d
     a4a:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a4c:	8c a5       	ldd	r24, Y+44	; 0x2c
     a4e:	9d a5       	ldd	r25, Y+45	; 0x2d
     a50:	89 2b       	or	r24, r25
     a52:	69 f7       	brne	.-38     	; 0xa2e <__stack+0x12f>
     a54:	14 c0       	rjmp	.+40     	; 0xa7e <__stack+0x17f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a56:	68 a5       	ldd	r22, Y+40	; 0x28
     a58:	79 a5       	ldd	r23, Y+41	; 0x29
     a5a:	8a a5       	ldd	r24, Y+42	; 0x2a
     a5c:	9b a5       	ldd	r25, Y+43	; 0x2b
     a5e:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
     a62:	dc 01       	movw	r26, r24
     a64:	cb 01       	movw	r24, r22
     a66:	9d a7       	std	Y+45, r25	; 0x2d
     a68:	8c a7       	std	Y+44, r24	; 0x2c
     a6a:	8c a5       	ldd	r24, Y+44	; 0x2c
     a6c:	9d a5       	ldd	r25, Y+45	; 0x2d
     a6e:	99 ab       	std	Y+49, r25	; 0x31
     a70:	88 ab       	std	Y+48, r24	; 0x30
     a72:	88 a9       	ldd	r24, Y+48	; 0x30
     a74:	99 a9       	ldd	r25, Y+49	; 0x31
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	f1 f7       	brne	.-4      	; 0xa76 <__stack+0x177>
     a7a:	99 ab       	std	Y+49, r25	; 0x31
     a7c:	88 ab       	std	Y+48, r24	; 0x30
			_delay_ms(2000);
			test=1;
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a86:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		if(recebido == '0')
     a8a:	89 81       	ldd	r24, Y+1	; 0x01
     a8c:	80 33       	cpi	r24, 0x30	; 48
     a8e:	09 f0       	breq	.+2      	; 0xa92 <__stack+0x193>
     a90:	a1 c0       	rjmp	.+322    	; 0xbd4 <__stack+0x2d5>
		{
			 i = 0;
     a92:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <i+0x1>
     a96:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <i>
			 OCR0A = i *60;
     a9a:	87 e4       	ldi	r24, 0x47	; 71
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <i>
     aa2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <i+0x1>
     aa6:	32 2f       	mov	r19, r18
     aa8:	2c e3       	ldi	r18, 0x3C	; 60
     aaa:	32 9f       	mul	r19, r18
     aac:	20 2d       	mov	r18, r0
     aae:	11 24       	eor	r1, r1
     ab0:	fc 01       	movw	r30, r24
     ab2:	20 83       	st	Z, r18
			 nokia_lcd_init();
     ab4:	0e 94 44 0a 	call	0x1488	; 0x1488 <nokia_lcd_init>
			 nokia_lcd_clear();
     ab8:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nokia_lcd_clear>
			 nokia_lcd_write_string("Lamp.Escritorio:desligada",1);
     abc:	61 e0       	ldi	r22, 0x01	; 1
     abe:	8e e7       	ldi	r24, 0x7E	; 126
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
     ac6:	6a e0       	ldi	r22, 0x0A	; 10
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <nokia_lcd_set_cursor>
			 nokia_lcd_write_string("Porcentagem:0%",1);
     ace:	61 e0       	ldi	r22, 0x01	; 1
     ad0:	88 e9       	ldi	r24, 0x98	; 152
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
     ad8:	6a e0       	ldi	r22, 0x0A	; 10
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <nokia_lcd_set_cursor>
			 nokia_lcd_render();
     ae0:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <nokia_lcd_render>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	aa ef       	ldi	r26, 0xFA	; 250
     aea:	b4 e4       	ldi	r27, 0x44	; 68
     aec:	8e 83       	std	Y+6, r24	; 0x06
     aee:	9f 83       	std	Y+7, r25	; 0x07
     af0:	a8 87       	std	Y+8, r26	; 0x08
     af2:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	4a e7       	ldi	r20, 0x7A	; 122
     afa:	55 e4       	ldi	r21, 0x45	; 69
     afc:	6e 81       	ldd	r22, Y+6	; 0x06
     afe:	7f 81       	ldd	r23, Y+7	; 0x07
     b00:	88 85       	ldd	r24, Y+8	; 0x08
     b02:	99 85       	ldd	r25, Y+9	; 0x09
     b04:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
     b08:	dc 01       	movw	r26, r24
     b0a:	cb 01       	movw	r24, r22
     b0c:	8a ab       	std	Y+50, r24	; 0x32
     b0e:	9b ab       	std	Y+51, r25	; 0x33
     b10:	ac ab       	std	Y+52, r26	; 0x34
     b12:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	40 e8       	ldi	r20, 0x80	; 128
     b1a:	5f e3       	ldi	r21, 0x3F	; 63
     b1c:	6a a9       	ldd	r22, Y+50	; 0x32
     b1e:	7b a9       	ldd	r23, Y+51	; 0x33
     b20:	8c a9       	ldd	r24, Y+52	; 0x34
     b22:	9d a9       	ldd	r25, Y+53	; 0x35
     b24:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__cmpsf2>
     b28:	88 23       	and	r24, r24
     b2a:	2c f4       	brge	.+10     	; 0xb36 <__stack+0x237>
		__ticks = 1;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	9f ab       	std	Y+55, r25	; 0x37
     b32:	8e ab       	std	Y+54, r24	; 0x36
     b34:	3f c0       	rjmp	.+126    	; 0xbb4 <__stack+0x2b5>
	else if (__tmp > 65535)
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	3f ef       	ldi	r19, 0xFF	; 255
     b3a:	4f e7       	ldi	r20, 0x7F	; 127
     b3c:	57 e4       	ldi	r21, 0x47	; 71
     b3e:	6a a9       	ldd	r22, Y+50	; 0x32
     b40:	7b a9       	ldd	r23, Y+51	; 0x33
     b42:	8c a9       	ldd	r24, Y+52	; 0x34
     b44:	9d a9       	ldd	r25, Y+53	; 0x35
     b46:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__gesf2>
     b4a:	18 16       	cp	r1, r24
     b4c:	4c f5       	brge	.+82     	; 0xba0 <__stack+0x2a1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e2       	ldi	r20, 0x20	; 32
     b54:	51 e4       	ldi	r21, 0x41	; 65
     b56:	6e 81       	ldd	r22, Y+6	; 0x06
     b58:	7f 81       	ldd	r23, Y+7	; 0x07
     b5a:	88 85       	ldd	r24, Y+8	; 0x08
     b5c:	99 85       	ldd	r25, Y+9	; 0x09
     b5e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
     b62:	dc 01       	movw	r26, r24
     b64:	cb 01       	movw	r24, r22
     b66:	bc 01       	movw	r22, r24
     b68:	cd 01       	movw	r24, r26
     b6a:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
     b6e:	dc 01       	movw	r26, r24
     b70:	cb 01       	movw	r24, r22
     b72:	9f ab       	std	Y+55, r25	; 0x37
     b74:	8e ab       	std	Y+54, r24	; 0x36
     b76:	0f c0       	rjmp	.+30     	; 0xb96 <__stack+0x297>
     b78:	80 e9       	ldi	r24, 0x90	; 144
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	99 af       	std	Y+57, r25	; 0x39
     b7e:	88 af       	std	Y+56, r24	; 0x38
     b80:	88 ad       	ldd	r24, Y+56	; 0x38
     b82:	99 ad       	ldd	r25, Y+57	; 0x39
     b84:	01 97       	sbiw	r24, 0x01	; 1
     b86:	f1 f7       	brne	.-4      	; 0xb84 <__stack+0x285>
     b88:	99 af       	std	Y+57, r25	; 0x39
     b8a:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b8c:	8e a9       	ldd	r24, Y+54	; 0x36
     b8e:	9f a9       	ldd	r25, Y+55	; 0x37
     b90:	01 97       	sbiw	r24, 0x01	; 1
     b92:	9f ab       	std	Y+55, r25	; 0x37
     b94:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b96:	8e a9       	ldd	r24, Y+54	; 0x36
     b98:	9f a9       	ldd	r25, Y+55	; 0x37
     b9a:	89 2b       	or	r24, r25
     b9c:	69 f7       	brne	.-38     	; 0xb78 <__stack+0x279>
     b9e:	14 c0       	rjmp	.+40     	; 0xbc8 <__stack+0x2c9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ba0:	6a a9       	ldd	r22, Y+50	; 0x32
     ba2:	7b a9       	ldd	r23, Y+51	; 0x33
     ba4:	8c a9       	ldd	r24, Y+52	; 0x34
     ba6:	9d a9       	ldd	r25, Y+53	; 0x35
     ba8:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
     bac:	dc 01       	movw	r26, r24
     bae:	cb 01       	movw	r24, r22
     bb0:	9f ab       	std	Y+55, r25	; 0x37
     bb2:	8e ab       	std	Y+54, r24	; 0x36
     bb4:	8e a9       	ldd	r24, Y+54	; 0x36
     bb6:	9f a9       	ldd	r25, Y+55	; 0x37
     bb8:	9b af       	std	Y+59, r25	; 0x3b
     bba:	8a af       	std	Y+58, r24	; 0x3a
     bbc:	8a ad       	ldd	r24, Y+58	; 0x3a
     bbe:	9b ad       	ldd	r25, Y+59	; 0x3b
     bc0:	01 97       	sbiw	r24, 0x01	; 1
     bc2:	f1 f7       	brne	.-4      	; 0xbc0 <__stack+0x2c1>
     bc4:	9b af       	std	Y+59, r25	; 0x3b
     bc6:	8a af       	std	Y+58, r24	; 0x3a
			 _delay_ms(2000);
			 test=1;
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bd0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			
		}
		
		if(recebido == '1')
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	81 33       	cpi	r24, 0x31	; 49
     bd8:	09 f0       	breq	.+2      	; 0xbdc <__stack+0x2dd>
     bda:	d9 c0       	rjmp	.+434    	; 0xd8e <__stack+0x48f>
		{
			 i = 1;
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <i+0x1>
     be4:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <i>
			 OCR0A = i *60;
     be8:	87 e4       	ldi	r24, 0x47	; 71
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <i>
     bf0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <i+0x1>
     bf4:	32 2f       	mov	r19, r18
     bf6:	2c e3       	ldi	r18, 0x3C	; 60
     bf8:	32 9f       	mul	r19, r18
     bfa:	20 2d       	mov	r18, r0
     bfc:	11 24       	eor	r1, r1
     bfe:	fc 01       	movw	r30, r24
     c00:	20 83       	st	Z, r18
			 nokia_lcd_init();
     c02:	0e 94 44 0a 	call	0x1488	; 0x1488 <nokia_lcd_init>
			 nokia_lcd_clear();
     c06:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nokia_lcd_clear>
			 nokia_lcd_write_string("Lamp. Escritorio:ligada",1);
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	87 ea       	ldi	r24, 0xA7	; 167
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
     c14:	6a e0       	ldi	r22, 0x0A	; 10
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <nokia_lcd_set_cursor>
			 nokia_lcd_write_string("Porcentagem:25%",1);
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	8f eb       	ldi	r24, 0xBF	; 191
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
     c26:	6a e0       	ldi	r22, 0x0A	; 10
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <nokia_lcd_set_cursor>
			 nokia_lcd_render();
     c2e:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <nokia_lcd_render>
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	aa ef       	ldi	r26, 0xFA	; 250
     c38:	b4 e4       	ldi	r27, 0x44	; 68
     c3a:	8a 87       	std	Y+10, r24	; 0x0a
     c3c:	9b 87       	std	Y+11, r25	; 0x0b
     c3e:	ac 87       	std	Y+12, r26	; 0x0c
     c40:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	4a e7       	ldi	r20, 0x7A	; 122
     c48:	55 e4       	ldi	r21, 0x45	; 69
     c4a:	6a 85       	ldd	r22, Y+10	; 0x0a
     c4c:	7b 85       	ldd	r23, Y+11	; 0x0b
     c4e:	8c 85       	ldd	r24, Y+12	; 0x0c
     c50:	9d 85       	ldd	r25, Y+13	; 0x0d
     c52:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
     c56:	dc 01       	movw	r26, r24
     c58:	cb 01       	movw	r24, r22
     c5a:	8c af       	std	Y+60, r24	; 0x3c
     c5c:	9d af       	std	Y+61, r25	; 0x3d
     c5e:	ae af       	std	Y+62, r26	; 0x3e
     c60:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	40 e8       	ldi	r20, 0x80	; 128
     c68:	5f e3       	ldi	r21, 0x3F	; 63
     c6a:	6c ad       	ldd	r22, Y+60	; 0x3c
     c6c:	7d ad       	ldd	r23, Y+61	; 0x3d
     c6e:	8e ad       	ldd	r24, Y+62	; 0x3e
     c70:	9f ad       	ldd	r25, Y+63	; 0x3f
     c72:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__cmpsf2>
     c76:	88 23       	and	r24, r24
     c78:	4c f4       	brge	.+18     	; 0xc8c <__stack+0x38d>
		__ticks = 1;
     c7a:	ce 01       	movw	r24, r28
     c7c:	80 5c       	subi	r24, 0xC0	; 192
     c7e:	9f 4f       	sbci	r25, 0xFF	; 255
     c80:	21 e0       	ldi	r18, 0x01	; 1
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	fc 01       	movw	r30, r24
     c86:	31 83       	std	Z+1, r19	; 0x01
     c88:	20 83       	st	Z, r18
     c8a:	61 c0       	rjmp	.+194    	; 0xd4e <__stack+0x44f>
	else if (__tmp > 65535)
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	3f ef       	ldi	r19, 0xFF	; 255
     c90:	4f e7       	ldi	r20, 0x7F	; 127
     c92:	57 e4       	ldi	r21, 0x47	; 71
     c94:	6c ad       	ldd	r22, Y+60	; 0x3c
     c96:	7d ad       	ldd	r23, Y+61	; 0x3d
     c98:	8e ad       	ldd	r24, Y+62	; 0x3e
     c9a:	9f ad       	ldd	r25, Y+63	; 0x3f
     c9c:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__gesf2>
     ca0:	18 16       	cp	r1, r24
     ca2:	0c f0       	brlt	.+2      	; 0xca6 <__stack+0x3a7>
     ca4:	46 c0       	rjmp	.+140    	; 0xd32 <__stack+0x433>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	40 e2       	ldi	r20, 0x20	; 32
     cac:	51 e4       	ldi	r21, 0x41	; 65
     cae:	6a 85       	ldd	r22, Y+10	; 0x0a
     cb0:	7b 85       	ldd	r23, Y+11	; 0x0b
     cb2:	8c 85       	ldd	r24, Y+12	; 0x0c
     cb4:	9d 85       	ldd	r25, Y+13	; 0x0d
     cb6:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
     cba:	dc 01       	movw	r26, r24
     cbc:	cb 01       	movw	r24, r22
     cbe:	8e 01       	movw	r16, r28
     cc0:	00 5c       	subi	r16, 0xC0	; 192
     cc2:	1f 4f       	sbci	r17, 0xFF	; 255
     cc4:	bc 01       	movw	r22, r24
     cc6:	cd 01       	movw	r24, r26
     cc8:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
     ccc:	dc 01       	movw	r26, r24
     cce:	cb 01       	movw	r24, r22
     cd0:	f8 01       	movw	r30, r16
     cd2:	91 83       	std	Z+1, r25	; 0x01
     cd4:	80 83       	st	Z, r24
     cd6:	24 c0       	rjmp	.+72     	; 0xd20 <__stack+0x421>
     cd8:	ce 01       	movw	r24, r28
     cda:	8e 5b       	subi	r24, 0xBE	; 190
     cdc:	9f 4f       	sbci	r25, 0xFF	; 255
     cde:	20 e9       	ldi	r18, 0x90	; 144
     ce0:	31 e0       	ldi	r19, 0x01	; 1
     ce2:	fc 01       	movw	r30, r24
     ce4:	31 83       	std	Z+1, r19	; 0x01
     ce6:	20 83       	st	Z, r18
     ce8:	ce 01       	movw	r24, r28
     cea:	8e 5b       	subi	r24, 0xBE	; 190
     cec:	9f 4f       	sbci	r25, 0xFF	; 255
     cee:	fc 01       	movw	r30, r24
     cf0:	80 81       	ld	r24, Z
     cf2:	91 81       	ldd	r25, Z+1	; 0x01
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	f1 f7       	brne	.-4      	; 0xcf4 <__stack+0x3f5>
     cf8:	9e 01       	movw	r18, r28
     cfa:	2e 5b       	subi	r18, 0xBE	; 190
     cfc:	3f 4f       	sbci	r19, 0xFF	; 255
     cfe:	f9 01       	movw	r30, r18
     d00:	91 83       	std	Z+1, r25	; 0x01
     d02:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d04:	ce 01       	movw	r24, r28
     d06:	80 5c       	subi	r24, 0xC0	; 192
     d08:	9f 4f       	sbci	r25, 0xFF	; 255
     d0a:	9e 01       	movw	r18, r28
     d0c:	20 5c       	subi	r18, 0xC0	; 192
     d0e:	3f 4f       	sbci	r19, 0xFF	; 255
     d10:	f9 01       	movw	r30, r18
     d12:	20 81       	ld	r18, Z
     d14:	31 81       	ldd	r19, Z+1	; 0x01
     d16:	21 50       	subi	r18, 0x01	; 1
     d18:	31 09       	sbc	r19, r1
     d1a:	fc 01       	movw	r30, r24
     d1c:	31 83       	std	Z+1, r19	; 0x01
     d1e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d20:	ce 01       	movw	r24, r28
     d22:	80 5c       	subi	r24, 0xC0	; 192
     d24:	9f 4f       	sbci	r25, 0xFF	; 255
     d26:	fc 01       	movw	r30, r24
     d28:	80 81       	ld	r24, Z
     d2a:	91 81       	ldd	r25, Z+1	; 0x01
     d2c:	89 2b       	or	r24, r25
     d2e:	a1 f6       	brne	.-88     	; 0xcd8 <__stack+0x3d9>
     d30:	28 c0       	rjmp	.+80     	; 0xd82 <__stack+0x483>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d32:	8e 01       	movw	r16, r28
     d34:	00 5c       	subi	r16, 0xC0	; 192
     d36:	1f 4f       	sbci	r17, 0xFF	; 255
     d38:	6c ad       	ldd	r22, Y+60	; 0x3c
     d3a:	7d ad       	ldd	r23, Y+61	; 0x3d
     d3c:	8e ad       	ldd	r24, Y+62	; 0x3e
     d3e:	9f ad       	ldd	r25, Y+63	; 0x3f
     d40:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
     d44:	dc 01       	movw	r26, r24
     d46:	cb 01       	movw	r24, r22
     d48:	f8 01       	movw	r30, r16
     d4a:	91 83       	std	Z+1, r25	; 0x01
     d4c:	80 83       	st	Z, r24
     d4e:	ce 01       	movw	r24, r28
     d50:	8c 5b       	subi	r24, 0xBC	; 188
     d52:	9f 4f       	sbci	r25, 0xFF	; 255
     d54:	9e 01       	movw	r18, r28
     d56:	20 5c       	subi	r18, 0xC0	; 192
     d58:	3f 4f       	sbci	r19, 0xFF	; 255
     d5a:	f9 01       	movw	r30, r18
     d5c:	20 81       	ld	r18, Z
     d5e:	31 81       	ldd	r19, Z+1	; 0x01
     d60:	fc 01       	movw	r30, r24
     d62:	31 83       	std	Z+1, r19	; 0x01
     d64:	20 83       	st	Z, r18
     d66:	ce 01       	movw	r24, r28
     d68:	8c 5b       	subi	r24, 0xBC	; 188
     d6a:	9f 4f       	sbci	r25, 0xFF	; 255
     d6c:	fc 01       	movw	r30, r24
     d6e:	80 81       	ld	r24, Z
     d70:	91 81       	ldd	r25, Z+1	; 0x01
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	f1 f7       	brne	.-4      	; 0xd72 <__stack+0x473>
     d76:	9e 01       	movw	r18, r28
     d78:	2c 5b       	subi	r18, 0xBC	; 188
     d7a:	3f 4f       	sbci	r19, 0xFF	; 255
     d7c:	f9 01       	movw	r30, r18
     d7e:	91 83       	std	Z+1, r25	; 0x01
     d80:	80 83       	st	Z, r24
			 _delay_ms(2000);
			 test=1;
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d8a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		if(recebido == '2')
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	82 33       	cpi	r24, 0x32	; 50
     d92:	09 f0       	breq	.+2      	; 0xd96 <__stack+0x497>
     d94:	e9 c0       	rjmp	.+466    	; 0xf68 <__stack+0x669>
		{
			 i = 2;
     d96:	82 e0       	ldi	r24, 0x02	; 2
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <i+0x1>
     d9e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <i>
			 OCR0A = i *60;
     da2:	87 e4       	ldi	r24, 0x47	; 71
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <i>
     daa:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <i+0x1>
     dae:	32 2f       	mov	r19, r18
     db0:	2c e3       	ldi	r18, 0x3C	; 60
     db2:	32 9f       	mul	r19, r18
     db4:	20 2d       	mov	r18, r0
     db6:	11 24       	eor	r1, r1
     db8:	fc 01       	movw	r30, r24
     dba:	20 83       	st	Z, r18
			 nokia_lcd_init();
     dbc:	0e 94 44 0a 	call	0x1488	; 0x1488 <nokia_lcd_init>
			 nokia_lcd_clear();
     dc0:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nokia_lcd_clear>
			 nokia_lcd_write_string("Lamp. Escritorio:ligada",1);
     dc4:	61 e0       	ldi	r22, 0x01	; 1
     dc6:	87 ea       	ldi	r24, 0xA7	; 167
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
     dce:	6a e0       	ldi	r22, 0x0A	; 10
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <nokia_lcd_set_cursor>
			 nokia_lcd_write_string("Porcentagem:50%",1);
     dd6:	61 e0       	ldi	r22, 0x01	; 1
     dd8:	8f ec       	ldi	r24, 0xCF	; 207
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
     de0:	6a e0       	ldi	r22, 0x0A	; 10
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <nokia_lcd_set_cursor>
			 nokia_lcd_render();
     de8:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <nokia_lcd_render>
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	aa ef       	ldi	r26, 0xFA	; 250
     df2:	b4 e4       	ldi	r27, 0x44	; 68
     df4:	8e 87       	std	Y+14, r24	; 0x0e
     df6:	9f 87       	std	Y+15, r25	; 0x0f
     df8:	a8 8b       	std	Y+16, r26	; 0x10
     dfa:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     dfc:	8e 01       	movw	r16, r28
     dfe:	0a 5b       	subi	r16, 0xBA	; 186
     e00:	1f 4f       	sbci	r17, 0xFF	; 255
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	4a e7       	ldi	r20, 0x7A	; 122
     e08:	55 e4       	ldi	r21, 0x45	; 69
     e0a:	6e 85       	ldd	r22, Y+14	; 0x0e
     e0c:	7f 85       	ldd	r23, Y+15	; 0x0f
     e0e:	88 89       	ldd	r24, Y+16	; 0x10
     e10:	99 89       	ldd	r25, Y+17	; 0x11
     e12:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	f8 01       	movw	r30, r16
     e1c:	80 83       	st	Z, r24
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	a2 83       	std	Z+2, r26	; 0x02
     e22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e24:	ce 01       	movw	r24, r28
     e26:	8a 5b       	subi	r24, 0xBA	; 186
     e28:	9f 4f       	sbci	r25, 0xFF	; 255
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	40 e8       	ldi	r20, 0x80	; 128
     e30:	5f e3       	ldi	r21, 0x3F	; 63
     e32:	fc 01       	movw	r30, r24
     e34:	60 81       	ld	r22, Z
     e36:	71 81       	ldd	r23, Z+1	; 0x01
     e38:	82 81       	ldd	r24, Z+2	; 0x02
     e3a:	93 81       	ldd	r25, Z+3	; 0x03
     e3c:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__cmpsf2>
     e40:	88 23       	and	r24, r24
     e42:	4c f4       	brge	.+18     	; 0xe56 <__stack+0x557>
		__ticks = 1;
     e44:	ce 01       	movw	r24, r28
     e46:	86 5b       	subi	r24, 0xB6	; 182
     e48:	9f 4f       	sbci	r25, 0xFF	; 255
     e4a:	21 e0       	ldi	r18, 0x01	; 1
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	fc 01       	movw	r30, r24
     e50:	31 83       	std	Z+1, r19	; 0x01
     e52:	20 83       	st	Z, r18
     e54:	69 c0       	rjmp	.+210    	; 0xf28 <__stack+0x629>
	else if (__tmp > 65535)
     e56:	ce 01       	movw	r24, r28
     e58:	8a 5b       	subi	r24, 0xBA	; 186
     e5a:	9f 4f       	sbci	r25, 0xFF	; 255
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	3f ef       	ldi	r19, 0xFF	; 255
     e60:	4f e7       	ldi	r20, 0x7F	; 127
     e62:	57 e4       	ldi	r21, 0x47	; 71
     e64:	fc 01       	movw	r30, r24
     e66:	60 81       	ld	r22, Z
     e68:	71 81       	ldd	r23, Z+1	; 0x01
     e6a:	82 81       	ldd	r24, Z+2	; 0x02
     e6c:	93 81       	ldd	r25, Z+3	; 0x03
     e6e:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__gesf2>
     e72:	18 16       	cp	r1, r24
     e74:	0c f0       	brlt	.+2      	; 0xe78 <__stack+0x579>
     e76:	46 c0       	rjmp	.+140    	; 0xf04 <__stack+0x605>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	40 e2       	ldi	r20, 0x20	; 32
     e7e:	51 e4       	ldi	r21, 0x41	; 65
     e80:	6e 85       	ldd	r22, Y+14	; 0x0e
     e82:	7f 85       	ldd	r23, Y+15	; 0x0f
     e84:	88 89       	ldd	r24, Y+16	; 0x10
     e86:	99 89       	ldd	r25, Y+17	; 0x11
     e88:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	8e 01       	movw	r16, r28
     e92:	06 5b       	subi	r16, 0xB6	; 182
     e94:	1f 4f       	sbci	r17, 0xFF	; 255
     e96:	bc 01       	movw	r22, r24
     e98:	cd 01       	movw	r24, r26
     e9a:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	f8 01       	movw	r30, r16
     ea4:	91 83       	std	Z+1, r25	; 0x01
     ea6:	80 83       	st	Z, r24
     ea8:	24 c0       	rjmp	.+72     	; 0xef2 <__stack+0x5f3>
     eaa:	ce 01       	movw	r24, r28
     eac:	84 5b       	subi	r24, 0xB4	; 180
     eae:	9f 4f       	sbci	r25, 0xFF	; 255
     eb0:	20 e9       	ldi	r18, 0x90	; 144
     eb2:	31 e0       	ldi	r19, 0x01	; 1
     eb4:	fc 01       	movw	r30, r24
     eb6:	31 83       	std	Z+1, r19	; 0x01
     eb8:	20 83       	st	Z, r18
     eba:	ce 01       	movw	r24, r28
     ebc:	84 5b       	subi	r24, 0xB4	; 180
     ebe:	9f 4f       	sbci	r25, 0xFF	; 255
     ec0:	fc 01       	movw	r30, r24
     ec2:	80 81       	ld	r24, Z
     ec4:	91 81       	ldd	r25, Z+1	; 0x01
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	f1 f7       	brne	.-4      	; 0xec6 <__stack+0x5c7>
     eca:	9e 01       	movw	r18, r28
     ecc:	24 5b       	subi	r18, 0xB4	; 180
     ece:	3f 4f       	sbci	r19, 0xFF	; 255
     ed0:	f9 01       	movw	r30, r18
     ed2:	91 83       	std	Z+1, r25	; 0x01
     ed4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed6:	ce 01       	movw	r24, r28
     ed8:	86 5b       	subi	r24, 0xB6	; 182
     eda:	9f 4f       	sbci	r25, 0xFF	; 255
     edc:	9e 01       	movw	r18, r28
     ede:	26 5b       	subi	r18, 0xB6	; 182
     ee0:	3f 4f       	sbci	r19, 0xFF	; 255
     ee2:	f9 01       	movw	r30, r18
     ee4:	20 81       	ld	r18, Z
     ee6:	31 81       	ldd	r19, Z+1	; 0x01
     ee8:	21 50       	subi	r18, 0x01	; 1
     eea:	31 09       	sbc	r19, r1
     eec:	fc 01       	movw	r30, r24
     eee:	31 83       	std	Z+1, r19	; 0x01
     ef0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef2:	ce 01       	movw	r24, r28
     ef4:	86 5b       	subi	r24, 0xB6	; 182
     ef6:	9f 4f       	sbci	r25, 0xFF	; 255
     ef8:	fc 01       	movw	r30, r24
     efa:	80 81       	ld	r24, Z
     efc:	91 81       	ldd	r25, Z+1	; 0x01
     efe:	89 2b       	or	r24, r25
     f00:	a1 f6       	brne	.-88     	; 0xeaa <__stack+0x5ab>
     f02:	2c c0       	rjmp	.+88     	; 0xf5c <__stack+0x65d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f04:	8e 01       	movw	r16, r28
     f06:	06 5b       	subi	r16, 0xB6	; 182
     f08:	1f 4f       	sbci	r17, 0xFF	; 255
     f0a:	ce 01       	movw	r24, r28
     f0c:	8a 5b       	subi	r24, 0xBA	; 186
     f0e:	9f 4f       	sbci	r25, 0xFF	; 255
     f10:	fc 01       	movw	r30, r24
     f12:	60 81       	ld	r22, Z
     f14:	71 81       	ldd	r23, Z+1	; 0x01
     f16:	82 81       	ldd	r24, Z+2	; 0x02
     f18:	93 81       	ldd	r25, Z+3	; 0x03
     f1a:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
     f1e:	dc 01       	movw	r26, r24
     f20:	cb 01       	movw	r24, r22
     f22:	f8 01       	movw	r30, r16
     f24:	91 83       	std	Z+1, r25	; 0x01
     f26:	80 83       	st	Z, r24
     f28:	ce 01       	movw	r24, r28
     f2a:	82 5b       	subi	r24, 0xB2	; 178
     f2c:	9f 4f       	sbci	r25, 0xFF	; 255
     f2e:	9e 01       	movw	r18, r28
     f30:	26 5b       	subi	r18, 0xB6	; 182
     f32:	3f 4f       	sbci	r19, 0xFF	; 255
     f34:	f9 01       	movw	r30, r18
     f36:	20 81       	ld	r18, Z
     f38:	31 81       	ldd	r19, Z+1	; 0x01
     f3a:	fc 01       	movw	r30, r24
     f3c:	31 83       	std	Z+1, r19	; 0x01
     f3e:	20 83       	st	Z, r18
     f40:	ce 01       	movw	r24, r28
     f42:	82 5b       	subi	r24, 0xB2	; 178
     f44:	9f 4f       	sbci	r25, 0xFF	; 255
     f46:	fc 01       	movw	r30, r24
     f48:	80 81       	ld	r24, Z
     f4a:	91 81       	ldd	r25, Z+1	; 0x01
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	f1 f7       	brne	.-4      	; 0xf4c <__stack+0x64d>
     f50:	9e 01       	movw	r18, r28
     f52:	22 5b       	subi	r18, 0xB2	; 178
     f54:	3f 4f       	sbci	r19, 0xFF	; 255
     f56:	f9 01       	movw	r30, r18
     f58:	91 83       	std	Z+1, r25	; 0x01
     f5a:	80 83       	st	Z, r24
			 _delay_ms(2000);
			 test=1;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     f64:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		if(recebido == '3')
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	83 33       	cpi	r24, 0x33	; 51
     f6c:	09 f0       	breq	.+2      	; 0xf70 <__stack+0x671>
     f6e:	e9 c0       	rjmp	.+466    	; 0x1142 <__stack+0x843>
		{
			 i = 3;
     f70:	83 e0       	ldi	r24, 0x03	; 3
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <i+0x1>
     f78:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <i>
			 OCR0A = i *60;
     f7c:	87 e4       	ldi	r24, 0x47	; 71
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <i>
     f84:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <i+0x1>
     f88:	32 2f       	mov	r19, r18
     f8a:	2c e3       	ldi	r18, 0x3C	; 60
     f8c:	32 9f       	mul	r19, r18
     f8e:	20 2d       	mov	r18, r0
     f90:	11 24       	eor	r1, r1
     f92:	fc 01       	movw	r30, r24
     f94:	20 83       	st	Z, r18
			 nokia_lcd_init();
     f96:	0e 94 44 0a 	call	0x1488	; 0x1488 <nokia_lcd_init>
			 nokia_lcd_clear();
     f9a:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nokia_lcd_clear>
			 nokia_lcd_write_string("Lamp. Escritorio:ligada",1);
     f9e:	61 e0       	ldi	r22, 0x01	; 1
     fa0:	87 ea       	ldi	r24, 0xA7	; 167
     fa2:	91 e0       	ldi	r25, 0x01	; 1
     fa4:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
     fa8:	6a e0       	ldi	r22, 0x0A	; 10
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <nokia_lcd_set_cursor>
			 nokia_lcd_write_string("Porcentagem:75%",1);
     fb0:	61 e0       	ldi	r22, 0x01	; 1
     fb2:	8f ed       	ldi	r24, 0xDF	; 223
     fb4:	91 e0       	ldi	r25, 0x01	; 1
     fb6:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
     fba:	6a e0       	ldi	r22, 0x0A	; 10
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <nokia_lcd_set_cursor>
			 nokia_lcd_render();
     fc2:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <nokia_lcd_render>
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	aa ef       	ldi	r26, 0xFA	; 250
     fcc:	b4 e4       	ldi	r27, 0x44	; 68
     fce:	8a 8b       	std	Y+18, r24	; 0x12
     fd0:	9b 8b       	std	Y+19, r25	; 0x13
     fd2:	ac 8b       	std	Y+20, r26	; 0x14
     fd4:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fd6:	8e 01       	movw	r16, r28
     fd8:	00 5b       	subi	r16, 0xB0	; 176
     fda:	1f 4f       	sbci	r17, 0xFF	; 255
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	4a e7       	ldi	r20, 0x7A	; 122
     fe2:	55 e4       	ldi	r21, 0x45	; 69
     fe4:	6a 89       	ldd	r22, Y+18	; 0x12
     fe6:	7b 89       	ldd	r23, Y+19	; 0x13
     fe8:	8c 89       	ldd	r24, Y+20	; 0x14
     fea:	9d 89       	ldd	r25, Y+21	; 0x15
     fec:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	f8 01       	movw	r30, r16
     ff6:	80 83       	st	Z, r24
     ff8:	91 83       	std	Z+1, r25	; 0x01
     ffa:	a2 83       	std	Z+2, r26	; 0x02
     ffc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ffe:	ce 01       	movw	r24, r28
    1000:	80 5b       	subi	r24, 0xB0	; 176
    1002:	9f 4f       	sbci	r25, 0xFF	; 255
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e8       	ldi	r20, 0x80	; 128
    100a:	5f e3       	ldi	r21, 0x3F	; 63
    100c:	fc 01       	movw	r30, r24
    100e:	60 81       	ld	r22, Z
    1010:	71 81       	ldd	r23, Z+1	; 0x01
    1012:	82 81       	ldd	r24, Z+2	; 0x02
    1014:	93 81       	ldd	r25, Z+3	; 0x03
    1016:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__cmpsf2>
    101a:	88 23       	and	r24, r24
    101c:	4c f4       	brge	.+18     	; 0x1030 <__stack+0x731>
		__ticks = 1;
    101e:	ce 01       	movw	r24, r28
    1020:	8c 5a       	subi	r24, 0xAC	; 172
    1022:	9f 4f       	sbci	r25, 0xFF	; 255
    1024:	21 e0       	ldi	r18, 0x01	; 1
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	fc 01       	movw	r30, r24
    102a:	31 83       	std	Z+1, r19	; 0x01
    102c:	20 83       	st	Z, r18
    102e:	69 c0       	rjmp	.+210    	; 0x1102 <__stack+0x803>
	else if (__tmp > 65535)
    1030:	ce 01       	movw	r24, r28
    1032:	80 5b       	subi	r24, 0xB0	; 176
    1034:	9f 4f       	sbci	r25, 0xFF	; 255
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	3f ef       	ldi	r19, 0xFF	; 255
    103a:	4f e7       	ldi	r20, 0x7F	; 127
    103c:	57 e4       	ldi	r21, 0x47	; 71
    103e:	fc 01       	movw	r30, r24
    1040:	60 81       	ld	r22, Z
    1042:	71 81       	ldd	r23, Z+1	; 0x01
    1044:	82 81       	ldd	r24, Z+2	; 0x02
    1046:	93 81       	ldd	r25, Z+3	; 0x03
    1048:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__gesf2>
    104c:	18 16       	cp	r1, r24
    104e:	0c f0       	brlt	.+2      	; 0x1052 <__stack+0x753>
    1050:	46 c0       	rjmp	.+140    	; 0x10de <__stack+0x7df>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	40 e2       	ldi	r20, 0x20	; 32
    1058:	51 e4       	ldi	r21, 0x41	; 65
    105a:	6a 89       	ldd	r22, Y+18	; 0x12
    105c:	7b 89       	ldd	r23, Y+19	; 0x13
    105e:	8c 89       	ldd	r24, Y+20	; 0x14
    1060:	9d 89       	ldd	r25, Y+21	; 0x15
    1062:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	8e 01       	movw	r16, r28
    106c:	0c 5a       	subi	r16, 0xAC	; 172
    106e:	1f 4f       	sbci	r17, 0xFF	; 255
    1070:	bc 01       	movw	r22, r24
    1072:	cd 01       	movw	r24, r26
    1074:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	f8 01       	movw	r30, r16
    107e:	91 83       	std	Z+1, r25	; 0x01
    1080:	80 83       	st	Z, r24
    1082:	24 c0       	rjmp	.+72     	; 0x10cc <__stack+0x7cd>
    1084:	ce 01       	movw	r24, r28
    1086:	8a 5a       	subi	r24, 0xAA	; 170
    1088:	9f 4f       	sbci	r25, 0xFF	; 255
    108a:	20 e9       	ldi	r18, 0x90	; 144
    108c:	31 e0       	ldi	r19, 0x01	; 1
    108e:	fc 01       	movw	r30, r24
    1090:	31 83       	std	Z+1, r19	; 0x01
    1092:	20 83       	st	Z, r18
    1094:	ce 01       	movw	r24, r28
    1096:	8a 5a       	subi	r24, 0xAA	; 170
    1098:	9f 4f       	sbci	r25, 0xFF	; 255
    109a:	fc 01       	movw	r30, r24
    109c:	80 81       	ld	r24, Z
    109e:	91 81       	ldd	r25, Z+1	; 0x01
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <__stack+0x7a1>
    10a4:	9e 01       	movw	r18, r28
    10a6:	2a 5a       	subi	r18, 0xAA	; 170
    10a8:	3f 4f       	sbci	r19, 0xFF	; 255
    10aa:	f9 01       	movw	r30, r18
    10ac:	91 83       	std	Z+1, r25	; 0x01
    10ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b0:	ce 01       	movw	r24, r28
    10b2:	8c 5a       	subi	r24, 0xAC	; 172
    10b4:	9f 4f       	sbci	r25, 0xFF	; 255
    10b6:	9e 01       	movw	r18, r28
    10b8:	2c 5a       	subi	r18, 0xAC	; 172
    10ba:	3f 4f       	sbci	r19, 0xFF	; 255
    10bc:	f9 01       	movw	r30, r18
    10be:	20 81       	ld	r18, Z
    10c0:	31 81       	ldd	r19, Z+1	; 0x01
    10c2:	21 50       	subi	r18, 0x01	; 1
    10c4:	31 09       	sbc	r19, r1
    10c6:	fc 01       	movw	r30, r24
    10c8:	31 83       	std	Z+1, r19	; 0x01
    10ca:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10cc:	ce 01       	movw	r24, r28
    10ce:	8c 5a       	subi	r24, 0xAC	; 172
    10d0:	9f 4f       	sbci	r25, 0xFF	; 255
    10d2:	fc 01       	movw	r30, r24
    10d4:	80 81       	ld	r24, Z
    10d6:	91 81       	ldd	r25, Z+1	; 0x01
    10d8:	89 2b       	or	r24, r25
    10da:	a1 f6       	brne	.-88     	; 0x1084 <__stack+0x785>
    10dc:	2c c0       	rjmp	.+88     	; 0x1136 <__stack+0x837>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10de:	8e 01       	movw	r16, r28
    10e0:	0c 5a       	subi	r16, 0xAC	; 172
    10e2:	1f 4f       	sbci	r17, 0xFF	; 255
    10e4:	ce 01       	movw	r24, r28
    10e6:	80 5b       	subi	r24, 0xB0	; 176
    10e8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ea:	fc 01       	movw	r30, r24
    10ec:	60 81       	ld	r22, Z
    10ee:	71 81       	ldd	r23, Z+1	; 0x01
    10f0:	82 81       	ldd	r24, Z+2	; 0x02
    10f2:	93 81       	ldd	r25, Z+3	; 0x03
    10f4:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	f8 01       	movw	r30, r16
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	80 83       	st	Z, r24
    1102:	ce 01       	movw	r24, r28
    1104:	88 5a       	subi	r24, 0xA8	; 168
    1106:	9f 4f       	sbci	r25, 0xFF	; 255
    1108:	9e 01       	movw	r18, r28
    110a:	2c 5a       	subi	r18, 0xAC	; 172
    110c:	3f 4f       	sbci	r19, 0xFF	; 255
    110e:	f9 01       	movw	r30, r18
    1110:	20 81       	ld	r18, Z
    1112:	31 81       	ldd	r19, Z+1	; 0x01
    1114:	fc 01       	movw	r30, r24
    1116:	31 83       	std	Z+1, r19	; 0x01
    1118:	20 83       	st	Z, r18
    111a:	ce 01       	movw	r24, r28
    111c:	88 5a       	subi	r24, 0xA8	; 168
    111e:	9f 4f       	sbci	r25, 0xFF	; 255
    1120:	fc 01       	movw	r30, r24
    1122:	80 81       	ld	r24, Z
    1124:	91 81       	ldd	r25, Z+1	; 0x01
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	f1 f7       	brne	.-4      	; 0x1126 <__stack+0x827>
    112a:	9e 01       	movw	r18, r28
    112c:	28 5a       	subi	r18, 0xA8	; 168
    112e:	3f 4f       	sbci	r19, 0xFF	; 255
    1130:	f9 01       	movw	r30, r18
    1132:	91 83       	std	Z+1, r25	; 0x01
    1134:	80 83       	st	Z, r24
			 _delay_ms(2000);
			 test=1;
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    113e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		if(recebido == '4')
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	84 33       	cpi	r24, 0x34	; 52
    1146:	09 f0       	breq	.+2      	; 0x114a <__stack+0x84b>
    1148:	e9 c0       	rjmp	.+466    	; 0x131c <__stack+0xa1d>
		{
			 i = 4;
    114a:	84 e0       	ldi	r24, 0x04	; 4
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <i+0x1>
    1152:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <i>
			 OCR0A = i *60;
    1156:	87 e4       	ldi	r24, 0x47	; 71
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <i>
    115e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <i+0x1>
    1162:	32 2f       	mov	r19, r18
    1164:	2c e3       	ldi	r18, 0x3C	; 60
    1166:	32 9f       	mul	r19, r18
    1168:	20 2d       	mov	r18, r0
    116a:	11 24       	eor	r1, r1
    116c:	fc 01       	movw	r30, r24
    116e:	20 83       	st	Z, r18
			 nokia_lcd_init();
    1170:	0e 94 44 0a 	call	0x1488	; 0x1488 <nokia_lcd_init>
			 nokia_lcd_clear();
    1174:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nokia_lcd_clear>
			 nokia_lcd_write_string("Lamp. Escritorio:ligada",1);
    1178:	61 e0       	ldi	r22, 0x01	; 1
    117a:	87 ea       	ldi	r24, 0xA7	; 167
    117c:	91 e0       	ldi	r25, 0x01	; 1
    117e:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
    1182:	6a e0       	ldi	r22, 0x0A	; 10
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <nokia_lcd_set_cursor>
			 nokia_lcd_write_string("Porcentagem:100%",1);
    118a:	61 e0       	ldi	r22, 0x01	; 1
    118c:	8f ee       	ldi	r24, 0xEF	; 239
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
    1194:	6a e0       	ldi	r22, 0x0A	; 10
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <nokia_lcd_set_cursor>
			 nokia_lcd_render();
    119c:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <nokia_lcd_render>
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	aa ef       	ldi	r26, 0xFA	; 250
    11a6:	b4 e4       	ldi	r27, 0x44	; 68
    11a8:	8e 8b       	std	Y+22, r24	; 0x16
    11aa:	9f 8b       	std	Y+23, r25	; 0x17
    11ac:	a8 8f       	std	Y+24, r26	; 0x18
    11ae:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    11b0:	8e 01       	movw	r16, r28
    11b2:	06 5a       	subi	r16, 0xA6	; 166
    11b4:	1f 4f       	sbci	r17, 0xFF	; 255
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	4a e7       	ldi	r20, 0x7A	; 122
    11bc:	55 e4       	ldi	r21, 0x45	; 69
    11be:	6e 89       	ldd	r22, Y+22	; 0x16
    11c0:	7f 89       	ldd	r23, Y+23	; 0x17
    11c2:	88 8d       	ldd	r24, Y+24	; 0x18
    11c4:	99 8d       	ldd	r25, Y+25	; 0x19
    11c6:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	f8 01       	movw	r30, r16
    11d0:	80 83       	st	Z, r24
    11d2:	91 83       	std	Z+1, r25	; 0x01
    11d4:	a2 83       	std	Z+2, r26	; 0x02
    11d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11d8:	ce 01       	movw	r24, r28
    11da:	86 5a       	subi	r24, 0xA6	; 166
    11dc:	9f 4f       	sbci	r25, 0xFF	; 255
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	40 e8       	ldi	r20, 0x80	; 128
    11e4:	5f e3       	ldi	r21, 0x3F	; 63
    11e6:	fc 01       	movw	r30, r24
    11e8:	60 81       	ld	r22, Z
    11ea:	71 81       	ldd	r23, Z+1	; 0x01
    11ec:	82 81       	ldd	r24, Z+2	; 0x02
    11ee:	93 81       	ldd	r25, Z+3	; 0x03
    11f0:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__cmpsf2>
    11f4:	88 23       	and	r24, r24
    11f6:	4c f4       	brge	.+18     	; 0x120a <__stack+0x90b>
		__ticks = 1;
    11f8:	ce 01       	movw	r24, r28
    11fa:	82 5a       	subi	r24, 0xA2	; 162
    11fc:	9f 4f       	sbci	r25, 0xFF	; 255
    11fe:	21 e0       	ldi	r18, 0x01	; 1
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	fc 01       	movw	r30, r24
    1204:	31 83       	std	Z+1, r19	; 0x01
    1206:	20 83       	st	Z, r18
    1208:	69 c0       	rjmp	.+210    	; 0x12dc <__stack+0x9dd>
	else if (__tmp > 65535)
    120a:	ce 01       	movw	r24, r28
    120c:	86 5a       	subi	r24, 0xA6	; 166
    120e:	9f 4f       	sbci	r25, 0xFF	; 255
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	3f ef       	ldi	r19, 0xFF	; 255
    1214:	4f e7       	ldi	r20, 0x7F	; 127
    1216:	57 e4       	ldi	r21, 0x47	; 71
    1218:	fc 01       	movw	r30, r24
    121a:	60 81       	ld	r22, Z
    121c:	71 81       	ldd	r23, Z+1	; 0x01
    121e:	82 81       	ldd	r24, Z+2	; 0x02
    1220:	93 81       	ldd	r25, Z+3	; 0x03
    1222:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__gesf2>
    1226:	18 16       	cp	r1, r24
    1228:	0c f0       	brlt	.+2      	; 0x122c <__stack+0x92d>
    122a:	46 c0       	rjmp	.+140    	; 0x12b8 <__stack+0x9b9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e2       	ldi	r20, 0x20	; 32
    1232:	51 e4       	ldi	r21, 0x41	; 65
    1234:	6e 89       	ldd	r22, Y+22	; 0x16
    1236:	7f 89       	ldd	r23, Y+23	; 0x17
    1238:	88 8d       	ldd	r24, Y+24	; 0x18
    123a:	99 8d       	ldd	r25, Y+25	; 0x19
    123c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	8e 01       	movw	r16, r28
    1246:	02 5a       	subi	r16, 0xA2	; 162
    1248:	1f 4f       	sbci	r17, 0xFF	; 255
    124a:	bc 01       	movw	r22, r24
    124c:	cd 01       	movw	r24, r26
    124e:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	f8 01       	movw	r30, r16
    1258:	91 83       	std	Z+1, r25	; 0x01
    125a:	80 83       	st	Z, r24
    125c:	24 c0       	rjmp	.+72     	; 0x12a6 <__stack+0x9a7>
    125e:	ce 01       	movw	r24, r28
    1260:	80 5a       	subi	r24, 0xA0	; 160
    1262:	9f 4f       	sbci	r25, 0xFF	; 255
    1264:	20 e9       	ldi	r18, 0x90	; 144
    1266:	31 e0       	ldi	r19, 0x01	; 1
    1268:	fc 01       	movw	r30, r24
    126a:	31 83       	std	Z+1, r19	; 0x01
    126c:	20 83       	st	Z, r18
    126e:	ce 01       	movw	r24, r28
    1270:	80 5a       	subi	r24, 0xA0	; 160
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	fc 01       	movw	r30, r24
    1276:	80 81       	ld	r24, Z
    1278:	91 81       	ldd	r25, Z+1	; 0x01
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	f1 f7       	brne	.-4      	; 0x127a <__stack+0x97b>
    127e:	9e 01       	movw	r18, r28
    1280:	20 5a       	subi	r18, 0xA0	; 160
    1282:	3f 4f       	sbci	r19, 0xFF	; 255
    1284:	f9 01       	movw	r30, r18
    1286:	91 83       	std	Z+1, r25	; 0x01
    1288:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    128a:	ce 01       	movw	r24, r28
    128c:	82 5a       	subi	r24, 0xA2	; 162
    128e:	9f 4f       	sbci	r25, 0xFF	; 255
    1290:	9e 01       	movw	r18, r28
    1292:	22 5a       	subi	r18, 0xA2	; 162
    1294:	3f 4f       	sbci	r19, 0xFF	; 255
    1296:	f9 01       	movw	r30, r18
    1298:	20 81       	ld	r18, Z
    129a:	31 81       	ldd	r19, Z+1	; 0x01
    129c:	21 50       	subi	r18, 0x01	; 1
    129e:	31 09       	sbc	r19, r1
    12a0:	fc 01       	movw	r30, r24
    12a2:	31 83       	std	Z+1, r19	; 0x01
    12a4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a6:	ce 01       	movw	r24, r28
    12a8:	82 5a       	subi	r24, 0xA2	; 162
    12aa:	9f 4f       	sbci	r25, 0xFF	; 255
    12ac:	fc 01       	movw	r30, r24
    12ae:	80 81       	ld	r24, Z
    12b0:	91 81       	ldd	r25, Z+1	; 0x01
    12b2:	89 2b       	or	r24, r25
    12b4:	a1 f6       	brne	.-88     	; 0x125e <__stack+0x95f>
    12b6:	2c c0       	rjmp	.+88     	; 0x1310 <__stack+0xa11>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b8:	8e 01       	movw	r16, r28
    12ba:	02 5a       	subi	r16, 0xA2	; 162
    12bc:	1f 4f       	sbci	r17, 0xFF	; 255
    12be:	ce 01       	movw	r24, r28
    12c0:	86 5a       	subi	r24, 0xA6	; 166
    12c2:	9f 4f       	sbci	r25, 0xFF	; 255
    12c4:	fc 01       	movw	r30, r24
    12c6:	60 81       	ld	r22, Z
    12c8:	71 81       	ldd	r23, Z+1	; 0x01
    12ca:	82 81       	ldd	r24, Z+2	; 0x02
    12cc:	93 81       	ldd	r25, Z+3	; 0x03
    12ce:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	f8 01       	movw	r30, r16
    12d8:	91 83       	std	Z+1, r25	; 0x01
    12da:	80 83       	st	Z, r24
    12dc:	ce 01       	movw	r24, r28
    12de:	8e 59       	subi	r24, 0x9E	; 158
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
    12e2:	9e 01       	movw	r18, r28
    12e4:	22 5a       	subi	r18, 0xA2	; 162
    12e6:	3f 4f       	sbci	r19, 0xFF	; 255
    12e8:	f9 01       	movw	r30, r18
    12ea:	20 81       	ld	r18, Z
    12ec:	31 81       	ldd	r19, Z+1	; 0x01
    12ee:	fc 01       	movw	r30, r24
    12f0:	31 83       	std	Z+1, r19	; 0x01
    12f2:	20 83       	st	Z, r18
    12f4:	ce 01       	movw	r24, r28
    12f6:	8e 59       	subi	r24, 0x9E	; 158
    12f8:	9f 4f       	sbci	r25, 0xFF	; 255
    12fa:	fc 01       	movw	r30, r24
    12fc:	80 81       	ld	r24, Z
    12fe:	91 81       	ldd	r25, Z+1	; 0x01
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <__stack+0xa01>
    1304:	9e 01       	movw	r18, r28
    1306:	2e 59       	subi	r18, 0x9E	; 158
    1308:	3f 4f       	sbci	r19, 0xFF	; 255
    130a:	f9 01       	movw	r30, r18
    130c:	91 83       	std	Z+1, r25	; 0x01
    130e:	80 83       	st	Z, r24
			 _delay_ms(2000);
			 test=1;
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1318:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

		}
		
		USART_transmit(recebido);
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	0e 94 8b 01 	call	0x316	; 0x316 <USART_transmit>
		
    1322:	00 00       	nop
    1324:	cd 59       	subi	r28, 0x9D	; 157
    1326:	df 4f       	sbci	r29, 0xFF	; 255
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	ff 91       	pop	r31
    1338:	ef 91       	pop	r30
    133a:	bf 91       	pop	r27
    133c:	af 91       	pop	r26
    133e:	9f 91       	pop	r25
    1340:	8f 91       	pop	r24
    1342:	7f 91       	pop	r23
    1344:	6f 91       	pop	r22
    1346:	5f 91       	pop	r21
    1348:	4f 91       	pop	r20
    134a:	3f 91       	pop	r19
    134c:	2f 91       	pop	r18
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	0f 90       	pop	r0
    1354:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1358:	0f 90       	pop	r0
    135a:	1f 90       	pop	r1
    135c:	18 95       	reti

0000135e <write>:
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
}
    135e:	1f 93       	push	r17
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	00 d0       	rcall	.+0      	; 0x1366 <write+0x8>
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	6a 83       	std	Y+2, r22	; 0x02
    136e:	85 e2       	ldi	r24, 0x25	; 37
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	25 e2       	ldi	r18, 0x25	; 37
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	f9 01       	movw	r30, r18
    1378:	20 81       	ld	r18, Z
    137a:	2d 7f       	andi	r18, 0xFD	; 253
    137c:	fc 01       	movw	r30, r24
    137e:	20 83       	st	Z, r18
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	88 23       	and	r24, r24
    1384:	51 f0       	breq	.+20     	; 0x139a <write+0x3c>
    1386:	85 e2       	ldi	r24, 0x25	; 37
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	25 e2       	ldi	r18, 0x25	; 37
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	f9 01       	movw	r30, r18
    1390:	20 81       	ld	r18, Z
    1392:	28 60       	ori	r18, 0x08	; 8
    1394:	fc 01       	movw	r30, r24
    1396:	20 83       	st	Z, r18
    1398:	09 c0       	rjmp	.+18     	; 0x13ac <write+0x4e>
    139a:	85 e2       	ldi	r24, 0x25	; 37
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	25 e2       	ldi	r18, 0x25	; 37
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	f9 01       	movw	r30, r18
    13a4:	20 81       	ld	r18, Z
    13a6:	27 7f       	andi	r18, 0xF7	; 247
    13a8:	fc 01       	movw	r30, r24
    13aa:	20 83       	st	Z, r18
    13ac:	10 e0       	ldi	r17, 0x00	; 0
    13ae:	3c c0       	rjmp	.+120    	; 0x1428 <write+0xca>
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	88 2f       	mov	r24, r24
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	21 2f       	mov	r18, r17
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	47 e0       	ldi	r20, 0x07	; 7
    13bc:	50 e0       	ldi	r21, 0x00	; 0
    13be:	ba 01       	movw	r22, r20
    13c0:	62 1b       	sub	r22, r18
    13c2:	73 0b       	sbc	r23, r19
    13c4:	9b 01       	movw	r18, r22
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <write+0x6e>
    13c8:	95 95       	asr	r25
    13ca:	87 95       	ror	r24
    13cc:	2a 95       	dec	r18
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <write+0x6a>
    13d0:	81 70       	andi	r24, 0x01	; 1
    13d2:	99 27       	eor	r25, r25
    13d4:	89 2b       	or	r24, r25
    13d6:	51 f0       	breq	.+20     	; 0x13ec <write+0x8e>
    13d8:	85 e2       	ldi	r24, 0x25	; 37
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	25 e2       	ldi	r18, 0x25	; 37
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	f9 01       	movw	r30, r18
    13e2:	20 81       	ld	r18, Z
    13e4:	20 61       	ori	r18, 0x10	; 16
    13e6:	fc 01       	movw	r30, r24
    13e8:	20 83       	st	Z, r18
    13ea:	09 c0       	rjmp	.+18     	; 0x13fe <write+0xa0>
    13ec:	85 e2       	ldi	r24, 0x25	; 37
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	25 e2       	ldi	r18, 0x25	; 37
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	f9 01       	movw	r30, r18
    13f6:	20 81       	ld	r18, Z
    13f8:	2f 7e       	andi	r18, 0xEF	; 239
    13fa:	fc 01       	movw	r30, r24
    13fc:	20 83       	st	Z, r18
    13fe:	85 e2       	ldi	r24, 0x25	; 37
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	25 e2       	ldi	r18, 0x25	; 37
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	f9 01       	movw	r30, r18
    1408:	20 81       	ld	r18, Z
    140a:	20 62       	ori	r18, 0x20	; 32
    140c:	fc 01       	movw	r30, r24
    140e:	20 83       	st	Z, r18
    1410:	85 e2       	ldi	r24, 0x25	; 37
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	25 e2       	ldi	r18, 0x25	; 37
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	f9 01       	movw	r30, r18
    141a:	20 81       	ld	r18, Z
    141c:	2f 7d       	andi	r18, 0xDF	; 223
    141e:	fc 01       	movw	r30, r24
    1420:	20 83       	st	Z, r18
    1422:	81 2f       	mov	r24, r17
    1424:	11 e0       	ldi	r17, 0x01	; 1
    1426:	18 0f       	add	r17, r24
    1428:	18 30       	cpi	r17, 0x08	; 8
    142a:	10 f2       	brcs	.-124    	; 0x13b0 <write+0x52>
    142c:	85 e2       	ldi	r24, 0x25	; 37
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	25 e2       	ldi	r18, 0x25	; 37
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	f9 01       	movw	r30, r18
    1436:	20 81       	ld	r18, Z
    1438:	22 60       	ori	r18, 0x02	; 2
    143a:	fc 01       	movw	r30, r24
    143c:	20 83       	st	Z, r18
    143e:	00 00       	nop
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	08 95       	ret

0000144c <write_cmd>:
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	1f 92       	push	r1
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	0e 94 af 09 	call	0x135e	; 0x135e <write>
    1460:	00 00       	nop
    1462:	0f 90       	pop	r0
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	08 95       	ret

0000146a <write_data>:
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	1f 92       	push	r1
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	61 e0       	ldi	r22, 0x01	; 1
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	0e 94 af 09 	call	0x135e	; 0x135e <write>
    147e:	00 00       	nop
    1480:	0f 90       	pop	r0
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	08 95       	ret

00001488 <nokia_lcd_init>:
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	6c 97       	sbiw	r28, 0x1c	; 28
    1496:	0f b6       	in	r0, 0x3f	; 63
    1498:	f8 94       	cli
    149a:	de bf       	out	0x3e, r29	; 62
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	cd bf       	out	0x3d, r28	; 61
    14a0:	84 e2       	ldi	r24, 0x24	; 36
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	24 e2       	ldi	r18, 0x24	; 36
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	f9 01       	movw	r30, r18
    14aa:	20 81       	ld	r18, Z
    14ac:	22 60       	ori	r18, 0x02	; 2
    14ae:	fc 01       	movw	r30, r24
    14b0:	20 83       	st	Z, r18
    14b2:	84 e2       	ldi	r24, 0x24	; 36
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	24 e2       	ldi	r18, 0x24	; 36
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	f9 01       	movw	r30, r18
    14bc:	20 81       	ld	r18, Z
    14be:	24 60       	ori	r18, 0x04	; 4
    14c0:	fc 01       	movw	r30, r24
    14c2:	20 83       	st	Z, r18
    14c4:	84 e2       	ldi	r24, 0x24	; 36
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	24 e2       	ldi	r18, 0x24	; 36
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	f9 01       	movw	r30, r18
    14ce:	20 81       	ld	r18, Z
    14d0:	28 60       	ori	r18, 0x08	; 8
    14d2:	fc 01       	movw	r30, r24
    14d4:	20 83       	st	Z, r18
    14d6:	84 e2       	ldi	r24, 0x24	; 36
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	24 e2       	ldi	r18, 0x24	; 36
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	f9 01       	movw	r30, r18
    14e0:	20 81       	ld	r18, Z
    14e2:	20 61       	ori	r18, 0x10	; 16
    14e4:	fc 01       	movw	r30, r24
    14e6:	20 83       	st	Z, r18
    14e8:	84 e2       	ldi	r24, 0x24	; 36
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	24 e2       	ldi	r18, 0x24	; 36
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	f9 01       	movw	r30, r18
    14f2:	20 81       	ld	r18, Z
    14f4:	20 62       	ori	r18, 0x20	; 32
    14f6:	fc 01       	movw	r30, r24
    14f8:	20 83       	st	Z, r18
    14fa:	85 e2       	ldi	r24, 0x25	; 37
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	25 e2       	ldi	r18, 0x25	; 37
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	f9 01       	movw	r30, r18
    1504:	20 81       	ld	r18, Z
    1506:	24 60       	ori	r18, 0x04	; 4
    1508:	fc 01       	movw	r30, r24
    150a:	20 83       	st	Z, r18
    150c:	85 e2       	ldi	r24, 0x25	; 37
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	25 e2       	ldi	r18, 0x25	; 37
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	f9 01       	movw	r30, r18
    1516:	20 81       	ld	r18, Z
    1518:	22 60       	ori	r18, 0x02	; 2
    151a:	fc 01       	movw	r30, r24
    151c:	20 83       	st	Z, r18
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	a0 e2       	ldi	r26, 0x20	; 32
    1524:	b1 e4       	ldi	r27, 0x41	; 65
    1526:	89 83       	std	Y+1, r24	; 0x01
    1528:	9a 83       	std	Y+2, r25	; 0x02
    152a:	ab 83       	std	Y+3, r26	; 0x03
    152c:	bc 83       	std	Y+4, r27	; 0x04
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	4a e7       	ldi	r20, 0x7A	; 122
    1534:	53 e4       	ldi	r21, 0x43	; 67
    1536:	69 81       	ldd	r22, Y+1	; 0x01
    1538:	7a 81       	ldd	r23, Y+2	; 0x02
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	8b 8b       	std	Y+19, r24	; 0x13
    1548:	9c 8b       	std	Y+20, r25	; 0x14
    154a:	ad 8b       	std	Y+21, r26	; 0x15
    154c:	be 8b       	std	Y+22, r27	; 0x16
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e8       	ldi	r20, 0x80	; 128
    1554:	5f e3       	ldi	r21, 0x3F	; 63
    1556:	6b 89       	ldd	r22, Y+19	; 0x13
    1558:	7c 89       	ldd	r23, Y+20	; 0x14
    155a:	8d 89       	ldd	r24, Y+21	; 0x15
    155c:	9e 89       	ldd	r25, Y+22	; 0x16
    155e:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__cmpsf2>
    1562:	88 23       	and	r24, r24
    1564:	2c f4       	brge	.+10     	; 0x1570 <nokia_lcd_init+0xe8>
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	98 8f       	std	Y+24, r25	; 0x18
    156c:	8f 8b       	std	Y+23, r24	; 0x17
    156e:	3f c0       	rjmp	.+126    	; 0x15ee <nokia_lcd_init+0x166>
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	3f ef       	ldi	r19, 0xFF	; 255
    1574:	4f e7       	ldi	r20, 0x7F	; 127
    1576:	57 e4       	ldi	r21, 0x47	; 71
    1578:	6b 89       	ldd	r22, Y+19	; 0x13
    157a:	7c 89       	ldd	r23, Y+20	; 0x14
    157c:	8d 89       	ldd	r24, Y+21	; 0x15
    157e:	9e 89       	ldd	r25, Y+22	; 0x16
    1580:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__gesf2>
    1584:	18 16       	cp	r1, r24
    1586:	4c f5       	brge	.+82     	; 0x15da <nokia_lcd_init+0x152>
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e2       	ldi	r20, 0x20	; 32
    158e:	51 e4       	ldi	r21, 0x41	; 65
    1590:	69 81       	ldd	r22, Y+1	; 0x01
    1592:	7a 81       	ldd	r23, Y+2	; 0x02
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	9c 81       	ldd	r25, Y+4	; 0x04
    1598:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	bc 01       	movw	r22, r24
    15a2:	cd 01       	movw	r24, r26
    15a4:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	98 8f       	std	Y+24, r25	; 0x18
    15ae:	8f 8b       	std	Y+23, r24	; 0x17
    15b0:	0f c0       	rjmp	.+30     	; 0x15d0 <nokia_lcd_init+0x148>
    15b2:	89 e1       	ldi	r24, 0x19	; 25
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	9a 8f       	std	Y+26, r25	; 0x1a
    15b8:	89 8f       	std	Y+25, r24	; 0x19
    15ba:	89 8d       	ldd	r24, Y+25	; 0x19
    15bc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    15be:	01 97       	sbiw	r24, 0x01	; 1
    15c0:	f1 f7       	brne	.-4      	; 0x15be <nokia_lcd_init+0x136>
    15c2:	9a 8f       	std	Y+26, r25	; 0x1a
    15c4:	89 8f       	std	Y+25, r24	; 0x19
    15c6:	8f 89       	ldd	r24, Y+23	; 0x17
    15c8:	98 8d       	ldd	r25, Y+24	; 0x18
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	98 8f       	std	Y+24, r25	; 0x18
    15ce:	8f 8b       	std	Y+23, r24	; 0x17
    15d0:	8f 89       	ldd	r24, Y+23	; 0x17
    15d2:	98 8d       	ldd	r25, Y+24	; 0x18
    15d4:	89 2b       	or	r24, r25
    15d6:	69 f7       	brne	.-38     	; 0x15b2 <nokia_lcd_init+0x12a>
    15d8:	14 c0       	rjmp	.+40     	; 0x1602 <nokia_lcd_init+0x17a>
    15da:	6b 89       	ldd	r22, Y+19	; 0x13
    15dc:	7c 89       	ldd	r23, Y+20	; 0x14
    15de:	8d 89       	ldd	r24, Y+21	; 0x15
    15e0:	9e 89       	ldd	r25, Y+22	; 0x16
    15e2:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	98 8f       	std	Y+24, r25	; 0x18
    15ec:	8f 8b       	std	Y+23, r24	; 0x17
    15ee:	8f 89       	ldd	r24, Y+23	; 0x17
    15f0:	98 8d       	ldd	r25, Y+24	; 0x18
    15f2:	9c 8f       	std	Y+28, r25	; 0x1c
    15f4:	8b 8f       	std	Y+27, r24	; 0x1b
    15f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	f1 f7       	brne	.-4      	; 0x15fa <nokia_lcd_init+0x172>
    15fe:	9c 8f       	std	Y+28, r25	; 0x1c
    1600:	8b 8f       	std	Y+27, r24	; 0x1b
    1602:	85 e2       	ldi	r24, 0x25	; 37
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	25 e2       	ldi	r18, 0x25	; 37
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	f9 01       	movw	r30, r18
    160c:	20 81       	ld	r18, Z
    160e:	2b 7f       	andi	r18, 0xFB	; 251
    1610:	fc 01       	movw	r30, r24
    1612:	20 83       	st	Z, r18
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	ac e8       	ldi	r26, 0x8C	; 140
    161a:	b2 e4       	ldi	r27, 0x42	; 66
    161c:	8d 83       	std	Y+5, r24	; 0x05
    161e:	9e 83       	std	Y+6, r25	; 0x06
    1620:	af 83       	std	Y+7, r26	; 0x07
    1622:	b8 87       	std	Y+8, r27	; 0x08
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	4a e7       	ldi	r20, 0x7A	; 122
    162a:	53 e4       	ldi	r21, 0x43	; 67
    162c:	6d 81       	ldd	r22, Y+5	; 0x05
    162e:	7e 81       	ldd	r23, Y+6	; 0x06
    1630:	8f 81       	ldd	r24, Y+7	; 0x07
    1632:	98 85       	ldd	r25, Y+8	; 0x08
    1634:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	89 87       	std	Y+9, r24	; 0x09
    163e:	9a 87       	std	Y+10, r25	; 0x0a
    1640:	ab 87       	std	Y+11, r26	; 0x0b
    1642:	bc 87       	std	Y+12, r27	; 0x0c
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	40 e8       	ldi	r20, 0x80	; 128
    164a:	5f e3       	ldi	r21, 0x3F	; 63
    164c:	69 85       	ldd	r22, Y+9	; 0x09
    164e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1650:	8b 85       	ldd	r24, Y+11	; 0x0b
    1652:	9c 85       	ldd	r25, Y+12	; 0x0c
    1654:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__cmpsf2>
    1658:	88 23       	and	r24, r24
    165a:	2c f4       	brge	.+10     	; 0x1666 <nokia_lcd_init+0x1de>
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	9e 87       	std	Y+14, r25	; 0x0e
    1662:	8d 87       	std	Y+13, r24	; 0x0d
    1664:	3f c0       	rjmp	.+126    	; 0x16e4 <nokia_lcd_init+0x25c>
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	3f ef       	ldi	r19, 0xFF	; 255
    166a:	4f e7       	ldi	r20, 0x7F	; 127
    166c:	57 e4       	ldi	r21, 0x47	; 71
    166e:	69 85       	ldd	r22, Y+9	; 0x09
    1670:	7a 85       	ldd	r23, Y+10	; 0x0a
    1672:	8b 85       	ldd	r24, Y+11	; 0x0b
    1674:	9c 85       	ldd	r25, Y+12	; 0x0c
    1676:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__gesf2>
    167a:	18 16       	cp	r1, r24
    167c:	4c f5       	brge	.+82     	; 0x16d0 <nokia_lcd_init+0x248>
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	40 e2       	ldi	r20, 0x20	; 32
    1684:	51 e4       	ldi	r21, 0x41	; 65
    1686:	6d 81       	ldd	r22, Y+5	; 0x05
    1688:	7e 81       	ldd	r23, Y+6	; 0x06
    168a:	8f 81       	ldd	r24, Y+7	; 0x07
    168c:	98 85       	ldd	r25, Y+8	; 0x08
    168e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsf3>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	bc 01       	movw	r22, r24
    1698:	cd 01       	movw	r24, r26
    169a:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	9e 87       	std	Y+14, r25	; 0x0e
    16a4:	8d 87       	std	Y+13, r24	; 0x0d
    16a6:	0f c0       	rjmp	.+30     	; 0x16c6 <nokia_lcd_init+0x23e>
    16a8:	89 e1       	ldi	r24, 0x19	; 25
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	98 8b       	std	Y+16, r25	; 0x10
    16ae:	8f 87       	std	Y+15, r24	; 0x0f
    16b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16b2:	98 89       	ldd	r25, Y+16	; 0x10
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	f1 f7       	brne	.-4      	; 0x16b4 <nokia_lcd_init+0x22c>
    16b8:	98 8b       	std	Y+16, r25	; 0x10
    16ba:	8f 87       	std	Y+15, r24	; 0x0f
    16bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16be:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	9e 87       	std	Y+14, r25	; 0x0e
    16c4:	8d 87       	std	Y+13, r24	; 0x0d
    16c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ca:	89 2b       	or	r24, r25
    16cc:	69 f7       	brne	.-38     	; 0x16a8 <nokia_lcd_init+0x220>
    16ce:	14 c0       	rjmp	.+40     	; 0x16f8 <nokia_lcd_init+0x270>
    16d0:	69 85       	ldd	r22, Y+9	; 0x09
    16d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    16d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    16d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    16d8:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fixunssfsi>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	9e 87       	std	Y+14, r25	; 0x0e
    16e2:	8d 87       	std	Y+13, r24	; 0x0d
    16e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e8:	9a 8b       	std	Y+18, r25	; 0x12
    16ea:	89 8b       	std	Y+17, r24	; 0x11
    16ec:	89 89       	ldd	r24, Y+17	; 0x11
    16ee:	9a 89       	ldd	r25, Y+18	; 0x12
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <nokia_lcd_init+0x268>
    16f4:	9a 8b       	std	Y+18, r25	; 0x12
    16f6:	89 8b       	std	Y+17, r24	; 0x11
    16f8:	85 e2       	ldi	r24, 0x25	; 37
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	25 e2       	ldi	r18, 0x25	; 37
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	f9 01       	movw	r30, r18
    1702:	20 81       	ld	r18, Z
    1704:	24 60       	ori	r18, 0x04	; 4
    1706:	fc 01       	movw	r30, r24
    1708:	20 83       	st	Z, r18
    170a:	85 e2       	ldi	r24, 0x25	; 37
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	25 e2       	ldi	r18, 0x25	; 37
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	f9 01       	movw	r30, r18
    1714:	20 81       	ld	r18, Z
    1716:	2d 7f       	andi	r18, 0xFD	; 253
    1718:	fc 01       	movw	r30, r24
    171a:	20 83       	st	Z, r18
    171c:	81 e2       	ldi	r24, 0x21	; 33
    171e:	0e 94 26 0a 	call	0x144c	; 0x144c <write_cmd>
    1722:	83 e1       	ldi	r24, 0x13	; 19
    1724:	0e 94 26 0a 	call	0x144c	; 0x144c <write_cmd>
    1728:	86 e0       	ldi	r24, 0x06	; 6
    172a:	0e 94 26 0a 	call	0x144c	; 0x144c <write_cmd>
    172e:	82 ec       	ldi	r24, 0xC2	; 194
    1730:	0e 94 26 0a 	call	0x144c	; 0x144c <write_cmd>
    1734:	80 e2       	ldi	r24, 0x20	; 32
    1736:	0e 94 26 0a 	call	0x144c	; 0x144c <write_cmd>
    173a:	89 e0       	ldi	r24, 0x09	; 9
    173c:	0e 94 26 0a 	call	0x144c	; 0x144c <write_cmd>
    1740:	80 e8       	ldi	r24, 0x80	; 128
    1742:	0e 94 26 0a 	call	0x144c	; 0x144c <write_cmd>
    1746:	80 e4       	ldi	r24, 0x40	; 64
    1748:	0e 94 26 0a 	call	0x144c	; 0x144c <write_cmd>
    174c:	00 e0       	ldi	r16, 0x00	; 0
    174e:	10 e0       	ldi	r17, 0x00	; 0
    1750:	05 c0       	rjmp	.+10     	; 0x175c <nokia_lcd_init+0x2d4>
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	0e 94 35 0a 	call	0x146a	; 0x146a <write_data>
    1758:	0f 5f       	subi	r16, 0xFF	; 255
    175a:	1f 4f       	sbci	r17, 0xFF	; 255
    175c:	08 3f       	cpi	r16, 0xF8	; 248
    175e:	f1 e0       	ldi	r31, 0x01	; 1
    1760:	1f 07       	cpc	r17, r31
    1762:	b8 f3       	brcs	.-18     	; 0x1752 <nokia_lcd_init+0x2ca>
    1764:	88 e0       	ldi	r24, 0x08	; 8
    1766:	0e 94 26 0a 	call	0x144c	; 0x144c <write_cmd>
    176a:	8c e0       	ldi	r24, 0x0C	; 12
    176c:	0e 94 26 0a 	call	0x144c	; 0x144c <write_cmd>
    1770:	00 00       	nop
    1772:	6c 96       	adiw	r28, 0x1c	; 28
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	08 95       	ret

00001788 <nokia_lcd_clear>:
    1788:	0f 93       	push	r16
    178a:	1f 93       	push	r17
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	80 e8       	ldi	r24, 0x80	; 128
    1796:	0e 94 26 0a 	call	0x144c	; 0x144c <write_cmd>
    179a:	80 e4       	ldi	r24, 0x40	; 64
    179c:	0e 94 26 0a 	call	0x144c	; 0x144c <write_cmd>
    17a0:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <nokia_lcd+0x1f8>
    17a4:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <nokia_lcd+0x1f9>
    17a8:	00 e0       	ldi	r16, 0x00	; 0
    17aa:	10 e0       	ldi	r17, 0x00	; 0
    17ac:	07 c0       	rjmp	.+14     	; 0x17bc <nokia_lcd_clear+0x34>
    17ae:	c8 01       	movw	r24, r16
    17b0:	8c 5f       	subi	r24, 0xFC	; 252
    17b2:	9d 4f       	sbci	r25, 0xFD	; 253
    17b4:	fc 01       	movw	r30, r24
    17b6:	10 82       	st	Z, r1
    17b8:	0f 5f       	subi	r16, 0xFF	; 255
    17ba:	1f 4f       	sbci	r17, 0xFF	; 255
    17bc:	08 3f       	cpi	r16, 0xF8	; 248
    17be:	f1 e0       	ldi	r31, 0x01	; 1
    17c0:	1f 07       	cpc	r17, r31
    17c2:	a8 f3       	brcs	.-22     	; 0x17ae <nokia_lcd_clear+0x26>
    17c4:	00 00       	nop
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	1f 91       	pop	r17
    17cc:	0f 91       	pop	r16
    17ce:	08 95       	ret

000017d0 <nokia_lcd_set_pixel>:

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	00 d0       	rcall	.+0      	; 0x17d6 <nokia_lcd_set_pixel+0x6>
    17d6:	00 d0       	rcall	.+0      	; 0x17d8 <nokia_lcd_set_pixel+0x8>
    17d8:	1f 92       	push	r1
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	8b 83       	std	Y+3, r24	; 0x03
    17e0:	6c 83       	std	Y+4, r22	; 0x04
    17e2:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
    17e4:	8c 81       	ldd	r24, Y+4	; 0x04
    17e6:	86 95       	lsr	r24
    17e8:	86 95       	lsr	r24
    17ea:	86 95       	lsr	r24
    17ec:	88 2f       	mov	r24, r24
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	44 e5       	ldi	r20, 0x54	; 84
    17f2:	48 9f       	mul	r20, r24
    17f4:	90 01       	movw	r18, r0
    17f6:	49 9f       	mul	r20, r25
    17f8:	30 0d       	add	r19, r0
    17fa:	11 24       	eor	r1, r1
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	88 2f       	mov	r24, r24
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	82 0f       	add	r24, r18
    1804:	93 1f       	adc	r25, r19
    1806:	8c 5f       	subi	r24, 0xFC	; 252
    1808:	9d 4f       	sbci	r25, 0xFD	; 253
    180a:	9a 83       	std	Y+2, r25	; 0x02
    180c:	89 83       	std	Y+1, r24	; 0x01
	if (value)
    180e:	8d 81       	ldd	r24, Y+5	; 0x05
    1810:	88 23       	and	r24, r24
    1812:	c9 f0       	breq	.+50     	; 0x1846 <nokia_lcd_set_pixel+0x76>
		*byte |= (1 << (y % 8));
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	9a 81       	ldd	r25, Y+2	; 0x02
    1818:	fc 01       	movw	r30, r24
    181a:	80 81       	ld	r24, Z
    181c:	48 2f       	mov	r20, r24
    181e:	8c 81       	ldd	r24, Y+4	; 0x04
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	9c 01       	movw	r18, r24
    1826:	27 70       	andi	r18, 0x07	; 7
    1828:	33 27       	eor	r19, r19
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <nokia_lcd_set_pixel+0x64>
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	2a 95       	dec	r18
    1836:	e2 f7       	brpl	.-8      	; 0x1830 <nokia_lcd_set_pixel+0x60>
    1838:	84 2b       	or	r24, r20
    183a:	28 2f       	mov	r18, r24
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	9a 81       	ldd	r25, Y+2	; 0x02
    1840:	fc 01       	movw	r30, r24
    1842:	20 83       	st	Z, r18
	else
		*byte &= ~(1 << (y %8 ));
}
    1844:	19 c0       	rjmp	.+50     	; 0x1878 <nokia_lcd_set_pixel+0xa8>
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
	if (value)
		*byte |= (1 << (y % 8));
	else
		*byte &= ~(1 << (y %8 ));
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	9a 81       	ldd	r25, Y+2	; 0x02
    184a:	fc 01       	movw	r30, r24
    184c:	80 81       	ld	r24, Z
    184e:	48 2f       	mov	r20, r24
    1850:	8c 81       	ldd	r24, Y+4	; 0x04
    1852:	88 2f       	mov	r24, r24
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	9c 01       	movw	r18, r24
    1858:	27 70       	andi	r18, 0x07	; 7
    185a:	33 27       	eor	r19, r19
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <nokia_lcd_set_pixel+0x96>
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	2a 95       	dec	r18
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <nokia_lcd_set_pixel+0x92>
    186a:	80 95       	com	r24
    186c:	84 23       	and	r24, r20
    186e:	28 2f       	mov	r18, r24
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	9a 81       	ldd	r25, Y+2	; 0x02
    1874:	fc 01       	movw	r30, r24
    1876:	20 83       	st	Z, r18
}
    1878:	00 00       	nop
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	08 95       	ret

0000188a <nokia_lcd_write_char>:

void nokia_lcd_write_char(char code, uint8_t scale)
{
    188a:	0f 93       	push	r16
    188c:	1f 93       	push	r17
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	00 d0       	rcall	.+0      	; 0x1894 <nokia_lcd_write_char+0xa>
    1894:	00 d0       	rcall	.+0      	; 0x1896 <nokia_lcd_write_char+0xc>
    1896:	1f 92       	push	r1
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
    189c:	8c 83       	std	Y+4, r24	; 0x04
    189e:	6d 83       	std	Y+5, r22	; 0x05
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    18a0:	10 e0       	ldi	r17, 0x00	; 0
    18a2:	65 c0       	rjmp	.+202    	; 0x196e <nokia_lcd_write_char+0xe4>
		for (y = 0; y < 7*scale; y++)
    18a4:	00 e0       	ldi	r16, 0x00	; 0
    18a6:	4e c0       	rjmp	.+156    	; 0x1944 <nokia_lcd_write_char+0xba>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    18a8:	8c 81       	ldd	r24, Y+4	; 0x04
    18aa:	88 2f       	mov	r24, r24
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	9c 01       	movw	r18, r24
    18b0:	20 52       	subi	r18, 0x20	; 32
    18b2:	31 09       	sbc	r19, r1
    18b4:	9d 81       	ldd	r25, Y+5	; 0x05
    18b6:	81 2f       	mov	r24, r17
    18b8:	69 2f       	mov	r22, r25
    18ba:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__udivmodqi4>
    18be:	48 2f       	mov	r20, r24
    18c0:	50 e0       	ldi	r21, 0x00	; 0
    18c2:	c9 01       	movw	r24, r18
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	82 0f       	add	r24, r18
    18ce:	93 1f       	adc	r25, r19
    18d0:	84 0f       	add	r24, r20
    18d2:	95 1f       	adc	r25, r21
    18d4:	88 59       	subi	r24, 0x98	; 152
    18d6:	9f 4f       	sbci	r25, 0xFF	; 255
    18d8:	9a 83       	std	Y+2, r25	; 0x02
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	9a 81       	ldd	r25, Y+2	; 0x02
    18e0:	fc 01       	movw	r30, r24
    18e2:	84 91       	lpm	r24, Z
    18e4:	8b 83       	std	Y+3, r24	; 0x03
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	9d 81       	ldd	r25, Y+5	; 0x05
    18ee:	80 2f       	mov	r24, r16
    18f0:	69 2f       	mov	r22, r25
    18f2:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__udivmodqi4>
    18f6:	88 2f       	mov	r24, r24
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	a9 01       	movw	r20, r18
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <nokia_lcd_write_char+0x78>
    18fe:	55 95       	asr	r21
    1900:	47 95       	ror	r20
    1902:	8a 95       	dec	r24
    1904:	e2 f7       	brpl	.-8      	; 0x18fe <nokia_lcd_write_char+0x74>
    1906:	ca 01       	movw	r24, r20
    1908:	81 70       	andi	r24, 0x01	; 1
    190a:	99 27       	eor	r25, r25
    190c:	89 2b       	or	r24, r25
    190e:	61 f0       	breq	.+24     	; 0x1928 <nokia_lcd_write_char+0x9e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
    1910:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <nokia_lcd+0x1f9>
    1914:	98 2f       	mov	r25, r24
    1916:	90 0f       	add	r25, r16
    1918:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <nokia_lcd+0x1f8>
    191c:	81 0f       	add	r24, r17
    191e:	41 e0       	ldi	r20, 0x01	; 1
    1920:	69 2f       	mov	r22, r25
    1922:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <nokia_lcd_set_pixel>
    1926:	0b c0       	rjmp	.+22     	; 0x193e <nokia_lcd_write_char+0xb4>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    1928:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <nokia_lcd+0x1f9>
    192c:	98 2f       	mov	r25, r24
    192e:	90 0f       	add	r25, r16
    1930:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <nokia_lcd+0x1f8>
    1934:	81 0f       	add	r24, r17
    1936:	40 e0       	ldi	r20, 0x00	; 0
    1938:	69 2f       	mov	r22, r25
    193a:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
    193e:	80 2f       	mov	r24, r16
    1940:	01 e0       	ldi	r16, 0x01	; 1
    1942:	08 0f       	add	r16, r24
    1944:	40 2f       	mov	r20, r16
    1946:	50 e0       	ldi	r21, 0x00	; 0
    1948:	8d 81       	ldd	r24, Y+5	; 0x05
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	c9 01       	movw	r24, r18
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	88 0f       	add	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	82 1b       	sub	r24, r18
    195e:	93 0b       	sbc	r25, r19
    1960:	48 17       	cp	r20, r24
    1962:	59 07       	cpc	r21, r25
    1964:	0c f4       	brge	.+2      	; 0x1968 <nokia_lcd_write_char+0xde>
    1966:	a0 cf       	rjmp	.-192    	; 0x18a8 <nokia_lcd_write_char+0x1e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    1968:	81 2f       	mov	r24, r17
    196a:	11 e0       	ldi	r17, 0x01	; 1
    196c:	18 0f       	add	r17, r24
    196e:	41 2f       	mov	r20, r17
    1970:	50 e0       	ldi	r21, 0x00	; 0
    1972:	8d 81       	ldd	r24, Y+5	; 0x05
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	c9 01       	movw	r24, r18
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	82 0f       	add	r24, r18
    1984:	93 1f       	adc	r25, r19
    1986:	48 17       	cp	r20, r24
    1988:	59 07       	cpc	r21, r25
    198a:	0c f4       	brge	.+2      	; 0x198e <nokia_lcd_write_char+0x104>
    198c:	8b cf       	rjmp	.-234    	; 0x18a4 <nokia_lcd_write_char+0x1a>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    198e:	20 91 fc 03 	lds	r18, 0x03FC	; 0x8003fc <nokia_lcd+0x1f8>
    1992:	9d 81       	ldd	r25, Y+5	; 0x05
    1994:	89 2f       	mov	r24, r25
    1996:	88 0f       	add	r24, r24
    1998:	88 0f       	add	r24, r24
    199a:	89 0f       	add	r24, r25
    199c:	82 0f       	add	r24, r18
    199e:	8f 5f       	subi	r24, 0xFF	; 255
    19a0:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <nokia_lcd+0x1f8>
	if (nokia_lcd.cursor_x >= 84) {
    19a4:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <nokia_lcd+0x1f8>
    19a8:	84 35       	cpi	r24, 0x54	; 84
    19aa:	70 f0       	brcs	.+28     	; 0x19c8 <nokia_lcd_write_char+0x13e>
		nokia_lcd.cursor_x = 0;
    19ac:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
    19b0:	20 91 fd 03 	lds	r18, 0x03FD	; 0x8003fd <nokia_lcd+0x1f9>
    19b4:	9d 81       	ldd	r25, Y+5	; 0x05
    19b6:	89 2f       	mov	r24, r25
    19b8:	88 0f       	add	r24, r24
    19ba:	88 0f       	add	r24, r24
    19bc:	88 0f       	add	r24, r24
    19be:	89 1b       	sub	r24, r25
    19c0:	82 0f       	add	r24, r18
    19c2:	8f 5f       	subi	r24, 0xFF	; 255
    19c4:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <nokia_lcd+0x1f9>
	}
	if (nokia_lcd.cursor_y >= 48) {
    19c8:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <nokia_lcd+0x1f9>
    19cc:	80 33       	cpi	r24, 0x30	; 48
    19ce:	20 f0       	brcs	.+8      	; 0x19d8 <nokia_lcd_write_char+0x14e>
		nokia_lcd.cursor_x = 0;
    19d0:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
    19d4:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <nokia_lcd+0x1f9>
	}
}
    19d8:	00 00       	nop
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	1f 91       	pop	r17
    19ea:	0f 91       	pop	r16
    19ec:	08 95       	ret

000019ee <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <nokia_lcd_write_string+0x6>
    19f4:	1f 92       	push	r1
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	9a 83       	std	Y+2, r25	; 0x02
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	6b 83       	std	Y+3, r22	; 0x03
	while(*str)
    1a00:	0c c0       	rjmp	.+24     	; 0x1a1a <nokia_lcd_write_string+0x2c>
		nokia_lcd_write_char(*str++, scale);
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	9a 81       	ldd	r25, Y+2	; 0x02
    1a06:	9c 01       	movw	r18, r24
    1a08:	2f 5f       	subi	r18, 0xFF	; 255
    1a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0c:	3a 83       	std	Y+2, r19	; 0x02
    1a0e:	29 83       	std	Y+1, r18	; 0x01
    1a10:	fc 01       	movw	r30, r24
    1a12:	80 81       	ld	r24, Z
    1a14:	6b 81       	ldd	r22, Y+3	; 0x03
    1a16:	0e 94 45 0c 	call	0x188a	; 0x188a <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1e:	fc 01       	movw	r30, r24
    1a20:	80 81       	ld	r24, Z
    1a22:	88 23       	and	r24, r24
    1a24:	71 f7       	brne	.-36     	; 0x1a02 <nokia_lcd_write_string+0x14>
		nokia_lcd_write_char(*str++, scale);
}
    1a26:	00 00       	nop
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	08 95       	ret

00001a34 <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <nokia_lcd_set_cursor+0x6>
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    1a40:	6a 83       	std	Y+2, r22	; 0x02
	nokia_lcd.cursor_x = x;
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <nokia_lcd+0x1f9>
}
    1a4e:	00 00       	nop
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	08 95       	ret

00001a5a <nokia_lcd_render>:

void nokia_lcd_render(void)
{
    1a5a:	0f 93       	push	r16
    1a5c:	1f 93       	push	r17
    1a5e:	cf 93       	push	r28
    1a60:	df 93       	push	r29
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
    1a66:	80 e8       	ldi	r24, 0x80	; 128
    1a68:	0e 94 26 0a 	call	0x144c	; 0x144c <write_cmd>
	write_cmd(0x40);
    1a6c:	80 e4       	ldi	r24, 0x40	; 64
    1a6e:	0e 94 26 0a 	call	0x144c	; 0x144c <write_cmd>

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    1a72:	00 e0       	ldi	r16, 0x00	; 0
    1a74:	10 e0       	ldi	r17, 0x00	; 0
    1a76:	09 c0       	rjmp	.+18     	; 0x1a8a <nokia_lcd_render+0x30>
		write_data(nokia_lcd.screen[i]);
    1a78:	c8 01       	movw	r24, r16
    1a7a:	8c 5f       	subi	r24, 0xFC	; 252
    1a7c:	9d 4f       	sbci	r25, 0xFD	; 253
    1a7e:	fc 01       	movw	r30, r24
    1a80:	80 81       	ld	r24, Z
    1a82:	0e 94 35 0a 	call	0x146a	; 0x146a <write_data>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    1a86:	0f 5f       	subi	r16, 0xFF	; 255
    1a88:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8a:	08 3f       	cpi	r16, 0xF8	; 248
    1a8c:	f1 e0       	ldi	r31, 0x01	; 1
    1a8e:	1f 07       	cpc	r17, r31
    1a90:	98 f3       	brcs	.-26     	; 0x1a78 <nokia_lcd_render+0x1e>
		write_data(nokia_lcd.screen[i]);
}
    1a92:	00 00       	nop
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	1f 91       	pop	r17
    1a9a:	0f 91       	pop	r16
    1a9c:	08 95       	ret

00001a9e <__cmpsf2>:
    1a9e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__fp_cmp>
    1aa2:	08 f4       	brcc	.+2      	; 0x1aa6 <__cmpsf2+0x8>
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	08 95       	ret

00001aa8 <__divsf3>:
    1aa8:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__divsf3x>
    1aac:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <__fp_round>
    1ab0:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__fp_pscB>
    1ab4:	58 f0       	brcs	.+22     	; 0x1acc <__divsf3+0x24>
    1ab6:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__fp_pscA>
    1aba:	40 f0       	brcs	.+16     	; 0x1acc <__divsf3+0x24>
    1abc:	29 f4       	brne	.+10     	; 0x1ac8 <__divsf3+0x20>
    1abe:	5f 3f       	cpi	r21, 0xFF	; 255
    1ac0:	29 f0       	breq	.+10     	; 0x1acc <__divsf3+0x24>
    1ac2:	0c 94 56 0e 	jmp	0x1cac	; 0x1cac <__fp_inf>
    1ac6:	51 11       	cpse	r21, r1
    1ac8:	0c 94 a1 0e 	jmp	0x1d42	; 0x1d42 <__fp_szero>
    1acc:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <__fp_nan>

00001ad0 <__divsf3x>:
    1ad0:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__fp_split3>
    1ad4:	68 f3       	brcs	.-38     	; 0x1ab0 <__divsf3+0x8>

00001ad6 <__divsf3_pse>:
    1ad6:	99 23       	and	r25, r25
    1ad8:	b1 f3       	breq	.-20     	; 0x1ac6 <__divsf3+0x1e>
    1ada:	55 23       	and	r21, r21
    1adc:	91 f3       	breq	.-28     	; 0x1ac2 <__divsf3+0x1a>
    1ade:	95 1b       	sub	r25, r21
    1ae0:	55 0b       	sbc	r21, r21
    1ae2:	bb 27       	eor	r27, r27
    1ae4:	aa 27       	eor	r26, r26
    1ae6:	62 17       	cp	r22, r18
    1ae8:	73 07       	cpc	r23, r19
    1aea:	84 07       	cpc	r24, r20
    1aec:	38 f0       	brcs	.+14     	; 0x1afc <__divsf3_pse+0x26>
    1aee:	9f 5f       	subi	r25, 0xFF	; 255
    1af0:	5f 4f       	sbci	r21, 0xFF	; 255
    1af2:	22 0f       	add	r18, r18
    1af4:	33 1f       	adc	r19, r19
    1af6:	44 1f       	adc	r20, r20
    1af8:	aa 1f       	adc	r26, r26
    1afa:	a9 f3       	breq	.-22     	; 0x1ae6 <__divsf3_pse+0x10>
    1afc:	35 d0       	rcall	.+106    	; 0x1b68 <__divsf3_pse+0x92>
    1afe:	0e 2e       	mov	r0, r30
    1b00:	3a f0       	brmi	.+14     	; 0x1b10 <__divsf3_pse+0x3a>
    1b02:	e0 e8       	ldi	r30, 0x80	; 128
    1b04:	32 d0       	rcall	.+100    	; 0x1b6a <__divsf3_pse+0x94>
    1b06:	91 50       	subi	r25, 0x01	; 1
    1b08:	50 40       	sbci	r21, 0x00	; 0
    1b0a:	e6 95       	lsr	r30
    1b0c:	00 1c       	adc	r0, r0
    1b0e:	ca f7       	brpl	.-14     	; 0x1b02 <__divsf3_pse+0x2c>
    1b10:	2b d0       	rcall	.+86     	; 0x1b68 <__divsf3_pse+0x92>
    1b12:	fe 2f       	mov	r31, r30
    1b14:	29 d0       	rcall	.+82     	; 0x1b68 <__divsf3_pse+0x92>
    1b16:	66 0f       	add	r22, r22
    1b18:	77 1f       	adc	r23, r23
    1b1a:	88 1f       	adc	r24, r24
    1b1c:	bb 1f       	adc	r27, r27
    1b1e:	26 17       	cp	r18, r22
    1b20:	37 07       	cpc	r19, r23
    1b22:	48 07       	cpc	r20, r24
    1b24:	ab 07       	cpc	r26, r27
    1b26:	b0 e8       	ldi	r27, 0x80	; 128
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <__divsf3_pse+0x56>
    1b2a:	bb 0b       	sbc	r27, r27
    1b2c:	80 2d       	mov	r24, r0
    1b2e:	bf 01       	movw	r22, r30
    1b30:	ff 27       	eor	r31, r31
    1b32:	93 58       	subi	r25, 0x83	; 131
    1b34:	5f 4f       	sbci	r21, 0xFF	; 255
    1b36:	3a f0       	brmi	.+14     	; 0x1b46 <__divsf3_pse+0x70>
    1b38:	9e 3f       	cpi	r25, 0xFE	; 254
    1b3a:	51 05       	cpc	r21, r1
    1b3c:	78 f0       	brcs	.+30     	; 0x1b5c <__divsf3_pse+0x86>
    1b3e:	0c 94 56 0e 	jmp	0x1cac	; 0x1cac <__fp_inf>
    1b42:	0c 94 a1 0e 	jmp	0x1d42	; 0x1d42 <__fp_szero>
    1b46:	5f 3f       	cpi	r21, 0xFF	; 255
    1b48:	e4 f3       	brlt	.-8      	; 0x1b42 <__divsf3_pse+0x6c>
    1b4a:	98 3e       	cpi	r25, 0xE8	; 232
    1b4c:	d4 f3       	brlt	.-12     	; 0x1b42 <__divsf3_pse+0x6c>
    1b4e:	86 95       	lsr	r24
    1b50:	77 95       	ror	r23
    1b52:	67 95       	ror	r22
    1b54:	b7 95       	ror	r27
    1b56:	f7 95       	ror	r31
    1b58:	9f 5f       	subi	r25, 0xFF	; 255
    1b5a:	c9 f7       	brne	.-14     	; 0x1b4e <__divsf3_pse+0x78>
    1b5c:	88 0f       	add	r24, r24
    1b5e:	91 1d       	adc	r25, r1
    1b60:	96 95       	lsr	r25
    1b62:	87 95       	ror	r24
    1b64:	97 f9       	bld	r25, 7
    1b66:	08 95       	ret
    1b68:	e1 e0       	ldi	r30, 0x01	; 1
    1b6a:	66 0f       	add	r22, r22
    1b6c:	77 1f       	adc	r23, r23
    1b6e:	88 1f       	adc	r24, r24
    1b70:	bb 1f       	adc	r27, r27
    1b72:	62 17       	cp	r22, r18
    1b74:	73 07       	cpc	r23, r19
    1b76:	84 07       	cpc	r24, r20
    1b78:	ba 07       	cpc	r27, r26
    1b7a:	20 f0       	brcs	.+8      	; 0x1b84 <__divsf3_pse+0xae>
    1b7c:	62 1b       	sub	r22, r18
    1b7e:	73 0b       	sbc	r23, r19
    1b80:	84 0b       	sbc	r24, r20
    1b82:	ba 0b       	sbc	r27, r26
    1b84:	ee 1f       	adc	r30, r30
    1b86:	88 f7       	brcc	.-30     	; 0x1b6a <__divsf3_pse+0x94>
    1b88:	e0 95       	com	r30
    1b8a:	08 95       	ret

00001b8c <__fixunssfsi>:
    1b8c:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__fp_splitA>
    1b90:	88 f0       	brcs	.+34     	; 0x1bb4 <__fixunssfsi+0x28>
    1b92:	9f 57       	subi	r25, 0x7F	; 127
    1b94:	98 f0       	brcs	.+38     	; 0x1bbc <__fixunssfsi+0x30>
    1b96:	b9 2f       	mov	r27, r25
    1b98:	99 27       	eor	r25, r25
    1b9a:	b7 51       	subi	r27, 0x17	; 23
    1b9c:	b0 f0       	brcs	.+44     	; 0x1bca <__fixunssfsi+0x3e>
    1b9e:	e1 f0       	breq	.+56     	; 0x1bd8 <__fixunssfsi+0x4c>
    1ba0:	66 0f       	add	r22, r22
    1ba2:	77 1f       	adc	r23, r23
    1ba4:	88 1f       	adc	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	1a f0       	brmi	.+6      	; 0x1bb0 <__fixunssfsi+0x24>
    1baa:	ba 95       	dec	r27
    1bac:	c9 f7       	brne	.-14     	; 0x1ba0 <__fixunssfsi+0x14>
    1bae:	14 c0       	rjmp	.+40     	; 0x1bd8 <__fixunssfsi+0x4c>
    1bb0:	b1 30       	cpi	r27, 0x01	; 1
    1bb2:	91 f0       	breq	.+36     	; 0x1bd8 <__fixunssfsi+0x4c>
    1bb4:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__fp_zero>
    1bb8:	b1 e0       	ldi	r27, 0x01	; 1
    1bba:	08 95       	ret
    1bbc:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__fp_zero>
    1bc0:	67 2f       	mov	r22, r23
    1bc2:	78 2f       	mov	r23, r24
    1bc4:	88 27       	eor	r24, r24
    1bc6:	b8 5f       	subi	r27, 0xF8	; 248
    1bc8:	39 f0       	breq	.+14     	; 0x1bd8 <__fixunssfsi+0x4c>
    1bca:	b9 3f       	cpi	r27, 0xF9	; 249
    1bcc:	cc f3       	brlt	.-14     	; 0x1bc0 <__fixunssfsi+0x34>
    1bce:	86 95       	lsr	r24
    1bd0:	77 95       	ror	r23
    1bd2:	67 95       	ror	r22
    1bd4:	b3 95       	inc	r27
    1bd6:	d9 f7       	brne	.-10     	; 0x1bce <__fixunssfsi+0x42>
    1bd8:	3e f4       	brtc	.+14     	; 0x1be8 <__fixunssfsi+0x5c>
    1bda:	90 95       	com	r25
    1bdc:	80 95       	com	r24
    1bde:	70 95       	com	r23
    1be0:	61 95       	neg	r22
    1be2:	7f 4f       	sbci	r23, 0xFF	; 255
    1be4:	8f 4f       	sbci	r24, 0xFF	; 255
    1be6:	9f 4f       	sbci	r25, 0xFF	; 255
    1be8:	08 95       	ret

00001bea <__floatunsisf>:
    1bea:	e8 94       	clt
    1bec:	09 c0       	rjmp	.+18     	; 0x1c00 <__floatsisf+0x12>

00001bee <__floatsisf>:
    1bee:	97 fb       	bst	r25, 7
    1bf0:	3e f4       	brtc	.+14     	; 0x1c00 <__floatsisf+0x12>
    1bf2:	90 95       	com	r25
    1bf4:	80 95       	com	r24
    1bf6:	70 95       	com	r23
    1bf8:	61 95       	neg	r22
    1bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfc:	8f 4f       	sbci	r24, 0xFF	; 255
    1bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1c00:	99 23       	and	r25, r25
    1c02:	a9 f0       	breq	.+42     	; 0x1c2e <__floatsisf+0x40>
    1c04:	f9 2f       	mov	r31, r25
    1c06:	96 e9       	ldi	r25, 0x96	; 150
    1c08:	bb 27       	eor	r27, r27
    1c0a:	93 95       	inc	r25
    1c0c:	f6 95       	lsr	r31
    1c0e:	87 95       	ror	r24
    1c10:	77 95       	ror	r23
    1c12:	67 95       	ror	r22
    1c14:	b7 95       	ror	r27
    1c16:	f1 11       	cpse	r31, r1
    1c18:	f8 cf       	rjmp	.-16     	; 0x1c0a <__floatsisf+0x1c>
    1c1a:	fa f4       	brpl	.+62     	; 0x1c5a <__floatsisf+0x6c>
    1c1c:	bb 0f       	add	r27, r27
    1c1e:	11 f4       	brne	.+4      	; 0x1c24 <__floatsisf+0x36>
    1c20:	60 ff       	sbrs	r22, 0
    1c22:	1b c0       	rjmp	.+54     	; 0x1c5a <__floatsisf+0x6c>
    1c24:	6f 5f       	subi	r22, 0xFF	; 255
    1c26:	7f 4f       	sbci	r23, 0xFF	; 255
    1c28:	8f 4f       	sbci	r24, 0xFF	; 255
    1c2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2c:	16 c0       	rjmp	.+44     	; 0x1c5a <__floatsisf+0x6c>
    1c2e:	88 23       	and	r24, r24
    1c30:	11 f0       	breq	.+4      	; 0x1c36 <__floatsisf+0x48>
    1c32:	96 e9       	ldi	r25, 0x96	; 150
    1c34:	11 c0       	rjmp	.+34     	; 0x1c58 <__floatsisf+0x6a>
    1c36:	77 23       	and	r23, r23
    1c38:	21 f0       	breq	.+8      	; 0x1c42 <__floatsisf+0x54>
    1c3a:	9e e8       	ldi	r25, 0x8E	; 142
    1c3c:	87 2f       	mov	r24, r23
    1c3e:	76 2f       	mov	r23, r22
    1c40:	05 c0       	rjmp	.+10     	; 0x1c4c <__floatsisf+0x5e>
    1c42:	66 23       	and	r22, r22
    1c44:	71 f0       	breq	.+28     	; 0x1c62 <__floatsisf+0x74>
    1c46:	96 e8       	ldi	r25, 0x86	; 134
    1c48:	86 2f       	mov	r24, r22
    1c4a:	70 e0       	ldi	r23, 0x00	; 0
    1c4c:	60 e0       	ldi	r22, 0x00	; 0
    1c4e:	2a f0       	brmi	.+10     	; 0x1c5a <__floatsisf+0x6c>
    1c50:	9a 95       	dec	r25
    1c52:	66 0f       	add	r22, r22
    1c54:	77 1f       	adc	r23, r23
    1c56:	88 1f       	adc	r24, r24
    1c58:	da f7       	brpl	.-10     	; 0x1c50 <__floatsisf+0x62>
    1c5a:	88 0f       	add	r24, r24
    1c5c:	96 95       	lsr	r25
    1c5e:	87 95       	ror	r24
    1c60:	97 f9       	bld	r25, 7
    1c62:	08 95       	ret

00001c64 <__fp_cmp>:
    1c64:	99 0f       	add	r25, r25
    1c66:	00 08       	sbc	r0, r0
    1c68:	55 0f       	add	r21, r21
    1c6a:	aa 0b       	sbc	r26, r26
    1c6c:	e0 e8       	ldi	r30, 0x80	; 128
    1c6e:	fe ef       	ldi	r31, 0xFE	; 254
    1c70:	16 16       	cp	r1, r22
    1c72:	17 06       	cpc	r1, r23
    1c74:	e8 07       	cpc	r30, r24
    1c76:	f9 07       	cpc	r31, r25
    1c78:	c0 f0       	brcs	.+48     	; 0x1caa <__fp_cmp+0x46>
    1c7a:	12 16       	cp	r1, r18
    1c7c:	13 06       	cpc	r1, r19
    1c7e:	e4 07       	cpc	r30, r20
    1c80:	f5 07       	cpc	r31, r21
    1c82:	98 f0       	brcs	.+38     	; 0x1caa <__fp_cmp+0x46>
    1c84:	62 1b       	sub	r22, r18
    1c86:	73 0b       	sbc	r23, r19
    1c88:	84 0b       	sbc	r24, r20
    1c8a:	95 0b       	sbc	r25, r21
    1c8c:	39 f4       	brne	.+14     	; 0x1c9c <__fp_cmp+0x38>
    1c8e:	0a 26       	eor	r0, r26
    1c90:	61 f0       	breq	.+24     	; 0x1caa <__fp_cmp+0x46>
    1c92:	23 2b       	or	r18, r19
    1c94:	24 2b       	or	r18, r20
    1c96:	25 2b       	or	r18, r21
    1c98:	21 f4       	brne	.+8      	; 0x1ca2 <__fp_cmp+0x3e>
    1c9a:	08 95       	ret
    1c9c:	0a 26       	eor	r0, r26
    1c9e:	09 f4       	brne	.+2      	; 0x1ca2 <__fp_cmp+0x3e>
    1ca0:	a1 40       	sbci	r26, 0x01	; 1
    1ca2:	a6 95       	lsr	r26
    1ca4:	8f ef       	ldi	r24, 0xFF	; 255
    1ca6:	81 1d       	adc	r24, r1
    1ca8:	81 1d       	adc	r24, r1
    1caa:	08 95       	ret

00001cac <__fp_inf>:
    1cac:	97 f9       	bld	r25, 7
    1cae:	9f 67       	ori	r25, 0x7F	; 127
    1cb0:	80 e8       	ldi	r24, 0x80	; 128
    1cb2:	70 e0       	ldi	r23, 0x00	; 0
    1cb4:	60 e0       	ldi	r22, 0x00	; 0
    1cb6:	08 95       	ret

00001cb8 <__fp_nan>:
    1cb8:	9f ef       	ldi	r25, 0xFF	; 255
    1cba:	80 ec       	ldi	r24, 0xC0	; 192
    1cbc:	08 95       	ret

00001cbe <__fp_pscA>:
    1cbe:	00 24       	eor	r0, r0
    1cc0:	0a 94       	dec	r0
    1cc2:	16 16       	cp	r1, r22
    1cc4:	17 06       	cpc	r1, r23
    1cc6:	18 06       	cpc	r1, r24
    1cc8:	09 06       	cpc	r0, r25
    1cca:	08 95       	ret

00001ccc <__fp_pscB>:
    1ccc:	00 24       	eor	r0, r0
    1cce:	0a 94       	dec	r0
    1cd0:	12 16       	cp	r1, r18
    1cd2:	13 06       	cpc	r1, r19
    1cd4:	14 06       	cpc	r1, r20
    1cd6:	05 06       	cpc	r0, r21
    1cd8:	08 95       	ret

00001cda <__fp_round>:
    1cda:	09 2e       	mov	r0, r25
    1cdc:	03 94       	inc	r0
    1cde:	00 0c       	add	r0, r0
    1ce0:	11 f4       	brne	.+4      	; 0x1ce6 <__fp_round+0xc>
    1ce2:	88 23       	and	r24, r24
    1ce4:	52 f0       	brmi	.+20     	; 0x1cfa <__fp_round+0x20>
    1ce6:	bb 0f       	add	r27, r27
    1ce8:	40 f4       	brcc	.+16     	; 0x1cfa <__fp_round+0x20>
    1cea:	bf 2b       	or	r27, r31
    1cec:	11 f4       	brne	.+4      	; 0x1cf2 <__fp_round+0x18>
    1cee:	60 ff       	sbrs	r22, 0
    1cf0:	04 c0       	rjmp	.+8      	; 0x1cfa <__fp_round+0x20>
    1cf2:	6f 5f       	subi	r22, 0xFF	; 255
    1cf4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf6:	8f 4f       	sbci	r24, 0xFF	; 255
    1cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfa:	08 95       	ret

00001cfc <__fp_split3>:
    1cfc:	57 fd       	sbrc	r21, 7
    1cfe:	90 58       	subi	r25, 0x80	; 128
    1d00:	44 0f       	add	r20, r20
    1d02:	55 1f       	adc	r21, r21
    1d04:	59 f0       	breq	.+22     	; 0x1d1c <__fp_splitA+0x10>
    1d06:	5f 3f       	cpi	r21, 0xFF	; 255
    1d08:	71 f0       	breq	.+28     	; 0x1d26 <__fp_splitA+0x1a>
    1d0a:	47 95       	ror	r20

00001d0c <__fp_splitA>:
    1d0c:	88 0f       	add	r24, r24
    1d0e:	97 fb       	bst	r25, 7
    1d10:	99 1f       	adc	r25, r25
    1d12:	61 f0       	breq	.+24     	; 0x1d2c <__fp_splitA+0x20>
    1d14:	9f 3f       	cpi	r25, 0xFF	; 255
    1d16:	79 f0       	breq	.+30     	; 0x1d36 <__fp_splitA+0x2a>
    1d18:	87 95       	ror	r24
    1d1a:	08 95       	ret
    1d1c:	12 16       	cp	r1, r18
    1d1e:	13 06       	cpc	r1, r19
    1d20:	14 06       	cpc	r1, r20
    1d22:	55 1f       	adc	r21, r21
    1d24:	f2 cf       	rjmp	.-28     	; 0x1d0a <__fp_split3+0xe>
    1d26:	46 95       	lsr	r20
    1d28:	f1 df       	rcall	.-30     	; 0x1d0c <__fp_splitA>
    1d2a:	08 c0       	rjmp	.+16     	; 0x1d3c <__fp_splitA+0x30>
    1d2c:	16 16       	cp	r1, r22
    1d2e:	17 06       	cpc	r1, r23
    1d30:	18 06       	cpc	r1, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	f1 cf       	rjmp	.-30     	; 0x1d18 <__fp_splitA+0xc>
    1d36:	86 95       	lsr	r24
    1d38:	71 05       	cpc	r23, r1
    1d3a:	61 05       	cpc	r22, r1
    1d3c:	08 94       	sec
    1d3e:	08 95       	ret

00001d40 <__fp_zero>:
    1d40:	e8 94       	clt

00001d42 <__fp_szero>:
    1d42:	bb 27       	eor	r27, r27
    1d44:	66 27       	eor	r22, r22
    1d46:	77 27       	eor	r23, r23
    1d48:	cb 01       	movw	r24, r22
    1d4a:	97 f9       	bld	r25, 7
    1d4c:	08 95       	ret

00001d4e <__gesf2>:
    1d4e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__fp_cmp>
    1d52:	08 f4       	brcc	.+2      	; 0x1d56 <__gesf2+0x8>
    1d54:	8f ef       	ldi	r24, 0xFF	; 255
    1d56:	08 95       	ret

00001d58 <__mulsf3>:
    1d58:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__mulsf3x>
    1d5c:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <__fp_round>
    1d60:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__fp_pscA>
    1d64:	38 f0       	brcs	.+14     	; 0x1d74 <__mulsf3+0x1c>
    1d66:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__fp_pscB>
    1d6a:	20 f0       	brcs	.+8      	; 0x1d74 <__mulsf3+0x1c>
    1d6c:	95 23       	and	r25, r21
    1d6e:	11 f0       	breq	.+4      	; 0x1d74 <__mulsf3+0x1c>
    1d70:	0c 94 56 0e 	jmp	0x1cac	; 0x1cac <__fp_inf>
    1d74:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <__fp_nan>
    1d78:	11 24       	eor	r1, r1
    1d7a:	0c 94 a1 0e 	jmp	0x1d42	; 0x1d42 <__fp_szero>

00001d7e <__mulsf3x>:
    1d7e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__fp_split3>
    1d82:	70 f3       	brcs	.-36     	; 0x1d60 <__mulsf3+0x8>

00001d84 <__mulsf3_pse>:
    1d84:	95 9f       	mul	r25, r21
    1d86:	c1 f3       	breq	.-16     	; 0x1d78 <__mulsf3+0x20>
    1d88:	95 0f       	add	r25, r21
    1d8a:	50 e0       	ldi	r21, 0x00	; 0
    1d8c:	55 1f       	adc	r21, r21
    1d8e:	62 9f       	mul	r22, r18
    1d90:	f0 01       	movw	r30, r0
    1d92:	72 9f       	mul	r23, r18
    1d94:	bb 27       	eor	r27, r27
    1d96:	f0 0d       	add	r31, r0
    1d98:	b1 1d       	adc	r27, r1
    1d9a:	63 9f       	mul	r22, r19
    1d9c:	aa 27       	eor	r26, r26
    1d9e:	f0 0d       	add	r31, r0
    1da0:	b1 1d       	adc	r27, r1
    1da2:	aa 1f       	adc	r26, r26
    1da4:	64 9f       	mul	r22, r20
    1da6:	66 27       	eor	r22, r22
    1da8:	b0 0d       	add	r27, r0
    1daa:	a1 1d       	adc	r26, r1
    1dac:	66 1f       	adc	r22, r22
    1dae:	82 9f       	mul	r24, r18
    1db0:	22 27       	eor	r18, r18
    1db2:	b0 0d       	add	r27, r0
    1db4:	a1 1d       	adc	r26, r1
    1db6:	62 1f       	adc	r22, r18
    1db8:	73 9f       	mul	r23, r19
    1dba:	b0 0d       	add	r27, r0
    1dbc:	a1 1d       	adc	r26, r1
    1dbe:	62 1f       	adc	r22, r18
    1dc0:	83 9f       	mul	r24, r19
    1dc2:	a0 0d       	add	r26, r0
    1dc4:	61 1d       	adc	r22, r1
    1dc6:	22 1f       	adc	r18, r18
    1dc8:	74 9f       	mul	r23, r20
    1dca:	33 27       	eor	r19, r19
    1dcc:	a0 0d       	add	r26, r0
    1dce:	61 1d       	adc	r22, r1
    1dd0:	23 1f       	adc	r18, r19
    1dd2:	84 9f       	mul	r24, r20
    1dd4:	60 0d       	add	r22, r0
    1dd6:	21 1d       	adc	r18, r1
    1dd8:	82 2f       	mov	r24, r18
    1dda:	76 2f       	mov	r23, r22
    1ddc:	6a 2f       	mov	r22, r26
    1dde:	11 24       	eor	r1, r1
    1de0:	9f 57       	subi	r25, 0x7F	; 127
    1de2:	50 40       	sbci	r21, 0x00	; 0
    1de4:	9a f0       	brmi	.+38     	; 0x1e0c <__mulsf3_pse+0x88>
    1de6:	f1 f0       	breq	.+60     	; 0x1e24 <__mulsf3_pse+0xa0>
    1de8:	88 23       	and	r24, r24
    1dea:	4a f0       	brmi	.+18     	; 0x1dfe <__mulsf3_pse+0x7a>
    1dec:	ee 0f       	add	r30, r30
    1dee:	ff 1f       	adc	r31, r31
    1df0:	bb 1f       	adc	r27, r27
    1df2:	66 1f       	adc	r22, r22
    1df4:	77 1f       	adc	r23, r23
    1df6:	88 1f       	adc	r24, r24
    1df8:	91 50       	subi	r25, 0x01	; 1
    1dfa:	50 40       	sbci	r21, 0x00	; 0
    1dfc:	a9 f7       	brne	.-22     	; 0x1de8 <__mulsf3_pse+0x64>
    1dfe:	9e 3f       	cpi	r25, 0xFE	; 254
    1e00:	51 05       	cpc	r21, r1
    1e02:	80 f0       	brcs	.+32     	; 0x1e24 <__mulsf3_pse+0xa0>
    1e04:	0c 94 56 0e 	jmp	0x1cac	; 0x1cac <__fp_inf>
    1e08:	0c 94 a1 0e 	jmp	0x1d42	; 0x1d42 <__fp_szero>
    1e0c:	5f 3f       	cpi	r21, 0xFF	; 255
    1e0e:	e4 f3       	brlt	.-8      	; 0x1e08 <__mulsf3_pse+0x84>
    1e10:	98 3e       	cpi	r25, 0xE8	; 232
    1e12:	d4 f3       	brlt	.-12     	; 0x1e08 <__mulsf3_pse+0x84>
    1e14:	86 95       	lsr	r24
    1e16:	77 95       	ror	r23
    1e18:	67 95       	ror	r22
    1e1a:	b7 95       	ror	r27
    1e1c:	f7 95       	ror	r31
    1e1e:	e7 95       	ror	r30
    1e20:	9f 5f       	subi	r25, 0xFF	; 255
    1e22:	c1 f7       	brne	.-16     	; 0x1e14 <__mulsf3_pse+0x90>
    1e24:	fe 2b       	or	r31, r30
    1e26:	88 0f       	add	r24, r24
    1e28:	91 1d       	adc	r25, r1
    1e2a:	96 95       	lsr	r25
    1e2c:	87 95       	ror	r24
    1e2e:	97 f9       	bld	r25, 7
    1e30:	08 95       	ret

00001e32 <__udivmodqi4>:
    1e32:	99 1b       	sub	r25, r25
    1e34:	79 e0       	ldi	r23, 0x09	; 9
    1e36:	04 c0       	rjmp	.+8      	; 0x1e40 <__udivmodqi4_ep>

00001e38 <__udivmodqi4_loop>:
    1e38:	99 1f       	adc	r25, r25
    1e3a:	96 17       	cp	r25, r22
    1e3c:	08 f0       	brcs	.+2      	; 0x1e40 <__udivmodqi4_ep>
    1e3e:	96 1b       	sub	r25, r22

00001e40 <__udivmodqi4_ep>:
    1e40:	88 1f       	adc	r24, r24
    1e42:	7a 95       	dec	r23
    1e44:	c9 f7       	brne	.-14     	; 0x1e38 <__udivmodqi4_loop>
    1e46:	80 95       	com	r24
    1e48:	08 95       	ret

00001e4a <__umulhisi3>:
    1e4a:	a2 9f       	mul	r26, r18
    1e4c:	b0 01       	movw	r22, r0
    1e4e:	b3 9f       	mul	r27, r19
    1e50:	c0 01       	movw	r24, r0
    1e52:	a3 9f       	mul	r26, r19
    1e54:	70 0d       	add	r23, r0
    1e56:	81 1d       	adc	r24, r1
    1e58:	11 24       	eor	r1, r1
    1e5a:	91 1d       	adc	r25, r1
    1e5c:	b2 9f       	mul	r27, r18
    1e5e:	70 0d       	add	r23, r0
    1e60:	81 1d       	adc	r24, r1
    1e62:	11 24       	eor	r1, r1
    1e64:	91 1d       	adc	r25, r1
    1e66:	08 95       	ret

00001e68 <_exit>:
    1e68:	f8 94       	cli

00001e6a <__stop_program>:
    1e6a:	ff cf       	rjmp	.-2      	; 0x1e6a <__stop_program>
