
Projeto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ec  00800100  00001aec  00001b80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001aec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000207  008001ec  008001ec  00001c6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00001cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001006  00000000  00000000  00001da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d3  00000000  00000000  00002daa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ce2  00000000  00000000  0000367d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000036c  00000000  00000000  00004360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000577  00000000  00000000  000046cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000076a  00000000  00000000  00004c43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000053ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
       4:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__vector_1>
       8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
       c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      14:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      38:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      48:	0c 94 29 04 	jmp	0x852	; 0x852 <__vector_18>
      4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      54:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_21>
      58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <CHARSET>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	d8 e0       	ldi	r29, 0x08	; 8
     250:	de bf       	out	0x3e, r29	; 62
     252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
     254:	11 e0       	ldi	r17, 0x01	; 1
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	ec ee       	ldi	r30, 0xEC	; 236
     25c:	fa e1       	ldi	r31, 0x1A	; 26
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
     260:	05 90       	lpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	ac 3e       	cpi	r26, 0xEC	; 236
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
     26a:	23 e0       	ldi	r18, 0x03	; 3
     26c:	ac ee       	ldi	r26, 0xEC	; 236
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	a3 3f       	cpi	r26, 0xF3	; 243
     276:	b2 07       	cpc	r27, r18
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
     27a:	0e 94 a1 01 	call	0x342	; 0x342 <main>
     27e:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <_exit>

00000282 <__bad_interrupt>:
     282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <__vector_21>:
}
unsigned char USART_Receive(void)
{
	while(!(UCSR0A = 0b00100000));//espera o dado ser recebido
	return UDR0;// lê o dado e retorna 
}
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     28e:	0f 92       	push	r0
     290:	11 24       	eor	r1, r1
     292:	8f 93       	push	r24
     294:	9f 93       	push	r25
     296:	ef 93       	push	r30
     298:	ff 93       	push	r31
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
     2a2:	88 e7       	ldi	r24, 0x78	; 120
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	fc 01       	movw	r30, r24
     2a8:	80 81       	ld	r24, Z
     2aa:	91 81       	ldd	r25, Z+1	; 0x01
     2ac:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <__data_end+0x1>
     2b0:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
     2b4:	00 00       	nop
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	ff 91       	pop	r31
     2bc:	ef 91       	pop	r30
     2be:	9f 91       	pop	r25
     2c0:	8f 91       	pop	r24
     2c2:	0f 90       	pop	r0
     2c4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     2c8:	0f 90       	pop	r0
     2ca:	1f 90       	pop	r1
     2cc:	18 95       	reti

000002ce <USART_Init>:
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <USART_Init+0x6>
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
     2d8:	9a 83       	std	Y+2, r25	; 0x02
     2da:	89 83       	std	Y+1, r24	; 0x01
     2dc:	85 ec       	ldi	r24, 0xC5	; 197
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	29 81       	ldd	r18, Y+1	; 0x01
     2e2:	3a 81       	ldd	r19, Y+2	; 0x02
     2e4:	23 2f       	mov	r18, r19
     2e6:	33 27       	eor	r19, r19
     2e8:	fc 01       	movw	r30, r24
     2ea:	20 83       	st	Z, r18
     2ec:	84 ec       	ldi	r24, 0xC4	; 196
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	29 81       	ldd	r18, Y+1	; 0x01
     2f2:	fc 01       	movw	r30, r24
     2f4:	20 83       	st	Z, r18
     2f6:	81 ec       	ldi	r24, 0xC1	; 193
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	28 e9       	ldi	r18, 0x98	; 152
     2fc:	fc 01       	movw	r30, r24
     2fe:	20 83       	st	Z, r18
     300:	82 ec       	ldi	r24, 0xC2	; 194
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	2e e0       	ldi	r18, 0x0E	; 14
     306:	fc 01       	movw	r30, r24
     308:	20 83       	st	Z, r18
     30a:	00 00       	nop
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <USART_transmit>:
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	1f 92       	push	r1
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62
     320:	89 83       	std	Y+1, r24	; 0x01
     322:	00 00       	nop
     324:	80 ec       	ldi	r24, 0xC0	; 192
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	20 e2       	ldi	r18, 0x20	; 32
     32a:	fc 01       	movw	r30, r24
     32c:	20 83       	st	Z, r18
     32e:	86 ec       	ldi	r24, 0xC6	; 198
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	29 81       	ldd	r18, Y+1	; 0x01
     334:	fc 01       	movw	r30, r24
     336:	20 83       	st	Z, r18
     338:	00 00       	nop
     33a:	0f 90       	pop	r0
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	08 95       	ret

00000342 <main>:
int i = 0;
int test = 1;


int main(void)
{
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
     34a:	2e 97       	sbiw	r28, 0x0e	; 14
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	f8 94       	cli
     350:	de bf       	out	0x3e, r29	; 62
     352:	0f be       	out	0x3f, r0	; 63
     354:	cd bf       	out	0x3d, r28	; 61
	
	//Portas GPIO
	DDRD = 0b01000000; // todos os pinos da porta D como entrada, somente o 6 como saida
     356:	8a e2       	ldi	r24, 0x2A	; 42
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	20 e4       	ldi	r18, 0x40	; 64
     35c:	fc 01       	movw	r30, r24
     35e:	20 83       	st	Z, r18
	DDRC = 0b00100001; // como modo de saida 
     360:	87 e2       	ldi	r24, 0x27	; 39
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	21 e2       	ldi	r18, 0x21	; 33
     366:	fc 01       	movw	r30, r24
     368:	20 83       	st	Z, r18
	PORTD= 0b00000100;
     36a:	8b e2       	ldi	r24, 0x2B	; 43
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	24 e0       	ldi	r18, 0x04	; 4
     370:	fc 01       	movw	r30, r24
     372:	20 83       	st	Z, r18
	PORTC = 0x00; // so C0 em baixo nivel
     374:	88 e2       	ldi	r24, 0x28	; 40
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	fc 01       	movw	r30, r24
     37a:	10 82       	st	Z, r1
	
	//configuração das interrupções
	EICRA = 0b00000010;	// configurando como borda de descida
     37c:	89 e6       	ldi	r24, 0x69	; 105
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	22 e0       	ldi	r18, 0x02	; 2
     382:	fc 01       	movw	r30, r24
     384:	20 83       	st	Z, r18
	EIMSK = 0b00000001; //habilita a interrupção extrena INT0 
     386:	8d e3       	ldi	r24, 0x3D	; 61
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	fc 01       	movw	r30, r24
     38e:	20 83       	st	Z, r18
	sei(); //habilita a chave de interrupção global
     390:	78 94       	sei
	
	//modo PWM
	TCCR0A = 0b10100011; // habilita o Modo PWM rapido e modo nao invertido  nos pinos OC0A e OC0B
     392:	84 e4       	ldi	r24, 0x44	; 68
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	23 ea       	ldi	r18, 0xA3	; 163
     398:	fc 01       	movw	r30, r24
     39a:	20 83       	st	Z, r18
	TCCR0B = 0b00000101;	//liga TC0, prescaler = 1024, fpwm =  16MHZ/(256*1024) = 61Hz
     39c:	85 e4       	ldi	r24, 0x45	; 69
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	25 e0       	ldi	r18, 0x05	; 5
     3a2:	fc 01       	movw	r30, r24
     3a4:	20 83       	st	Z, r18
	OCR0A = 0; // controle do ciclo ativo do PWM OC0A(PD6)Duty = 200/256 = 78%
     3a6:	87 e4       	ldi	r24, 0x47	; 71
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	fc 01       	movw	r30, r24
     3ac:	10 82       	st	Z, r1
	
	//configurando o ADC
	ADMUX = 0b11000000; // tensao interna de ref(1.1v)
     3ae:	8c e7       	ldi	r24, 0x7C	; 124
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	20 ec       	ldi	r18, 0xC0	; 192
     3b4:	fc 01       	movw	r30, r24
     3b6:	20 83       	st	Z, r18
	ADCSRA = 0b11101111;//habilita o AD, interrupção, conversao, prescaler 128
     3b8:	8a e7       	ldi	r24, 0x7A	; 122
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	2f ee       	ldi	r18, 0xEF	; 239
     3be:	fc 01       	movw	r30, r24
     3c0:	20 83       	st	Z, r18
	ADCSRB = 0x00;// conversão continua
     3c2:	8b e7       	ldi	r24, 0x7B	; 123
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	fc 01       	movw	r30, r24
     3c8:	10 82       	st	Z, r1
	DIDR0 = 0b00111110;// habilita o PC0 como entrada do ADC0
     3ca:	8e e7       	ldi	r24, 0x7E	; 126
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	2e e3       	ldi	r18, 0x3E	; 62
     3d0:	fc 01       	movw	r30, r24
     3d2:	20 83       	st	Z, r18
	
	sei();
     3d4:	78 94       	sei
	// USART
	USART_Init(MYUBRR);
     3d6:	87 e6       	ldi	r24, 0x67	; 103
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 67 01 	call	0x2ce	; 0x2ce <USART_Init>
   
    while (1) 
    {
		
		if (test == 1)
     3de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3e6:	01 97       	sbiw	r24, 0x01	; 1
     3e8:	71 f5       	brne	.+92     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
		{

			nokia_lcd_init();
     3ea:	0e 94 84 08 	call	0x1108	; 0x1108 <nokia_lcd_init>
			nokia_lcd_clear();
     3ee:	0e 94 04 0a 	call	0x1408	; 0x1408 <nokia_lcd_clear>
			nokia_lcd_write_string("",1);
     3f2:	61 e0       	ldi	r22, 0x01	; 1
     3f4:	82 e0       	ldi	r24, 0x02	; 2
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	0e 94 37 0b 	call	0x166e	; 0x166e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 10);
     3fc:	6a e0       	ldi	r22, 0x0A	; 10
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("*------------*", 1);
     404:	61 e0       	ldi	r22, 0x01	; 1
     406:	83 e0       	ldi	r24, 0x03	; 3
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	0e 94 37 0b 	call	0x166e	; 0x166e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 20);
     40e:	64 e1       	ldi	r22, 0x14	; 20
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("-L. Escritorio", 1);
     416:	61 e0       	ldi	r22, 0x01	; 1
     418:	82 e1       	ldi	r24, 0x12	; 18
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	0e 94 37 0b 	call	0x166e	; 0x166e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 30);
     420:	6e e1       	ldi	r22, 0x1E	; 30
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("-Sala de maquinas", 1);
     428:	61 e0       	ldi	r22, 0x01	; 1
     42a:	81 e2       	ldi	r24, 0x21	; 33
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 37 0b 	call	0x166e	; 0x166e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0,40);
     432:	68 e2       	ldi	r22, 0x28	; 40
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <nokia_lcd_set_cursor>
			nokia_lcd_render();
     43a:	0e 94 6d 0b 	call	0x16da	; 0x16da <nokia_lcd_render>
			test = 0;
     43e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     442:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		//Calculo do sensor LM35 Vout = 0.01 * T ;
		
		Celsius = (leitura_ADC/1023.0)*100;
     446:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
     44a:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <__data_end+0x1>
     44e:	cc 01       	movw	r24, r24
     450:	a0 e0       	ldi	r26, 0x00	; 0
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	bc 01       	movw	r22, r24
     456:	cd 01       	movw	r24, r26
     458:	0e 94 35 0c 	call	0x186a	; 0x186a <__floatunsisf>
     45c:	dc 01       	movw	r26, r24
     45e:	cb 01       	movw	r24, r22
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 ec       	ldi	r19, 0xC0	; 192
     464:	4f e7       	ldi	r20, 0x7F	; 127
     466:	54 e4       	ldi	r21, 0x44	; 68
     468:	bc 01       	movw	r22, r24
     46a:	cd 01       	movw	r24, r26
     46c:	0e 94 94 0b 	call	0x1728	; 0x1728 <__divsf3>
     470:	dc 01       	movw	r26, r24
     472:	cb 01       	movw	r24, r22
     474:	20 e0       	ldi	r18, 0x00	; 0
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	48 ec       	ldi	r20, 0xC8	; 200
     47a:	52 e4       	ldi	r21, 0x42	; 66
     47c:	bc 01       	movw	r22, r24
     47e:	cd 01       	movw	r24, r26
     480:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__mulsf3>
     484:	dc 01       	movw	r26, r24
     486:	cb 01       	movw	r24, r22
     488:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <Celsius>
     48c:	90 93 f0 03 	sts	0x03F0, r25	; 0x8003f0 <Celsius+0x1>
     490:	a0 93 f1 03 	sts	0x03F1, r26	; 0x8003f1 <Celsius+0x2>
     494:	b0 93 f2 03 	sts	0x03F2, r27	; 0x8003f2 <Celsius+0x3>

		nokia_lcd_clear();
     498:	0e 94 04 0a 	call	0x1408	; 0x1408 <nokia_lcd_clear>
		int_to_str(Celsius, leitura_ADC_string);
     49c:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <Celsius>
     4a0:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <Celsius+0x1>
     4a4:	a0 91 f1 03 	lds	r26, 0x03F1	; 0x8003f1 <Celsius+0x2>
     4a8:	b0 91 f2 03 	lds	r27, 0x03F2	; 0x8003f2 <Celsius+0x3>
     4ac:	bc 01       	movw	r22, r24
     4ae:	cd 01       	movw	r24, r26
     4b0:	0e 94 06 0c 	call	0x180c	; 0x180c <__fixunssfsi>
     4b4:	dc 01       	movw	r26, r24
     4b6:	cb 01       	movw	r24, r22
     4b8:	6a ee       	ldi	r22, 0xEA	; 234
     4ba:	73 e0       	ldi	r23, 0x03	; 3
     4bc:	0e 94 1a 03 	call	0x634	; 0x634 <int_to_str>
		nokia_lcd_write_string("Monitoramento ",1);
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	83 e3       	ldi	r24, 0x33	; 51
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	0e 94 37 0b 	call	0x166e	; 0x166e <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 10);
     4ca:	6a e0       	ldi	r22, 0x0A	; 10
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("*------------*", 1);
     4d2:	61 e0       	ldi	r22, 0x01	; 1
     4d4:	83 e0       	ldi	r24, 0x03	; 3
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	0e 94 37 0b 	call	0x166e	; 0x166e <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 20);
     4dc:	64 e1       	ldi	r22, 0x14	; 20
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Temperatura: ",1);
     4e4:	61 e0       	ldi	r22, 0x01	; 1
     4e6:	82 e4       	ldi	r24, 0x42	; 66
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	0e 94 37 0b 	call	0x166e	; 0x166e <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 30);
     4ee:	6e e1       	ldi	r22, 0x1E	; 30
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <nokia_lcd_set_cursor>
		nokia_lcd_write_string(leitura_ADC_string, 1);
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	8a ee       	ldi	r24, 0xEA	; 234
     4fa:	93 e0       	ldi	r25, 0x03	; 3
     4fc:	0e 94 37 0b 	call	0x166e	; 0x166e <nokia_lcd_write_string>
		nokia_lcd_write_string(" Celsius ",1);
     500:	61 e0       	ldi	r22, 0x01	; 1
     502:	80 e5       	ldi	r24, 0x50	; 80
     504:	91 e0       	ldi	r25, 0x01	; 1
     506:	0e 94 37 0b 	call	0x166e	; 0x166e <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
     50a:	68 e2       	ldi	r22, 0x28	; 40
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <nokia_lcd_set_cursor>
		nokia_lcd_render();
     512:	0e 94 6d 0b 	call	0x16da	; 0x16da <nokia_lcd_render>
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	aa e7       	ldi	r26, 0x7A	; 122
     51c:	b4 e4       	ldi	r27, 0x44	; 68
     51e:	89 83       	std	Y+1, r24	; 0x01
     520:	9a 83       	std	Y+2, r25	; 0x02
     522:	ab 83       	std	Y+3, r26	; 0x03
     524:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	4a e7       	ldi	r20, 0x7A	; 122
     52c:	55 e4       	ldi	r21, 0x45	; 69
     52e:	69 81       	ldd	r22, Y+1	; 0x01
     530:	7a 81       	ldd	r23, Y+2	; 0x02
     532:	8b 81       	ldd	r24, Y+3	; 0x03
     534:	9c 81       	ldd	r25, Y+4	; 0x04
     536:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__mulsf3>
     53a:	dc 01       	movw	r26, r24
     53c:	cb 01       	movw	r24, r22
     53e:	8d 83       	std	Y+5, r24	; 0x05
     540:	9e 83       	std	Y+6, r25	; 0x06
     542:	af 83       	std	Y+7, r26	; 0x07
     544:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	40 e8       	ldi	r20, 0x80	; 128
     54c:	5f e3       	ldi	r21, 0x3F	; 63
     54e:	6d 81       	ldd	r22, Y+5	; 0x05
     550:	7e 81       	ldd	r23, Y+6	; 0x06
     552:	8f 81       	ldd	r24, Y+7	; 0x07
     554:	98 85       	ldd	r25, Y+8	; 0x08
     556:	0e 94 8f 0b 	call	0x171e	; 0x171e <__cmpsf2>
     55a:	88 23       	and	r24, r24
     55c:	2c f4       	brge	.+10     	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
		__ticks = 1;
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	9a 87       	std	Y+10, r25	; 0x0a
     564:	89 87       	std	Y+9, r24	; 0x09
     566:	3f c0       	rjmp	.+126    	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
	else if (__tmp > 65535)
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	3f ef       	ldi	r19, 0xFF	; 255
     56c:	4f e7       	ldi	r20, 0x7F	; 127
     56e:	57 e4       	ldi	r21, 0x47	; 71
     570:	6d 81       	ldd	r22, Y+5	; 0x05
     572:	7e 81       	ldd	r23, Y+6	; 0x06
     574:	8f 81       	ldd	r24, Y+7	; 0x07
     576:	98 85       	ldd	r25, Y+8	; 0x08
     578:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__gesf2>
     57c:	18 16       	cp	r1, r24
     57e:	4c f5       	brge	.+82     	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	40 e2       	ldi	r20, 0x20	; 32
     586:	51 e4       	ldi	r21, 0x41	; 65
     588:	69 81       	ldd	r22, Y+1	; 0x01
     58a:	7a 81       	ldd	r23, Y+2	; 0x02
     58c:	8b 81       	ldd	r24, Y+3	; 0x03
     58e:	9c 81       	ldd	r25, Y+4	; 0x04
     590:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__mulsf3>
     594:	dc 01       	movw	r26, r24
     596:	cb 01       	movw	r24, r22
     598:	bc 01       	movw	r22, r24
     59a:	cd 01       	movw	r24, r26
     59c:	0e 94 06 0c 	call	0x180c	; 0x180c <__fixunssfsi>
     5a0:	dc 01       	movw	r26, r24
     5a2:	cb 01       	movw	r24, r22
     5a4:	9a 87       	std	Y+10, r25	; 0x0a
     5a6:	89 87       	std	Y+9, r24	; 0x09
     5a8:	0f c0       	rjmp	.+30     	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
     5aa:	80 e9       	ldi	r24, 0x90	; 144
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	9c 87       	std	Y+12, r25	; 0x0c
     5b0:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5b2:	8b 85       	ldd	r24, Y+11	; 0x0b
     5b4:	9c 85       	ldd	r25, Y+12	; 0x0c
     5b6:	01 97       	sbiw	r24, 0x01	; 1
     5b8:	f1 f7       	brne	.-4      	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
     5ba:	9c 87       	std	Y+12, r25	; 0x0c
     5bc:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5be:	89 85       	ldd	r24, Y+9	; 0x09
     5c0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5c2:	01 97       	sbiw	r24, 0x01	; 1
     5c4:	9a 87       	std	Y+10, r25	; 0x0a
     5c6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5c8:	89 85       	ldd	r24, Y+9	; 0x09
     5ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     5cc:	89 2b       	or	r24, r25
     5ce:	69 f7       	brne	.-38     	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
     5d0:	14 c0       	rjmp	.+40     	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5d2:	6d 81       	ldd	r22, Y+5	; 0x05
     5d4:	7e 81       	ldd	r23, Y+6	; 0x06
     5d6:	8f 81       	ldd	r24, Y+7	; 0x07
     5d8:	98 85       	ldd	r25, Y+8	; 0x08
     5da:	0e 94 06 0c 	call	0x180c	; 0x180c <__fixunssfsi>
     5de:	dc 01       	movw	r26, r24
     5e0:	cb 01       	movw	r24, r22
     5e2:	9a 87       	std	Y+10, r25	; 0x0a
     5e4:	89 87       	std	Y+9, r24	; 0x09
     5e6:	89 85       	ldd	r24, Y+9	; 0x09
     5e8:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ea:	9e 87       	std	Y+14, r25	; 0x0e
     5ec:	8d 87       	std	Y+13, r24	; 0x0d
     5ee:	8d 85       	ldd	r24, Y+13	; 0x0d
     5f0:	9e 85       	ldd	r25, Y+14	; 0x0e
     5f2:	01 97       	sbiw	r24, 0x01	; 1
     5f4:	f1 f7       	brne	.-4      	; 0x5f2 <__EEPROM_REGION_LENGTH__+0x1f2>
     5f6:	9e 87       	std	Y+14, r25	; 0x0e
     5f8:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(1000);
		
		if (Celsius <=70)
     5fa:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <Celsius>
     5fe:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <Celsius+0x1>
     602:	a0 91 f1 03 	lds	r26, 0x03F1	; 0x8003f1 <Celsius+0x2>
     606:	b0 91 f2 03 	lds	r27, 0x03F2	; 0x8003f2 <Celsius+0x3>
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	4c e8       	ldi	r20, 0x8C	; 140
     610:	52 e4       	ldi	r21, 0x42	; 66
     612:	bc 01       	movw	r22, r24
     614:	cd 01       	movw	r24, r26
     616:	0e 94 8f 0b 	call	0x171e	; 0x171e <__cmpsf2>
     61a:	18 16       	cp	r1, r24
     61c:	2c f0       	brlt	.+10     	; 0x628 <__EEPROM_REGION_LENGTH__+0x228>
		{
			PORTC = 0b00000000;
     61e:	88 e2       	ldi	r24, 0x28	; 40
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	fc 01       	movw	r30, r24
     624:	10 82       	st	Z, r1
     626:	db ce       	rjmp	.-586    	; 0x3de <main+0x9c>
			
		}
		else
		{
			PORTC = 0b00100000;
     628:	88 e2       	ldi	r24, 0x28	; 40
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	20 e2       	ldi	r18, 0x20	; 32
     62e:	fc 01       	movw	r30, r24
     630:	20 83       	st	Z, r18
		}	
		
    }
     632:	d5 ce       	rjmp	.-598    	; 0x3de <main+0x9c>

00000634 <int_to_str>:
}

//Função para o display
void int_to_str(uint16_t s, unsigned char *d)
{
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	00 d0       	rcall	.+0      	; 0x63a <int_to_str+0x6>
     63a:	00 d0       	rcall	.+0      	; 0x63c <int_to_str+0x8>
     63c:	00 d0       	rcall	.+0      	; 0x63e <int_to_str+0xa>
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
     642:	9c 83       	std	Y+4, r25	; 0x04
     644:	8b 83       	std	Y+3, r24	; 0x03
     646:	7e 83       	std	Y+6, r23	; 0x06
     648:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t n = tam_vetor - 2;
     64a:	83 e0       	ldi	r24, 0x03	; 3
     64c:	8a 83       	std	Y+2, r24	; 0x02

	for (int8_t i = n; i >= 0; i--)
     64e:	8a 81       	ldd	r24, Y+2	; 0x02
     650:	89 83       	std	Y+1, r24	; 0x01
     652:	37 c0       	rjmp	.+110    	; 0x6c2 <int_to_str+0x8e>
	{
		d[i]=s%10+48;
     654:	89 81       	ldd	r24, Y+1	; 0x01
     656:	08 2e       	mov	r0, r24
     658:	00 0c       	add	r0, r0
     65a:	99 0b       	sbc	r25, r25
     65c:	2d 81       	ldd	r18, Y+5	; 0x05
     65e:	3e 81       	ldd	r19, Y+6	; 0x06
     660:	f9 01       	movw	r30, r18
     662:	e8 0f       	add	r30, r24
     664:	f9 1f       	adc	r31, r25
     666:	4b 81       	ldd	r20, Y+3	; 0x03
     668:	5c 81       	ldd	r21, Y+4	; 0x04
     66a:	9a 01       	movw	r18, r20
     66c:	ad ec       	ldi	r26, 0xCD	; 205
     66e:	bc ec       	ldi	r27, 0xCC	; 204
     670:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__umulhisi3>
     674:	96 95       	lsr	r25
     676:	87 95       	ror	r24
     678:	96 95       	lsr	r25
     67a:	87 95       	ror	r24
     67c:	96 95       	lsr	r25
     67e:	87 95       	ror	r24
     680:	88 0f       	add	r24, r24
     682:	99 1f       	adc	r25, r25
     684:	9c 01       	movw	r18, r24
     686:	22 0f       	add	r18, r18
     688:	33 1f       	adc	r19, r19
     68a:	22 0f       	add	r18, r18
     68c:	33 1f       	adc	r19, r19
     68e:	82 0f       	add	r24, r18
     690:	93 1f       	adc	r25, r19
     692:	9a 01       	movw	r18, r20
     694:	28 1b       	sub	r18, r24
     696:	39 0b       	sbc	r19, r25
     698:	c9 01       	movw	r24, r18
     69a:	80 5d       	subi	r24, 0xD0	; 208
     69c:	80 83       	st	Z, r24
		s/=10;
     69e:	8b 81       	ldd	r24, Y+3	; 0x03
     6a0:	9c 81       	ldd	r25, Y+4	; 0x04
     6a2:	9c 01       	movw	r18, r24
     6a4:	ad ec       	ldi	r26, 0xCD	; 205
     6a6:	bc ec       	ldi	r27, 0xCC	; 204
     6a8:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__umulhisi3>
     6ac:	96 95       	lsr	r25
     6ae:	87 95       	ror	r24
     6b0:	96 95       	lsr	r25
     6b2:	87 95       	ror	r24
     6b4:	96 95       	lsr	r25
     6b6:	87 95       	ror	r24
     6b8:	9c 83       	std	Y+4, r25	; 0x04
     6ba:	8b 83       	std	Y+3, r24	; 0x03
//Função para o display
void int_to_str(uint16_t s, unsigned char *d)
{
	uint8_t n = tam_vetor - 2;

	for (int8_t i = n; i >= 0; i--)
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	81 50       	subi	r24, 0x01	; 1
     6c0:	89 83       	std	Y+1, r24	; 0x01
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	88 23       	and	r24, r24
     6c6:	34 f6       	brge	.-116    	; 0x654 <int_to_str+0x20>
	{
		d[i]=s%10+48;
		s/=10;
	}
}
     6c8:	00 00       	nop
     6ca:	26 96       	adiw	r28, 0x06	; 6
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	f8 94       	cli
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	cd bf       	out	0x3d, r28	; 61
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <__vector_1>:


ISR(INT0_vect) //Sensor de presença
{
     6dc:	1f 92       	push	r1
     6de:	0f 92       	push	r0
     6e0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     6e4:	0f 92       	push	r0
     6e6:	11 24       	eor	r1, r1
     6e8:	2f 93       	push	r18
     6ea:	3f 93       	push	r19
     6ec:	4f 93       	push	r20
     6ee:	5f 93       	push	r21
     6f0:	6f 93       	push	r22
     6f2:	7f 93       	push	r23
     6f4:	8f 93       	push	r24
     6f6:	9f 93       	push	r25
     6f8:	af 93       	push	r26
     6fa:	bf 93       	push	r27
     6fc:	ef 93       	push	r30
     6fe:	ff 93       	push	r31
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
     708:	2e 97       	sbiw	r28, 0x0e	; 14
     70a:	de bf       	out	0x3e, r29	; 62
     70c:	cd bf       	out	0x3d, r28	; 61
	
	nokia_lcd_init();
     70e:	0e 94 84 08 	call	0x1108	; 0x1108 <nokia_lcd_init>
	nokia_lcd_clear();
     712:	0e 94 04 0a 	call	0x1408	; 0x1408 <nokia_lcd_clear>
	nokia_lcd_write_string("Seja bem vindo",1);
     716:	61 e0       	ldi	r22, 0x01	; 1
     718:	8a e5       	ldi	r24, 0x5A	; 90
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	0e 94 37 0b 	call	0x166e	; 0x166e <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 20);
     720:	64 e1       	ldi	r22, 0x14	; 20
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <nokia_lcd_set_cursor>
	nokia_lcd_render();
     728:	0e 94 6d 0b 	call	0x16da	; 0x16da <nokia_lcd_render>
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	aa ef       	ldi	r26, 0xFA	; 250
     732:	b4 e4       	ldi	r27, 0x44	; 68
     734:	89 83       	std	Y+1, r24	; 0x01
     736:	9a 83       	std	Y+2, r25	; 0x02
     738:	ab 83       	std	Y+3, r26	; 0x03
     73a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	4a e7       	ldi	r20, 0x7A	; 122
     742:	55 e4       	ldi	r21, 0x45	; 69
     744:	69 81       	ldd	r22, Y+1	; 0x01
     746:	7a 81       	ldd	r23, Y+2	; 0x02
     748:	8b 81       	ldd	r24, Y+3	; 0x03
     74a:	9c 81       	ldd	r25, Y+4	; 0x04
     74c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__mulsf3>
     750:	dc 01       	movw	r26, r24
     752:	cb 01       	movw	r24, r22
     754:	8d 83       	std	Y+5, r24	; 0x05
     756:	9e 83       	std	Y+6, r25	; 0x06
     758:	af 83       	std	Y+7, r26	; 0x07
     75a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	40 e8       	ldi	r20, 0x80	; 128
     762:	5f e3       	ldi	r21, 0x3F	; 63
     764:	6d 81       	ldd	r22, Y+5	; 0x05
     766:	7e 81       	ldd	r23, Y+6	; 0x06
     768:	8f 81       	ldd	r24, Y+7	; 0x07
     76a:	98 85       	ldd	r25, Y+8	; 0x08
     76c:	0e 94 8f 0b 	call	0x171e	; 0x171e <__cmpsf2>
     770:	88 23       	and	r24, r24
     772:	2c f4       	brge	.+10     	; 0x77e <__vector_1+0xa2>
		__ticks = 1;
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	9a 87       	std	Y+10, r25	; 0x0a
     77a:	89 87       	std	Y+9, r24	; 0x09
     77c:	3f c0       	rjmp	.+126    	; 0x7fc <__vector_1+0x120>
	else if (__tmp > 65535)
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	3f ef       	ldi	r19, 0xFF	; 255
     782:	4f e7       	ldi	r20, 0x7F	; 127
     784:	57 e4       	ldi	r21, 0x47	; 71
     786:	6d 81       	ldd	r22, Y+5	; 0x05
     788:	7e 81       	ldd	r23, Y+6	; 0x06
     78a:	8f 81       	ldd	r24, Y+7	; 0x07
     78c:	98 85       	ldd	r25, Y+8	; 0x08
     78e:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__gesf2>
     792:	18 16       	cp	r1, r24
     794:	4c f5       	brge	.+82     	; 0x7e8 <__vector_1+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	40 e2       	ldi	r20, 0x20	; 32
     79c:	51 e4       	ldi	r21, 0x41	; 65
     79e:	69 81       	ldd	r22, Y+1	; 0x01
     7a0:	7a 81       	ldd	r23, Y+2	; 0x02
     7a2:	8b 81       	ldd	r24, Y+3	; 0x03
     7a4:	9c 81       	ldd	r25, Y+4	; 0x04
     7a6:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__mulsf3>
     7aa:	dc 01       	movw	r26, r24
     7ac:	cb 01       	movw	r24, r22
     7ae:	bc 01       	movw	r22, r24
     7b0:	cd 01       	movw	r24, r26
     7b2:	0e 94 06 0c 	call	0x180c	; 0x180c <__fixunssfsi>
     7b6:	dc 01       	movw	r26, r24
     7b8:	cb 01       	movw	r24, r22
     7ba:	9a 87       	std	Y+10, r25	; 0x0a
     7bc:	89 87       	std	Y+9, r24	; 0x09
     7be:	0f c0       	rjmp	.+30     	; 0x7de <__vector_1+0x102>
     7c0:	80 e9       	ldi	r24, 0x90	; 144
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	9c 87       	std	Y+12, r25	; 0x0c
     7c6:	8b 87       	std	Y+11, r24	; 0x0b
     7c8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7ca:	9c 85       	ldd	r25, Y+12	; 0x0c
     7cc:	01 97       	sbiw	r24, 0x01	; 1
     7ce:	f1 f7       	brne	.-4      	; 0x7cc <__vector_1+0xf0>
     7d0:	9c 87       	std	Y+12, r25	; 0x0c
     7d2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7d4:	89 85       	ldd	r24, Y+9	; 0x09
     7d6:	9a 85       	ldd	r25, Y+10	; 0x0a
     7d8:	01 97       	sbiw	r24, 0x01	; 1
     7da:	9a 87       	std	Y+10, r25	; 0x0a
     7dc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7de:	89 85       	ldd	r24, Y+9	; 0x09
     7e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     7e2:	89 2b       	or	r24, r25
     7e4:	69 f7       	brne	.-38     	; 0x7c0 <__vector_1+0xe4>
     7e6:	14 c0       	rjmp	.+40     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7e8:	6d 81       	ldd	r22, Y+5	; 0x05
     7ea:	7e 81       	ldd	r23, Y+6	; 0x06
     7ec:	8f 81       	ldd	r24, Y+7	; 0x07
     7ee:	98 85       	ldd	r25, Y+8	; 0x08
     7f0:	0e 94 06 0c 	call	0x180c	; 0x180c <__fixunssfsi>
     7f4:	dc 01       	movw	r26, r24
     7f6:	cb 01       	movw	r24, r22
     7f8:	9a 87       	std	Y+10, r25	; 0x0a
     7fa:	89 87       	std	Y+9, r24	; 0x09
     7fc:	89 85       	ldd	r24, Y+9	; 0x09
     7fe:	9a 85       	ldd	r25, Y+10	; 0x0a
     800:	9e 87       	std	Y+14, r25	; 0x0e
     802:	8d 87       	std	Y+13, r24	; 0x0d
     804:	8d 85       	ldd	r24, Y+13	; 0x0d
     806:	9e 85       	ldd	r25, Y+14	; 0x0e
     808:	01 97       	sbiw	r24, 0x01	; 1
     80a:	f1 f7       	brne	.-4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     80c:	9e 87       	std	Y+14, r25	; 0x0e
     80e:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(2000);
	test = 1;
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     818:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
     81c:	00 00       	nop
     81e:	2e 96       	adiw	r28, 0x0e	; 14
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	f8 94       	cli
     824:	de bf       	out	0x3e, r29	; 62
     826:	0f be       	out	0x3f, r0	; 63
     828:	cd bf       	out	0x3d, r28	; 61
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	ff 91       	pop	r31
     830:	ef 91       	pop	r30
     832:	bf 91       	pop	r27
     834:	af 91       	pop	r26
     836:	9f 91       	pop	r25
     838:	8f 91       	pop	r24
     83a:	7f 91       	pop	r23
     83c:	6f 91       	pop	r22
     83e:	5f 91       	pop	r21
     840:	4f 91       	pop	r20
     842:	3f 91       	pop	r19
     844:	2f 91       	pop	r18
     846:	0f 90       	pop	r0
     848:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     84c:	0f 90       	pop	r0
     84e:	1f 90       	pop	r1
     850:	18 95       	reti

00000852 <__vector_18>:

ISR(USART_RX_vect)
{
     852:	1f 92       	push	r1
     854:	0f 92       	push	r0
     856:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     85a:	0f 92       	push	r0
     85c:	11 24       	eor	r1, r1
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	2f 93       	push	r18
     864:	3f 93       	push	r19
     866:	4f 93       	push	r20
     868:	5f 93       	push	r21
     86a:	6f 93       	push	r22
     86c:	7f 93       	push	r23
     86e:	8f 93       	push	r24
     870:	9f 93       	push	r25
     872:	af 93       	push	r26
     874:	bf 93       	push	r27
     876:	ef 93       	push	r30
     878:	ff 93       	push	r31
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	c7 54       	subi	r28, 0x47	; 71
     884:	d1 09       	sbc	r29, r1
     886:	de bf       	out	0x3e, r29	; 62
     888:	cd bf       	out	0x3d, r28	; 61
		char recebido;
		recebido = UDR0;
     88a:	86 ec       	ldi	r24, 0xC6	; 198
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	fc 01       	movw	r30, r24
     890:	80 81       	ld	r24, Z
     892:	89 83       	std	Y+1, r24	; 0x01
		
		
		if(recebido == '0')
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	80 33       	cpi	r24, 0x30	; 48
     898:	09 f0       	breq	.+2      	; 0x89c <__vector_18+0x4a>
     89a:	a1 c0       	rjmp	.+322    	; 0x9de <__stack+0xdf>
		{
			 i = 0;
     89c:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <i+0x1>
     8a0:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <i>
			 OCR0A = i *60;
     8a4:	87 e4       	ldi	r24, 0x47	; 71
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	20 91 ee 01 	lds	r18, 0x01EE	; 0x8001ee <i>
     8ac:	30 91 ef 01 	lds	r19, 0x01EF	; 0x8001ef <i+0x1>
     8b0:	32 2f       	mov	r19, r18
     8b2:	2c e3       	ldi	r18, 0x3C	; 60
     8b4:	32 9f       	mul	r19, r18
     8b6:	20 2d       	mov	r18, r0
     8b8:	11 24       	eor	r1, r1
     8ba:	fc 01       	movw	r30, r24
     8bc:	20 83       	st	Z, r18
			 nokia_lcd_init();
     8be:	0e 94 84 08 	call	0x1108	; 0x1108 <nokia_lcd_init>
			 nokia_lcd_clear();
     8c2:	0e 94 04 0a 	call	0x1408	; 0x1408 <nokia_lcd_clear>
			 nokia_lcd_write_string("Lamp.Escritorio:desligada",1);
     8c6:	61 e0       	ldi	r22, 0x01	; 1
     8c8:	89 e6       	ldi	r24, 0x69	; 105
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	0e 94 37 0b 	call	0x166e	; 0x166e <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
     8d0:	6a e0       	ldi	r22, 0x0A	; 10
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <nokia_lcd_set_cursor>
			 nokia_lcd_write_string("Porcentagem:0%",1);
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	83 e8       	ldi	r24, 0x83	; 131
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	0e 94 37 0b 	call	0x166e	; 0x166e <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
     8e2:	6a e0       	ldi	r22, 0x0A	; 10
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <nokia_lcd_set_cursor>
			 nokia_lcd_render();
     8ea:	0e 94 6d 0b 	call	0x16da	; 0x16da <nokia_lcd_render>
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	aa ef       	ldi	r26, 0xFA	; 250
     8f4:	b4 e4       	ldi	r27, 0x44	; 68
     8f6:	8a 8b       	std	Y+18, r24	; 0x12
     8f8:	9b 8b       	std	Y+19, r25	; 0x13
     8fa:	ac 8b       	std	Y+20, r26	; 0x14
     8fc:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	4a e7       	ldi	r20, 0x7A	; 122
     904:	55 e4       	ldi	r21, 0x45	; 69
     906:	6a 89       	ldd	r22, Y+18	; 0x12
     908:	7b 89       	ldd	r23, Y+19	; 0x13
     90a:	8c 89       	ldd	r24, Y+20	; 0x14
     90c:	9d 89       	ldd	r25, Y+21	; 0x15
     90e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__mulsf3>
     912:	dc 01       	movw	r26, r24
     914:	cb 01       	movw	r24, r22
     916:	8e 8b       	std	Y+22, r24	; 0x16
     918:	9f 8b       	std	Y+23, r25	; 0x17
     91a:	a8 8f       	std	Y+24, r26	; 0x18
     91c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	40 e8       	ldi	r20, 0x80	; 128
     924:	5f e3       	ldi	r21, 0x3F	; 63
     926:	6e 89       	ldd	r22, Y+22	; 0x16
     928:	7f 89       	ldd	r23, Y+23	; 0x17
     92a:	88 8d       	ldd	r24, Y+24	; 0x18
     92c:	99 8d       	ldd	r25, Y+25	; 0x19
     92e:	0e 94 8f 0b 	call	0x171e	; 0x171e <__cmpsf2>
     932:	88 23       	and	r24, r24
     934:	2c f4       	brge	.+10     	; 0x940 <__stack+0x41>
		__ticks = 1;
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	9b 8f       	std	Y+27, r25	; 0x1b
     93c:	8a 8f       	std	Y+26, r24	; 0x1a
     93e:	3f c0       	rjmp	.+126    	; 0x9be <__stack+0xbf>
	else if (__tmp > 65535)
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	3f ef       	ldi	r19, 0xFF	; 255
     944:	4f e7       	ldi	r20, 0x7F	; 127
     946:	57 e4       	ldi	r21, 0x47	; 71
     948:	6e 89       	ldd	r22, Y+22	; 0x16
     94a:	7f 89       	ldd	r23, Y+23	; 0x17
     94c:	88 8d       	ldd	r24, Y+24	; 0x18
     94e:	99 8d       	ldd	r25, Y+25	; 0x19
     950:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__gesf2>
     954:	18 16       	cp	r1, r24
     956:	4c f5       	brge	.+82     	; 0x9aa <__stack+0xab>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	40 e2       	ldi	r20, 0x20	; 32
     95e:	51 e4       	ldi	r21, 0x41	; 65
     960:	6a 89       	ldd	r22, Y+18	; 0x12
     962:	7b 89       	ldd	r23, Y+19	; 0x13
     964:	8c 89       	ldd	r24, Y+20	; 0x14
     966:	9d 89       	ldd	r25, Y+21	; 0x15
     968:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__mulsf3>
     96c:	dc 01       	movw	r26, r24
     96e:	cb 01       	movw	r24, r22
     970:	bc 01       	movw	r22, r24
     972:	cd 01       	movw	r24, r26
     974:	0e 94 06 0c 	call	0x180c	; 0x180c <__fixunssfsi>
     978:	dc 01       	movw	r26, r24
     97a:	cb 01       	movw	r24, r22
     97c:	9b 8f       	std	Y+27, r25	; 0x1b
     97e:	8a 8f       	std	Y+26, r24	; 0x1a
     980:	0f c0       	rjmp	.+30     	; 0x9a0 <__stack+0xa1>
     982:	80 e9       	ldi	r24, 0x90	; 144
     984:	91 e0       	ldi	r25, 0x01	; 1
     986:	9d 8f       	std	Y+29, r25	; 0x1d
     988:	8c 8f       	std	Y+28, r24	; 0x1c
     98a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     98c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     98e:	01 97       	sbiw	r24, 0x01	; 1
     990:	f1 f7       	brne	.-4      	; 0x98e <__stack+0x8f>
     992:	9d 8f       	std	Y+29, r25	; 0x1d
     994:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     996:	8a 8d       	ldd	r24, Y+26	; 0x1a
     998:	9b 8d       	ldd	r25, Y+27	; 0x1b
     99a:	01 97       	sbiw	r24, 0x01	; 1
     99c:	9b 8f       	std	Y+27, r25	; 0x1b
     99e:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9a2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9a4:	89 2b       	or	r24, r25
     9a6:	69 f7       	brne	.-38     	; 0x982 <__stack+0x83>
     9a8:	14 c0       	rjmp	.+40     	; 0x9d2 <__stack+0xd3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9aa:	6e 89       	ldd	r22, Y+22	; 0x16
     9ac:	7f 89       	ldd	r23, Y+23	; 0x17
     9ae:	88 8d       	ldd	r24, Y+24	; 0x18
     9b0:	99 8d       	ldd	r25, Y+25	; 0x19
     9b2:	0e 94 06 0c 	call	0x180c	; 0x180c <__fixunssfsi>
     9b6:	dc 01       	movw	r26, r24
     9b8:	cb 01       	movw	r24, r22
     9ba:	9b 8f       	std	Y+27, r25	; 0x1b
     9bc:	8a 8f       	std	Y+26, r24	; 0x1a
     9be:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9c0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9c2:	9f 8f       	std	Y+31, r25	; 0x1f
     9c4:	8e 8f       	std	Y+30, r24	; 0x1e
     9c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9c8:	9f 8d       	ldd	r25, Y+31	; 0x1f
     9ca:	01 97       	sbiw	r24, 0x01	; 1
     9cc:	f1 f7       	brne	.-4      	; 0x9ca <__stack+0xcb>
     9ce:	9f 8f       	std	Y+31, r25	; 0x1f
     9d0:	8e 8f       	std	Y+30, r24	; 0x1e
			 _delay_ms(2000);
			 test=1;
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     9da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			
		}
		
		if(recebido == '1')
     9de:	89 81       	ldd	r24, Y+1	; 0x01
     9e0:	81 33       	cpi	r24, 0x31	; 49
     9e2:	09 f0       	breq	.+2      	; 0x9e6 <__stack+0xe7>
     9e4:	a3 c0       	rjmp	.+326    	; 0xb2c <__stack+0x22d>
		{
			 i = 1;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <i+0x1>
     9ee:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <i>
			 OCR0A = i *60;
     9f2:	87 e4       	ldi	r24, 0x47	; 71
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	20 91 ee 01 	lds	r18, 0x01EE	; 0x8001ee <i>
     9fa:	30 91 ef 01 	lds	r19, 0x01EF	; 0x8001ef <i+0x1>
     9fe:	32 2f       	mov	r19, r18
     a00:	2c e3       	ldi	r18, 0x3C	; 60
     a02:	32 9f       	mul	r19, r18
     a04:	20 2d       	mov	r18, r0
     a06:	11 24       	eor	r1, r1
     a08:	fc 01       	movw	r30, r24
     a0a:	20 83       	st	Z, r18
			 nokia_lcd_init();
     a0c:	0e 94 84 08 	call	0x1108	; 0x1108 <nokia_lcd_init>
			 nokia_lcd_clear();
     a10:	0e 94 04 0a 	call	0x1408	; 0x1408 <nokia_lcd_clear>
			 nokia_lcd_write_string("Lamp. Escritorio:ligada",1);
     a14:	61 e0       	ldi	r22, 0x01	; 1
     a16:	82 e9       	ldi	r24, 0x92	; 146
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	0e 94 37 0b 	call	0x166e	; 0x166e <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
     a1e:	6a e0       	ldi	r22, 0x0A	; 10
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <nokia_lcd_set_cursor>
			 nokia_lcd_write_string("Porcentagem:25%",1);
     a26:	61 e0       	ldi	r22, 0x01	; 1
     a28:	8a ea       	ldi	r24, 0xAA	; 170
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	0e 94 37 0b 	call	0x166e	; 0x166e <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
     a30:	6a e0       	ldi	r22, 0x0A	; 10
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <nokia_lcd_set_cursor>
			 nokia_lcd_render();
     a38:	0e 94 6d 0b 	call	0x16da	; 0x16da <nokia_lcd_render>
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	aa ef       	ldi	r26, 0xFA	; 250
     a42:	b4 e4       	ldi	r27, 0x44	; 68
     a44:	8a 83       	std	Y+2, r24	; 0x02
     a46:	9b 83       	std	Y+3, r25	; 0x03
     a48:	ac 83       	std	Y+4, r26	; 0x04
     a4a:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a4c:	20 e0       	ldi	r18, 0x00	; 0
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	4a e7       	ldi	r20, 0x7A	; 122
     a52:	55 e4       	ldi	r21, 0x45	; 69
     a54:	6a 81       	ldd	r22, Y+2	; 0x02
     a56:	7b 81       	ldd	r23, Y+3	; 0x03
     a58:	8c 81       	ldd	r24, Y+4	; 0x04
     a5a:	9d 81       	ldd	r25, Y+5	; 0x05
     a5c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__mulsf3>
     a60:	dc 01       	movw	r26, r24
     a62:	cb 01       	movw	r24, r22
     a64:	88 a3       	std	Y+32, r24	; 0x20
     a66:	99 a3       	std	Y+33, r25	; 0x21
     a68:	aa a3       	std	Y+34, r26	; 0x22
     a6a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	40 e8       	ldi	r20, 0x80	; 128
     a72:	5f e3       	ldi	r21, 0x3F	; 63
     a74:	68 a1       	ldd	r22, Y+32	; 0x20
     a76:	79 a1       	ldd	r23, Y+33	; 0x21
     a78:	8a a1       	ldd	r24, Y+34	; 0x22
     a7a:	9b a1       	ldd	r25, Y+35	; 0x23
     a7c:	0e 94 8f 0b 	call	0x171e	; 0x171e <__cmpsf2>
     a80:	88 23       	and	r24, r24
     a82:	2c f4       	brge	.+10     	; 0xa8e <__stack+0x18f>
		__ticks = 1;
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	9d a3       	std	Y+37, r25	; 0x25
     a8a:	8c a3       	std	Y+36, r24	; 0x24
     a8c:	3f c0       	rjmp	.+126    	; 0xb0c <__stack+0x20d>
	else if (__tmp > 65535)
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	3f ef       	ldi	r19, 0xFF	; 255
     a92:	4f e7       	ldi	r20, 0x7F	; 127
     a94:	57 e4       	ldi	r21, 0x47	; 71
     a96:	68 a1       	ldd	r22, Y+32	; 0x20
     a98:	79 a1       	ldd	r23, Y+33	; 0x21
     a9a:	8a a1       	ldd	r24, Y+34	; 0x22
     a9c:	9b a1       	ldd	r25, Y+35	; 0x23
     a9e:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__gesf2>
     aa2:	18 16       	cp	r1, r24
     aa4:	4c f5       	brge	.+82     	; 0xaf8 <__stack+0x1f9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	40 e2       	ldi	r20, 0x20	; 32
     aac:	51 e4       	ldi	r21, 0x41	; 65
     aae:	6a 81       	ldd	r22, Y+2	; 0x02
     ab0:	7b 81       	ldd	r23, Y+3	; 0x03
     ab2:	8c 81       	ldd	r24, Y+4	; 0x04
     ab4:	9d 81       	ldd	r25, Y+5	; 0x05
     ab6:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__mulsf3>
     aba:	dc 01       	movw	r26, r24
     abc:	cb 01       	movw	r24, r22
     abe:	bc 01       	movw	r22, r24
     ac0:	cd 01       	movw	r24, r26
     ac2:	0e 94 06 0c 	call	0x180c	; 0x180c <__fixunssfsi>
     ac6:	dc 01       	movw	r26, r24
     ac8:	cb 01       	movw	r24, r22
     aca:	9d a3       	std	Y+37, r25	; 0x25
     acc:	8c a3       	std	Y+36, r24	; 0x24
     ace:	0f c0       	rjmp	.+30     	; 0xaee <__stack+0x1ef>
     ad0:	80 e9       	ldi	r24, 0x90	; 144
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	9f a3       	std	Y+39, r25	; 0x27
     ad6:	8e a3       	std	Y+38, r24	; 0x26
     ad8:	8e a1       	ldd	r24, Y+38	; 0x26
     ada:	9f a1       	ldd	r25, Y+39	; 0x27
     adc:	01 97       	sbiw	r24, 0x01	; 1
     ade:	f1 f7       	brne	.-4      	; 0xadc <__stack+0x1dd>
     ae0:	9f a3       	std	Y+39, r25	; 0x27
     ae2:	8e a3       	std	Y+38, r24	; 0x26
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ae4:	8c a1       	ldd	r24, Y+36	; 0x24
     ae6:	9d a1       	ldd	r25, Y+37	; 0x25
     ae8:	01 97       	sbiw	r24, 0x01	; 1
     aea:	9d a3       	std	Y+37, r25	; 0x25
     aec:	8c a3       	std	Y+36, r24	; 0x24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aee:	8c a1       	ldd	r24, Y+36	; 0x24
     af0:	9d a1       	ldd	r25, Y+37	; 0x25
     af2:	89 2b       	or	r24, r25
     af4:	69 f7       	brne	.-38     	; 0xad0 <__stack+0x1d1>
     af6:	14 c0       	rjmp	.+40     	; 0xb20 <__stack+0x221>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     af8:	68 a1       	ldd	r22, Y+32	; 0x20
     afa:	79 a1       	ldd	r23, Y+33	; 0x21
     afc:	8a a1       	ldd	r24, Y+34	; 0x22
     afe:	9b a1       	ldd	r25, Y+35	; 0x23
     b00:	0e 94 06 0c 	call	0x180c	; 0x180c <__fixunssfsi>
     b04:	dc 01       	movw	r26, r24
     b06:	cb 01       	movw	r24, r22
     b08:	9d a3       	std	Y+37, r25	; 0x25
     b0a:	8c a3       	std	Y+36, r24	; 0x24
     b0c:	8c a1       	ldd	r24, Y+36	; 0x24
     b0e:	9d a1       	ldd	r25, Y+37	; 0x25
     b10:	99 a7       	std	Y+41, r25	; 0x29
     b12:	88 a7       	std	Y+40, r24	; 0x28
     b14:	88 a5       	ldd	r24, Y+40	; 0x28
     b16:	99 a5       	ldd	r25, Y+41	; 0x29
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	f1 f7       	brne	.-4      	; 0xb18 <__stack+0x219>
     b1c:	99 a7       	std	Y+41, r25	; 0x29
     b1e:	88 a7       	std	Y+40, r24	; 0x28
			 _delay_ms(2000);
			 test=1;
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b28:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		if(recebido == '2')
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
     b2e:	82 33       	cpi	r24, 0x32	; 50
     b30:	09 f0       	breq	.+2      	; 0xb34 <__stack+0x235>
     b32:	a3 c0       	rjmp	.+326    	; 0xc7a <__stack+0x37b>
		{
			 i = 2;
     b34:	82 e0       	ldi	r24, 0x02	; 2
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <i+0x1>
     b3c:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <i>
			 OCR0A = i *60;
     b40:	87 e4       	ldi	r24, 0x47	; 71
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	20 91 ee 01 	lds	r18, 0x01EE	; 0x8001ee <i>
     b48:	30 91 ef 01 	lds	r19, 0x01EF	; 0x8001ef <i+0x1>
     b4c:	32 2f       	mov	r19, r18
     b4e:	2c e3       	ldi	r18, 0x3C	; 60
     b50:	32 9f       	mul	r19, r18
     b52:	20 2d       	mov	r18, r0
     b54:	11 24       	eor	r1, r1
     b56:	fc 01       	movw	r30, r24
     b58:	20 83       	st	Z, r18
			 nokia_lcd_init();
     b5a:	0e 94 84 08 	call	0x1108	; 0x1108 <nokia_lcd_init>
			 nokia_lcd_clear();
     b5e:	0e 94 04 0a 	call	0x1408	; 0x1408 <nokia_lcd_clear>
			 nokia_lcd_write_string("Lamp. Escritorio:ligada",1);
     b62:	61 e0       	ldi	r22, 0x01	; 1
     b64:	82 e9       	ldi	r24, 0x92	; 146
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	0e 94 37 0b 	call	0x166e	; 0x166e <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
     b6c:	6a e0       	ldi	r22, 0x0A	; 10
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <nokia_lcd_set_cursor>
			 nokia_lcd_write_string("Porcentagem:50%",1);
     b74:	61 e0       	ldi	r22, 0x01	; 1
     b76:	8a eb       	ldi	r24, 0xBA	; 186
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	0e 94 37 0b 	call	0x166e	; 0x166e <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
     b7e:	6a e0       	ldi	r22, 0x0A	; 10
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <nokia_lcd_set_cursor>
			 nokia_lcd_render();
     b86:	0e 94 6d 0b 	call	0x16da	; 0x16da <nokia_lcd_render>
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	aa ef       	ldi	r26, 0xFA	; 250
     b90:	b4 e4       	ldi	r27, 0x44	; 68
     b92:	8e 83       	std	Y+6, r24	; 0x06
     b94:	9f 83       	std	Y+7, r25	; 0x07
     b96:	a8 87       	std	Y+8, r26	; 0x08
     b98:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a e7       	ldi	r20, 0x7A	; 122
     ba0:	55 e4       	ldi	r21, 0x45	; 69
     ba2:	6e 81       	ldd	r22, Y+6	; 0x06
     ba4:	7f 81       	ldd	r23, Y+7	; 0x07
     ba6:	88 85       	ldd	r24, Y+8	; 0x08
     ba8:	99 85       	ldd	r25, Y+9	; 0x09
     baa:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__mulsf3>
     bae:	dc 01       	movw	r26, r24
     bb0:	cb 01       	movw	r24, r22
     bb2:	8a a7       	std	Y+42, r24	; 0x2a
     bb4:	9b a7       	std	Y+43, r25	; 0x2b
     bb6:	ac a7       	std	Y+44, r26	; 0x2c
     bb8:	bd a7       	std	Y+45, r27	; 0x2d
	if (__tmp < 1.0)
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	6a a5       	ldd	r22, Y+42	; 0x2a
     bc4:	7b a5       	ldd	r23, Y+43	; 0x2b
     bc6:	8c a5       	ldd	r24, Y+44	; 0x2c
     bc8:	9d a5       	ldd	r25, Y+45	; 0x2d
     bca:	0e 94 8f 0b 	call	0x171e	; 0x171e <__cmpsf2>
     bce:	88 23       	and	r24, r24
     bd0:	2c f4       	brge	.+10     	; 0xbdc <__stack+0x2dd>
		__ticks = 1;
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	9f a7       	std	Y+47, r25	; 0x2f
     bd8:	8e a7       	std	Y+46, r24	; 0x2e
     bda:	3f c0       	rjmp	.+126    	; 0xc5a <__stack+0x35b>
	else if (__tmp > 65535)
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	6a a5       	ldd	r22, Y+42	; 0x2a
     be6:	7b a5       	ldd	r23, Y+43	; 0x2b
     be8:	8c a5       	ldd	r24, Y+44	; 0x2c
     bea:	9d a5       	ldd	r25, Y+45	; 0x2d
     bec:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__gesf2>
     bf0:	18 16       	cp	r1, r24
     bf2:	4c f5       	brge	.+82     	; 0xc46 <__stack+0x347>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	6e 81       	ldd	r22, Y+6	; 0x06
     bfe:	7f 81       	ldd	r23, Y+7	; 0x07
     c00:	88 85       	ldd	r24, Y+8	; 0x08
     c02:	99 85       	ldd	r25, Y+9	; 0x09
     c04:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__mulsf3>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	bc 01       	movw	r22, r24
     c0e:	cd 01       	movw	r24, r26
     c10:	0e 94 06 0c 	call	0x180c	; 0x180c <__fixunssfsi>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	9f a7       	std	Y+47, r25	; 0x2f
     c1a:	8e a7       	std	Y+46, r24	; 0x2e
     c1c:	0f c0       	rjmp	.+30     	; 0xc3c <__stack+0x33d>
     c1e:	80 e9       	ldi	r24, 0x90	; 144
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	99 ab       	std	Y+49, r25	; 0x31
     c24:	88 ab       	std	Y+48, r24	; 0x30
     c26:	88 a9       	ldd	r24, Y+48	; 0x30
     c28:	99 a9       	ldd	r25, Y+49	; 0x31
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	f1 f7       	brne	.-4      	; 0xc2a <__stack+0x32b>
     c2e:	99 ab       	std	Y+49, r25	; 0x31
     c30:	88 ab       	std	Y+48, r24	; 0x30
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c32:	8e a5       	ldd	r24, Y+46	; 0x2e
     c34:	9f a5       	ldd	r25, Y+47	; 0x2f
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	9f a7       	std	Y+47, r25	; 0x2f
     c3a:	8e a7       	std	Y+46, r24	; 0x2e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c3c:	8e a5       	ldd	r24, Y+46	; 0x2e
     c3e:	9f a5       	ldd	r25, Y+47	; 0x2f
     c40:	89 2b       	or	r24, r25
     c42:	69 f7       	brne	.-38     	; 0xc1e <__stack+0x31f>
     c44:	14 c0       	rjmp	.+40     	; 0xc6e <__stack+0x36f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c46:	6a a5       	ldd	r22, Y+42	; 0x2a
     c48:	7b a5       	ldd	r23, Y+43	; 0x2b
     c4a:	8c a5       	ldd	r24, Y+44	; 0x2c
     c4c:	9d a5       	ldd	r25, Y+45	; 0x2d
     c4e:	0e 94 06 0c 	call	0x180c	; 0x180c <__fixunssfsi>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	9f a7       	std	Y+47, r25	; 0x2f
     c58:	8e a7       	std	Y+46, r24	; 0x2e
     c5a:	8e a5       	ldd	r24, Y+46	; 0x2e
     c5c:	9f a5       	ldd	r25, Y+47	; 0x2f
     c5e:	9b ab       	std	Y+51, r25	; 0x33
     c60:	8a ab       	std	Y+50, r24	; 0x32
     c62:	8a a9       	ldd	r24, Y+50	; 0x32
     c64:	9b a9       	ldd	r25, Y+51	; 0x33
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	f1 f7       	brne	.-4      	; 0xc66 <__stack+0x367>
     c6a:	9b ab       	std	Y+51, r25	; 0x33
     c6c:	8a ab       	std	Y+50, r24	; 0x32
			 _delay_ms(2000);
			 test=1;
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c76:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		if(recebido == '3')
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	83 33       	cpi	r24, 0x33	; 51
     c7e:	09 f0       	breq	.+2      	; 0xc82 <__stack+0x383>
     c80:	a3 c0       	rjmp	.+326    	; 0xdc8 <__stack+0x4c9>
		{
			 i = 3;
     c82:	83 e0       	ldi	r24, 0x03	; 3
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <i+0x1>
     c8a:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <i>
			 OCR0A = i *60;
     c8e:	87 e4       	ldi	r24, 0x47	; 71
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	20 91 ee 01 	lds	r18, 0x01EE	; 0x8001ee <i>
     c96:	30 91 ef 01 	lds	r19, 0x01EF	; 0x8001ef <i+0x1>
     c9a:	32 2f       	mov	r19, r18
     c9c:	2c e3       	ldi	r18, 0x3C	; 60
     c9e:	32 9f       	mul	r19, r18
     ca0:	20 2d       	mov	r18, r0
     ca2:	11 24       	eor	r1, r1
     ca4:	fc 01       	movw	r30, r24
     ca6:	20 83       	st	Z, r18
			 nokia_lcd_init();
     ca8:	0e 94 84 08 	call	0x1108	; 0x1108 <nokia_lcd_init>
			 nokia_lcd_clear();
     cac:	0e 94 04 0a 	call	0x1408	; 0x1408 <nokia_lcd_clear>
			 nokia_lcd_write_string("Lamp. Escritorio:ligada",1);
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	82 e9       	ldi	r24, 0x92	; 146
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	0e 94 37 0b 	call	0x166e	; 0x166e <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
     cba:	6a e0       	ldi	r22, 0x0A	; 10
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <nokia_lcd_set_cursor>
			 nokia_lcd_write_string("Porcentagem:75%",1);
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	8a ec       	ldi	r24, 0xCA	; 202
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	0e 94 37 0b 	call	0x166e	; 0x166e <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
     ccc:	6a e0       	ldi	r22, 0x0A	; 10
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <nokia_lcd_set_cursor>
			 nokia_lcd_render();
     cd4:	0e 94 6d 0b 	call	0x16da	; 0x16da <nokia_lcd_render>
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	aa ef       	ldi	r26, 0xFA	; 250
     cde:	b4 e4       	ldi	r27, 0x44	; 68
     ce0:	8a 87       	std	Y+10, r24	; 0x0a
     ce2:	9b 87       	std	Y+11, r25	; 0x0b
     ce4:	ac 87       	std	Y+12, r26	; 0x0c
     ce6:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	4a e7       	ldi	r20, 0x7A	; 122
     cee:	55 e4       	ldi	r21, 0x45	; 69
     cf0:	6a 85       	ldd	r22, Y+10	; 0x0a
     cf2:	7b 85       	ldd	r23, Y+11	; 0x0b
     cf4:	8c 85       	ldd	r24, Y+12	; 0x0c
     cf6:	9d 85       	ldd	r25, Y+13	; 0x0d
     cf8:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__mulsf3>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	8c ab       	std	Y+52, r24	; 0x34
     d02:	9d ab       	std	Y+53, r25	; 0x35
     d04:	ae ab       	std	Y+54, r26	; 0x36
     d06:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 e8       	ldi	r20, 0x80	; 128
     d0e:	5f e3       	ldi	r21, 0x3F	; 63
     d10:	6c a9       	ldd	r22, Y+52	; 0x34
     d12:	7d a9       	ldd	r23, Y+53	; 0x35
     d14:	8e a9       	ldd	r24, Y+54	; 0x36
     d16:	9f a9       	ldd	r25, Y+55	; 0x37
     d18:	0e 94 8f 0b 	call	0x171e	; 0x171e <__cmpsf2>
     d1c:	88 23       	and	r24, r24
     d1e:	2c f4       	brge	.+10     	; 0xd2a <__stack+0x42b>
		__ticks = 1;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	99 af       	std	Y+57, r25	; 0x39
     d26:	88 af       	std	Y+56, r24	; 0x38
     d28:	3f c0       	rjmp	.+126    	; 0xda8 <__stack+0x4a9>
	else if (__tmp > 65535)
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	3f ef       	ldi	r19, 0xFF	; 255
     d2e:	4f e7       	ldi	r20, 0x7F	; 127
     d30:	57 e4       	ldi	r21, 0x47	; 71
     d32:	6c a9       	ldd	r22, Y+52	; 0x34
     d34:	7d a9       	ldd	r23, Y+53	; 0x35
     d36:	8e a9       	ldd	r24, Y+54	; 0x36
     d38:	9f a9       	ldd	r25, Y+55	; 0x37
     d3a:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__gesf2>
     d3e:	18 16       	cp	r1, r24
     d40:	4c f5       	brge	.+82     	; 0xd94 <__stack+0x495>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	40 e2       	ldi	r20, 0x20	; 32
     d48:	51 e4       	ldi	r21, 0x41	; 65
     d4a:	6a 85       	ldd	r22, Y+10	; 0x0a
     d4c:	7b 85       	ldd	r23, Y+11	; 0x0b
     d4e:	8c 85       	ldd	r24, Y+12	; 0x0c
     d50:	9d 85       	ldd	r25, Y+13	; 0x0d
     d52:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__mulsf3>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	bc 01       	movw	r22, r24
     d5c:	cd 01       	movw	r24, r26
     d5e:	0e 94 06 0c 	call	0x180c	; 0x180c <__fixunssfsi>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	99 af       	std	Y+57, r25	; 0x39
     d68:	88 af       	std	Y+56, r24	; 0x38
     d6a:	0f c0       	rjmp	.+30     	; 0xd8a <__stack+0x48b>
     d6c:	80 e9       	ldi	r24, 0x90	; 144
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	9b af       	std	Y+59, r25	; 0x3b
     d72:	8a af       	std	Y+58, r24	; 0x3a
     d74:	8a ad       	ldd	r24, Y+58	; 0x3a
     d76:	9b ad       	ldd	r25, Y+59	; 0x3b
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	f1 f7       	brne	.-4      	; 0xd78 <__stack+0x479>
     d7c:	9b af       	std	Y+59, r25	; 0x3b
     d7e:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d80:	88 ad       	ldd	r24, Y+56	; 0x38
     d82:	99 ad       	ldd	r25, Y+57	; 0x39
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	99 af       	std	Y+57, r25	; 0x39
     d88:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d8a:	88 ad       	ldd	r24, Y+56	; 0x38
     d8c:	99 ad       	ldd	r25, Y+57	; 0x39
     d8e:	89 2b       	or	r24, r25
     d90:	69 f7       	brne	.-38     	; 0xd6c <__stack+0x46d>
     d92:	14 c0       	rjmp	.+40     	; 0xdbc <__stack+0x4bd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d94:	6c a9       	ldd	r22, Y+52	; 0x34
     d96:	7d a9       	ldd	r23, Y+53	; 0x35
     d98:	8e a9       	ldd	r24, Y+54	; 0x36
     d9a:	9f a9       	ldd	r25, Y+55	; 0x37
     d9c:	0e 94 06 0c 	call	0x180c	; 0x180c <__fixunssfsi>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	99 af       	std	Y+57, r25	; 0x39
     da6:	88 af       	std	Y+56, r24	; 0x38
     da8:	88 ad       	ldd	r24, Y+56	; 0x38
     daa:	99 ad       	ldd	r25, Y+57	; 0x39
     dac:	9d af       	std	Y+61, r25	; 0x3d
     dae:	8c af       	std	Y+60, r24	; 0x3c
     db0:	8c ad       	ldd	r24, Y+60	; 0x3c
     db2:	9d ad       	ldd	r25, Y+61	; 0x3d
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	f1 f7       	brne	.-4      	; 0xdb4 <__stack+0x4b5>
     db8:	9d af       	std	Y+61, r25	; 0x3d
     dba:	8c af       	std	Y+60, r24	; 0x3c
			 _delay_ms(2000);
			 test=1;
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     dc4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		if(recebido == '4')
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	84 33       	cpi	r24, 0x34	; 52
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <__stack+0x4d1>
     dce:	e6 c0       	rjmp	.+460    	; 0xf9c <__stack+0x69d>
		{
			 i = 4;
     dd0:	84 e0       	ldi	r24, 0x04	; 4
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <i+0x1>
     dd8:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <i>
			 OCR0A = i *60;
     ddc:	87 e4       	ldi	r24, 0x47	; 71
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	20 91 ee 01 	lds	r18, 0x01EE	; 0x8001ee <i>
     de4:	30 91 ef 01 	lds	r19, 0x01EF	; 0x8001ef <i+0x1>
     de8:	32 2f       	mov	r19, r18
     dea:	2c e3       	ldi	r18, 0x3C	; 60
     dec:	32 9f       	mul	r19, r18
     dee:	20 2d       	mov	r18, r0
     df0:	11 24       	eor	r1, r1
     df2:	fc 01       	movw	r30, r24
     df4:	20 83       	st	Z, r18
			 nokia_lcd_init();
     df6:	0e 94 84 08 	call	0x1108	; 0x1108 <nokia_lcd_init>
			 nokia_lcd_clear();
     dfa:	0e 94 04 0a 	call	0x1408	; 0x1408 <nokia_lcd_clear>
			 nokia_lcd_write_string("Lamp. Escritorio:ligada",1);
     dfe:	61 e0       	ldi	r22, 0x01	; 1
     e00:	82 e9       	ldi	r24, 0x92	; 146
     e02:	91 e0       	ldi	r25, 0x01	; 1
     e04:	0e 94 37 0b 	call	0x166e	; 0x166e <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
     e08:	6a e0       	ldi	r22, 0x0A	; 10
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <nokia_lcd_set_cursor>
			 nokia_lcd_write_string("Porcentagem:100%",1);
     e10:	61 e0       	ldi	r22, 0x01	; 1
     e12:	8a ed       	ldi	r24, 0xDA	; 218
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	0e 94 37 0b 	call	0x166e	; 0x166e <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
     e1a:	6a e0       	ldi	r22, 0x0A	; 10
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <nokia_lcd_set_cursor>
			 nokia_lcd_render();
     e22:	0e 94 6d 0b 	call	0x16da	; 0x16da <nokia_lcd_render>
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	aa ef       	ldi	r26, 0xFA	; 250
     e2c:	b4 e4       	ldi	r27, 0x44	; 68
     e2e:	8e 87       	std	Y+14, r24	; 0x0e
     e30:	9f 87       	std	Y+15, r25	; 0x0f
     e32:	a8 8b       	std	Y+16, r26	; 0x10
     e34:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e36:	8e 01       	movw	r16, r28
     e38:	02 5c       	subi	r16, 0xC2	; 194
     e3a:	1f 4f       	sbci	r17, 0xFF	; 255
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	4a e7       	ldi	r20, 0x7A	; 122
     e42:	55 e4       	ldi	r21, 0x45	; 69
     e44:	6e 85       	ldd	r22, Y+14	; 0x0e
     e46:	7f 85       	ldd	r23, Y+15	; 0x0f
     e48:	88 89       	ldd	r24, Y+16	; 0x10
     e4a:	99 89       	ldd	r25, Y+17	; 0x11
     e4c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	f8 01       	movw	r30, r16
     e56:	80 83       	st	Z, r24
     e58:	91 83       	std	Z+1, r25	; 0x01
     e5a:	a2 83       	std	Z+2, r26	; 0x02
     e5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e5e:	ce 01       	movw	r24, r28
     e60:	ce 96       	adiw	r24, 0x3e	; 62
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	40 e8       	ldi	r20, 0x80	; 128
     e68:	5f e3       	ldi	r21, 0x3F	; 63
     e6a:	fc 01       	movw	r30, r24
     e6c:	60 81       	ld	r22, Z
     e6e:	71 81       	ldd	r23, Z+1	; 0x01
     e70:	82 81       	ldd	r24, Z+2	; 0x02
     e72:	93 81       	ldd	r25, Z+3	; 0x03
     e74:	0e 94 8f 0b 	call	0x171e	; 0x171e <__cmpsf2>
     e78:	88 23       	and	r24, r24
     e7a:	4c f4       	brge	.+18     	; 0xe8e <__stack+0x58f>
		__ticks = 1;
     e7c:	ce 01       	movw	r24, r28
     e7e:	8e 5b       	subi	r24, 0xBE	; 190
     e80:	9f 4f       	sbci	r25, 0xFF	; 255
     e82:	21 e0       	ldi	r18, 0x01	; 1
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	fc 01       	movw	r30, r24
     e88:	31 83       	std	Z+1, r19	; 0x01
     e8a:	20 83       	st	Z, r18
     e8c:	67 c0       	rjmp	.+206    	; 0xf5c <__stack+0x65d>
	else if (__tmp > 65535)
     e8e:	ce 01       	movw	r24, r28
     e90:	ce 96       	adiw	r24, 0x3e	; 62
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	3f ef       	ldi	r19, 0xFF	; 255
     e96:	4f e7       	ldi	r20, 0x7F	; 127
     e98:	57 e4       	ldi	r21, 0x47	; 71
     e9a:	fc 01       	movw	r30, r24
     e9c:	60 81       	ld	r22, Z
     e9e:	71 81       	ldd	r23, Z+1	; 0x01
     ea0:	82 81       	ldd	r24, Z+2	; 0x02
     ea2:	93 81       	ldd	r25, Z+3	; 0x03
     ea4:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__gesf2>
     ea8:	18 16       	cp	r1, r24
     eaa:	0c f0       	brlt	.+2      	; 0xeae <__stack+0x5af>
     eac:	46 c0       	rjmp	.+140    	; 0xf3a <__stack+0x63b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e2       	ldi	r20, 0x20	; 32
     eb4:	51 e4       	ldi	r21, 0x41	; 65
     eb6:	6e 85       	ldd	r22, Y+14	; 0x0e
     eb8:	7f 85       	ldd	r23, Y+15	; 0x0f
     eba:	88 89       	ldd	r24, Y+16	; 0x10
     ebc:	99 89       	ldd	r25, Y+17	; 0x11
     ebe:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__mulsf3>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	8e 01       	movw	r16, r28
     ec8:	0e 5b       	subi	r16, 0xBE	; 190
     eca:	1f 4f       	sbci	r17, 0xFF	; 255
     ecc:	bc 01       	movw	r22, r24
     ece:	cd 01       	movw	r24, r26
     ed0:	0e 94 06 0c 	call	0x180c	; 0x180c <__fixunssfsi>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	f8 01       	movw	r30, r16
     eda:	91 83       	std	Z+1, r25	; 0x01
     edc:	80 83       	st	Z, r24
     ede:	24 c0       	rjmp	.+72     	; 0xf28 <__stack+0x629>
     ee0:	ce 01       	movw	r24, r28
     ee2:	8c 5b       	subi	r24, 0xBC	; 188
     ee4:	9f 4f       	sbci	r25, 0xFF	; 255
     ee6:	20 e9       	ldi	r18, 0x90	; 144
     ee8:	31 e0       	ldi	r19, 0x01	; 1
     eea:	fc 01       	movw	r30, r24
     eec:	31 83       	std	Z+1, r19	; 0x01
     eee:	20 83       	st	Z, r18
     ef0:	ce 01       	movw	r24, r28
     ef2:	8c 5b       	subi	r24, 0xBC	; 188
     ef4:	9f 4f       	sbci	r25, 0xFF	; 255
     ef6:	fc 01       	movw	r30, r24
     ef8:	80 81       	ld	r24, Z
     efa:	91 81       	ldd	r25, Z+1	; 0x01
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	f1 f7       	brne	.-4      	; 0xefc <__stack+0x5fd>
     f00:	9e 01       	movw	r18, r28
     f02:	2c 5b       	subi	r18, 0xBC	; 188
     f04:	3f 4f       	sbci	r19, 0xFF	; 255
     f06:	f9 01       	movw	r30, r18
     f08:	91 83       	std	Z+1, r25	; 0x01
     f0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f0c:	ce 01       	movw	r24, r28
     f0e:	8e 5b       	subi	r24, 0xBE	; 190
     f10:	9f 4f       	sbci	r25, 0xFF	; 255
     f12:	9e 01       	movw	r18, r28
     f14:	2e 5b       	subi	r18, 0xBE	; 190
     f16:	3f 4f       	sbci	r19, 0xFF	; 255
     f18:	f9 01       	movw	r30, r18
     f1a:	20 81       	ld	r18, Z
     f1c:	31 81       	ldd	r19, Z+1	; 0x01
     f1e:	21 50       	subi	r18, 0x01	; 1
     f20:	31 09       	sbc	r19, r1
     f22:	fc 01       	movw	r30, r24
     f24:	31 83       	std	Z+1, r19	; 0x01
     f26:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f28:	ce 01       	movw	r24, r28
     f2a:	8e 5b       	subi	r24, 0xBE	; 190
     f2c:	9f 4f       	sbci	r25, 0xFF	; 255
     f2e:	fc 01       	movw	r30, r24
     f30:	80 81       	ld	r24, Z
     f32:	91 81       	ldd	r25, Z+1	; 0x01
     f34:	89 2b       	or	r24, r25
     f36:	a1 f6       	brne	.-88     	; 0xee0 <__stack+0x5e1>
     f38:	2b c0       	rjmp	.+86     	; 0xf90 <__stack+0x691>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f3a:	8e 01       	movw	r16, r28
     f3c:	0e 5b       	subi	r16, 0xBE	; 190
     f3e:	1f 4f       	sbci	r17, 0xFF	; 255
     f40:	ce 01       	movw	r24, r28
     f42:	ce 96       	adiw	r24, 0x3e	; 62
     f44:	fc 01       	movw	r30, r24
     f46:	60 81       	ld	r22, Z
     f48:	71 81       	ldd	r23, Z+1	; 0x01
     f4a:	82 81       	ldd	r24, Z+2	; 0x02
     f4c:	93 81       	ldd	r25, Z+3	; 0x03
     f4e:	0e 94 06 0c 	call	0x180c	; 0x180c <__fixunssfsi>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	f8 01       	movw	r30, r16
     f58:	91 83       	std	Z+1, r25	; 0x01
     f5a:	80 83       	st	Z, r24
     f5c:	ce 01       	movw	r24, r28
     f5e:	8a 5b       	subi	r24, 0xBA	; 186
     f60:	9f 4f       	sbci	r25, 0xFF	; 255
     f62:	9e 01       	movw	r18, r28
     f64:	2e 5b       	subi	r18, 0xBE	; 190
     f66:	3f 4f       	sbci	r19, 0xFF	; 255
     f68:	f9 01       	movw	r30, r18
     f6a:	20 81       	ld	r18, Z
     f6c:	31 81       	ldd	r19, Z+1	; 0x01
     f6e:	fc 01       	movw	r30, r24
     f70:	31 83       	std	Z+1, r19	; 0x01
     f72:	20 83       	st	Z, r18
     f74:	ce 01       	movw	r24, r28
     f76:	8a 5b       	subi	r24, 0xBA	; 186
     f78:	9f 4f       	sbci	r25, 0xFF	; 255
     f7a:	fc 01       	movw	r30, r24
     f7c:	80 81       	ld	r24, Z
     f7e:	91 81       	ldd	r25, Z+1	; 0x01
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <__stack+0x681>
     f84:	9e 01       	movw	r18, r28
     f86:	2a 5b       	subi	r18, 0xBA	; 186
     f88:	3f 4f       	sbci	r19, 0xFF	; 255
     f8a:	f9 01       	movw	r30, r18
     f8c:	91 83       	std	Z+1, r25	; 0x01
     f8e:	80 83       	st	Z, r24
			 _delay_ms(2000);
			 test=1;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     f98:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

		}
		
		USART_transmit(recebido);
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	0e 94 8b 01 	call	0x316	; 0x316 <USART_transmit>
		
     fa2:	00 00       	nop
     fa4:	c9 5b       	subi	r28, 0xB9	; 185
     fa6:	df 4f       	sbci	r29, 0xFF	; 255
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	ff 91       	pop	r31
     fb8:	ef 91       	pop	r30
     fba:	bf 91       	pop	r27
     fbc:	af 91       	pop	r26
     fbe:	9f 91       	pop	r25
     fc0:	8f 91       	pop	r24
     fc2:	7f 91       	pop	r23
     fc4:	6f 91       	pop	r22
     fc6:	5f 91       	pop	r21
     fc8:	4f 91       	pop	r20
     fca:	3f 91       	pop	r19
     fcc:	2f 91       	pop	r18
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	0f 90       	pop	r0
     fd4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     fd8:	0f 90       	pop	r0
     fda:	1f 90       	pop	r1
     fdc:	18 95       	reti

00000fde <write>:
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
}
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <write+0x8>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	6a 83       	std	Y+2, r22	; 0x02
     fee:	85 e2       	ldi	r24, 0x25	; 37
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	25 e2       	ldi	r18, 0x25	; 37
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	f9 01       	movw	r30, r18
     ff8:	20 81       	ld	r18, Z
     ffa:	2d 7f       	andi	r18, 0xFD	; 253
     ffc:	fc 01       	movw	r30, r24
     ffe:	20 83       	st	Z, r18
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	88 23       	and	r24, r24
    1004:	51 f0       	breq	.+20     	; 0x101a <write+0x3c>
    1006:	85 e2       	ldi	r24, 0x25	; 37
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	25 e2       	ldi	r18, 0x25	; 37
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	f9 01       	movw	r30, r18
    1010:	20 81       	ld	r18, Z
    1012:	28 60       	ori	r18, 0x08	; 8
    1014:	fc 01       	movw	r30, r24
    1016:	20 83       	st	Z, r18
    1018:	09 c0       	rjmp	.+18     	; 0x102c <write+0x4e>
    101a:	85 e2       	ldi	r24, 0x25	; 37
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	25 e2       	ldi	r18, 0x25	; 37
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	f9 01       	movw	r30, r18
    1024:	20 81       	ld	r18, Z
    1026:	27 7f       	andi	r18, 0xF7	; 247
    1028:	fc 01       	movw	r30, r24
    102a:	20 83       	st	Z, r18
    102c:	10 e0       	ldi	r17, 0x00	; 0
    102e:	3c c0       	rjmp	.+120    	; 0x10a8 <write+0xca>
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	88 2f       	mov	r24, r24
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	21 2f       	mov	r18, r17
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	47 e0       	ldi	r20, 0x07	; 7
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	ba 01       	movw	r22, r20
    1040:	62 1b       	sub	r22, r18
    1042:	73 0b       	sbc	r23, r19
    1044:	9b 01       	movw	r18, r22
    1046:	02 c0       	rjmp	.+4      	; 0x104c <write+0x6e>
    1048:	95 95       	asr	r25
    104a:	87 95       	ror	r24
    104c:	2a 95       	dec	r18
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <write+0x6a>
    1050:	81 70       	andi	r24, 0x01	; 1
    1052:	99 27       	eor	r25, r25
    1054:	89 2b       	or	r24, r25
    1056:	51 f0       	breq	.+20     	; 0x106c <write+0x8e>
    1058:	85 e2       	ldi	r24, 0x25	; 37
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	25 e2       	ldi	r18, 0x25	; 37
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	f9 01       	movw	r30, r18
    1062:	20 81       	ld	r18, Z
    1064:	20 61       	ori	r18, 0x10	; 16
    1066:	fc 01       	movw	r30, r24
    1068:	20 83       	st	Z, r18
    106a:	09 c0       	rjmp	.+18     	; 0x107e <write+0xa0>
    106c:	85 e2       	ldi	r24, 0x25	; 37
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	25 e2       	ldi	r18, 0x25	; 37
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	f9 01       	movw	r30, r18
    1076:	20 81       	ld	r18, Z
    1078:	2f 7e       	andi	r18, 0xEF	; 239
    107a:	fc 01       	movw	r30, r24
    107c:	20 83       	st	Z, r18
    107e:	85 e2       	ldi	r24, 0x25	; 37
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	25 e2       	ldi	r18, 0x25	; 37
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	f9 01       	movw	r30, r18
    1088:	20 81       	ld	r18, Z
    108a:	20 62       	ori	r18, 0x20	; 32
    108c:	fc 01       	movw	r30, r24
    108e:	20 83       	st	Z, r18
    1090:	85 e2       	ldi	r24, 0x25	; 37
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	25 e2       	ldi	r18, 0x25	; 37
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	f9 01       	movw	r30, r18
    109a:	20 81       	ld	r18, Z
    109c:	2f 7d       	andi	r18, 0xDF	; 223
    109e:	fc 01       	movw	r30, r24
    10a0:	20 83       	st	Z, r18
    10a2:	81 2f       	mov	r24, r17
    10a4:	11 e0       	ldi	r17, 0x01	; 1
    10a6:	18 0f       	add	r17, r24
    10a8:	18 30       	cpi	r17, 0x08	; 8
    10aa:	10 f2       	brcs	.-124    	; 0x1030 <write+0x52>
    10ac:	85 e2       	ldi	r24, 0x25	; 37
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	25 e2       	ldi	r18, 0x25	; 37
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	f9 01       	movw	r30, r18
    10b6:	20 81       	ld	r18, Z
    10b8:	22 60       	ori	r18, 0x02	; 2
    10ba:	fc 01       	movw	r30, r24
    10bc:	20 83       	st	Z, r18
    10be:	00 00       	nop
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	08 95       	ret

000010cc <write_cmd>:
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	1f 92       	push	r1
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	89 83       	std	Y+1, r24	; 0x01
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	0e 94 ef 07 	call	0xfde	; 0xfde <write>
    10e0:	00 00       	nop
    10e2:	0f 90       	pop	r0
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	08 95       	ret

000010ea <write_data>:
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	1f 92       	push	r1
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	89 83       	std	Y+1, r24	; 0x01
    10f6:	61 e0       	ldi	r22, 0x01	; 1
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	0e 94 ef 07 	call	0xfde	; 0xfde <write>
    10fe:	00 00       	nop
    1100:	0f 90       	pop	r0
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	08 95       	ret

00001108 <nokia_lcd_init>:
    1108:	0f 93       	push	r16
    110a:	1f 93       	push	r17
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
    1114:	6c 97       	sbiw	r28, 0x1c	; 28
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	de bf       	out	0x3e, r29	; 62
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	cd bf       	out	0x3d, r28	; 61
    1120:	84 e2       	ldi	r24, 0x24	; 36
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	24 e2       	ldi	r18, 0x24	; 36
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	f9 01       	movw	r30, r18
    112a:	20 81       	ld	r18, Z
    112c:	22 60       	ori	r18, 0x02	; 2
    112e:	fc 01       	movw	r30, r24
    1130:	20 83       	st	Z, r18
    1132:	84 e2       	ldi	r24, 0x24	; 36
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	24 e2       	ldi	r18, 0x24	; 36
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	f9 01       	movw	r30, r18
    113c:	20 81       	ld	r18, Z
    113e:	24 60       	ori	r18, 0x04	; 4
    1140:	fc 01       	movw	r30, r24
    1142:	20 83       	st	Z, r18
    1144:	84 e2       	ldi	r24, 0x24	; 36
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	24 e2       	ldi	r18, 0x24	; 36
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	f9 01       	movw	r30, r18
    114e:	20 81       	ld	r18, Z
    1150:	28 60       	ori	r18, 0x08	; 8
    1152:	fc 01       	movw	r30, r24
    1154:	20 83       	st	Z, r18
    1156:	84 e2       	ldi	r24, 0x24	; 36
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	24 e2       	ldi	r18, 0x24	; 36
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	f9 01       	movw	r30, r18
    1160:	20 81       	ld	r18, Z
    1162:	20 61       	ori	r18, 0x10	; 16
    1164:	fc 01       	movw	r30, r24
    1166:	20 83       	st	Z, r18
    1168:	84 e2       	ldi	r24, 0x24	; 36
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	24 e2       	ldi	r18, 0x24	; 36
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	f9 01       	movw	r30, r18
    1172:	20 81       	ld	r18, Z
    1174:	20 62       	ori	r18, 0x20	; 32
    1176:	fc 01       	movw	r30, r24
    1178:	20 83       	st	Z, r18
    117a:	85 e2       	ldi	r24, 0x25	; 37
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	25 e2       	ldi	r18, 0x25	; 37
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	f9 01       	movw	r30, r18
    1184:	20 81       	ld	r18, Z
    1186:	24 60       	ori	r18, 0x04	; 4
    1188:	fc 01       	movw	r30, r24
    118a:	20 83       	st	Z, r18
    118c:	85 e2       	ldi	r24, 0x25	; 37
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	25 e2       	ldi	r18, 0x25	; 37
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	f9 01       	movw	r30, r18
    1196:	20 81       	ld	r18, Z
    1198:	22 60       	ori	r18, 0x02	; 2
    119a:	fc 01       	movw	r30, r24
    119c:	20 83       	st	Z, r18
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	a0 e2       	ldi	r26, 0x20	; 32
    11a4:	b1 e4       	ldi	r27, 0x41	; 65
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	9a 83       	std	Y+2, r25	; 0x02
    11aa:	ab 83       	std	Y+3, r26	; 0x03
    11ac:	bc 83       	std	Y+4, r27	; 0x04
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	4a e7       	ldi	r20, 0x7A	; 122
    11b4:	53 e4       	ldi	r21, 0x43	; 67
    11b6:	69 81       	ldd	r22, Y+1	; 0x01
    11b8:	7a 81       	ldd	r23, Y+2	; 0x02
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	9c 81       	ldd	r25, Y+4	; 0x04
    11be:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__mulsf3>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	8b 8b       	std	Y+19, r24	; 0x13
    11c8:	9c 8b       	std	Y+20, r25	; 0x14
    11ca:	ad 8b       	std	Y+21, r26	; 0x15
    11cc:	be 8b       	std	Y+22, r27	; 0x16
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	40 e8       	ldi	r20, 0x80	; 128
    11d4:	5f e3       	ldi	r21, 0x3F	; 63
    11d6:	6b 89       	ldd	r22, Y+19	; 0x13
    11d8:	7c 89       	ldd	r23, Y+20	; 0x14
    11da:	8d 89       	ldd	r24, Y+21	; 0x15
    11dc:	9e 89       	ldd	r25, Y+22	; 0x16
    11de:	0e 94 8f 0b 	call	0x171e	; 0x171e <__cmpsf2>
    11e2:	88 23       	and	r24, r24
    11e4:	2c f4       	brge	.+10     	; 0x11f0 <nokia_lcd_init+0xe8>
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	98 8f       	std	Y+24, r25	; 0x18
    11ec:	8f 8b       	std	Y+23, r24	; 0x17
    11ee:	3f c0       	rjmp	.+126    	; 0x126e <nokia_lcd_init+0x166>
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	3f ef       	ldi	r19, 0xFF	; 255
    11f4:	4f e7       	ldi	r20, 0x7F	; 127
    11f6:	57 e4       	ldi	r21, 0x47	; 71
    11f8:	6b 89       	ldd	r22, Y+19	; 0x13
    11fa:	7c 89       	ldd	r23, Y+20	; 0x14
    11fc:	8d 89       	ldd	r24, Y+21	; 0x15
    11fe:	9e 89       	ldd	r25, Y+22	; 0x16
    1200:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__gesf2>
    1204:	18 16       	cp	r1, r24
    1206:	4c f5       	brge	.+82     	; 0x125a <nokia_lcd_init+0x152>
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e2       	ldi	r20, 0x20	; 32
    120e:	51 e4       	ldi	r21, 0x41	; 65
    1210:	69 81       	ldd	r22, Y+1	; 0x01
    1212:	7a 81       	ldd	r23, Y+2	; 0x02
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
    1218:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__mulsf3>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	bc 01       	movw	r22, r24
    1222:	cd 01       	movw	r24, r26
    1224:	0e 94 06 0c 	call	0x180c	; 0x180c <__fixunssfsi>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	98 8f       	std	Y+24, r25	; 0x18
    122e:	8f 8b       	std	Y+23, r24	; 0x17
    1230:	0f c0       	rjmp	.+30     	; 0x1250 <nokia_lcd_init+0x148>
    1232:	89 e1       	ldi	r24, 0x19	; 25
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	9a 8f       	std	Y+26, r25	; 0x1a
    1238:	89 8f       	std	Y+25, r24	; 0x19
    123a:	89 8d       	ldd	r24, Y+25	; 0x19
    123c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f1 f7       	brne	.-4      	; 0x123e <nokia_lcd_init+0x136>
    1242:	9a 8f       	std	Y+26, r25	; 0x1a
    1244:	89 8f       	std	Y+25, r24	; 0x19
    1246:	8f 89       	ldd	r24, Y+23	; 0x17
    1248:	98 8d       	ldd	r25, Y+24	; 0x18
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	98 8f       	std	Y+24, r25	; 0x18
    124e:	8f 8b       	std	Y+23, r24	; 0x17
    1250:	8f 89       	ldd	r24, Y+23	; 0x17
    1252:	98 8d       	ldd	r25, Y+24	; 0x18
    1254:	89 2b       	or	r24, r25
    1256:	69 f7       	brne	.-38     	; 0x1232 <nokia_lcd_init+0x12a>
    1258:	14 c0       	rjmp	.+40     	; 0x1282 <nokia_lcd_init+0x17a>
    125a:	6b 89       	ldd	r22, Y+19	; 0x13
    125c:	7c 89       	ldd	r23, Y+20	; 0x14
    125e:	8d 89       	ldd	r24, Y+21	; 0x15
    1260:	9e 89       	ldd	r25, Y+22	; 0x16
    1262:	0e 94 06 0c 	call	0x180c	; 0x180c <__fixunssfsi>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	98 8f       	std	Y+24, r25	; 0x18
    126c:	8f 8b       	std	Y+23, r24	; 0x17
    126e:	8f 89       	ldd	r24, Y+23	; 0x17
    1270:	98 8d       	ldd	r25, Y+24	; 0x18
    1272:	9c 8f       	std	Y+28, r25	; 0x1c
    1274:	8b 8f       	std	Y+27, r24	; 0x1b
    1276:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1278:	9c 8d       	ldd	r25, Y+28	; 0x1c
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	f1 f7       	brne	.-4      	; 0x127a <nokia_lcd_init+0x172>
    127e:	9c 8f       	std	Y+28, r25	; 0x1c
    1280:	8b 8f       	std	Y+27, r24	; 0x1b
    1282:	85 e2       	ldi	r24, 0x25	; 37
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	25 e2       	ldi	r18, 0x25	; 37
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	f9 01       	movw	r30, r18
    128c:	20 81       	ld	r18, Z
    128e:	2b 7f       	andi	r18, 0xFB	; 251
    1290:	fc 01       	movw	r30, r24
    1292:	20 83       	st	Z, r18
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	ac e8       	ldi	r26, 0x8C	; 140
    129a:	b2 e4       	ldi	r27, 0x42	; 66
    129c:	8d 83       	std	Y+5, r24	; 0x05
    129e:	9e 83       	std	Y+6, r25	; 0x06
    12a0:	af 83       	std	Y+7, r26	; 0x07
    12a2:	b8 87       	std	Y+8, r27	; 0x08
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	4a e7       	ldi	r20, 0x7A	; 122
    12aa:	53 e4       	ldi	r21, 0x43	; 67
    12ac:	6d 81       	ldd	r22, Y+5	; 0x05
    12ae:	7e 81       	ldd	r23, Y+6	; 0x06
    12b0:	8f 81       	ldd	r24, Y+7	; 0x07
    12b2:	98 85       	ldd	r25, Y+8	; 0x08
    12b4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__mulsf3>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	89 87       	std	Y+9, r24	; 0x09
    12be:	9a 87       	std	Y+10, r25	; 0x0a
    12c0:	ab 87       	std	Y+11, r26	; 0x0b
    12c2:	bc 87       	std	Y+12, r27	; 0x0c
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	40 e8       	ldi	r20, 0x80	; 128
    12ca:	5f e3       	ldi	r21, 0x3F	; 63
    12cc:	69 85       	ldd	r22, Y+9	; 0x09
    12ce:	7a 85       	ldd	r23, Y+10	; 0x0a
    12d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    12d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    12d4:	0e 94 8f 0b 	call	0x171e	; 0x171e <__cmpsf2>
    12d8:	88 23       	and	r24, r24
    12da:	2c f4       	brge	.+10     	; 0x12e6 <nokia_lcd_init+0x1de>
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	9e 87       	std	Y+14, r25	; 0x0e
    12e2:	8d 87       	std	Y+13, r24	; 0x0d
    12e4:	3f c0       	rjmp	.+126    	; 0x1364 <nokia_lcd_init+0x25c>
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	3f ef       	ldi	r19, 0xFF	; 255
    12ea:	4f e7       	ldi	r20, 0x7F	; 127
    12ec:	57 e4       	ldi	r21, 0x47	; 71
    12ee:	69 85       	ldd	r22, Y+9	; 0x09
    12f0:	7a 85       	ldd	r23, Y+10	; 0x0a
    12f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    12f6:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__gesf2>
    12fa:	18 16       	cp	r1, r24
    12fc:	4c f5       	brge	.+82     	; 0x1350 <nokia_lcd_init+0x248>
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	40 e2       	ldi	r20, 0x20	; 32
    1304:	51 e4       	ldi	r21, 0x41	; 65
    1306:	6d 81       	ldd	r22, Y+5	; 0x05
    1308:	7e 81       	ldd	r23, Y+6	; 0x06
    130a:	8f 81       	ldd	r24, Y+7	; 0x07
    130c:	98 85       	ldd	r25, Y+8	; 0x08
    130e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__mulsf3>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	bc 01       	movw	r22, r24
    1318:	cd 01       	movw	r24, r26
    131a:	0e 94 06 0c 	call	0x180c	; 0x180c <__fixunssfsi>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	9e 87       	std	Y+14, r25	; 0x0e
    1324:	8d 87       	std	Y+13, r24	; 0x0d
    1326:	0f c0       	rjmp	.+30     	; 0x1346 <nokia_lcd_init+0x23e>
    1328:	89 e1       	ldi	r24, 0x19	; 25
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	98 8b       	std	Y+16, r25	; 0x10
    132e:	8f 87       	std	Y+15, r24	; 0x0f
    1330:	8f 85       	ldd	r24, Y+15	; 0x0f
    1332:	98 89       	ldd	r25, Y+16	; 0x10
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <nokia_lcd_init+0x22c>
    1338:	98 8b       	std	Y+16, r25	; 0x10
    133a:	8f 87       	std	Y+15, r24	; 0x0f
    133c:	8d 85       	ldd	r24, Y+13	; 0x0d
    133e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	9e 87       	std	Y+14, r25	; 0x0e
    1344:	8d 87       	std	Y+13, r24	; 0x0d
    1346:	8d 85       	ldd	r24, Y+13	; 0x0d
    1348:	9e 85       	ldd	r25, Y+14	; 0x0e
    134a:	89 2b       	or	r24, r25
    134c:	69 f7       	brne	.-38     	; 0x1328 <nokia_lcd_init+0x220>
    134e:	14 c0       	rjmp	.+40     	; 0x1378 <nokia_lcd_init+0x270>
    1350:	69 85       	ldd	r22, Y+9	; 0x09
    1352:	7a 85       	ldd	r23, Y+10	; 0x0a
    1354:	8b 85       	ldd	r24, Y+11	; 0x0b
    1356:	9c 85       	ldd	r25, Y+12	; 0x0c
    1358:	0e 94 06 0c 	call	0x180c	; 0x180c <__fixunssfsi>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	9e 87       	std	Y+14, r25	; 0x0e
    1362:	8d 87       	std	Y+13, r24	; 0x0d
    1364:	8d 85       	ldd	r24, Y+13	; 0x0d
    1366:	9e 85       	ldd	r25, Y+14	; 0x0e
    1368:	9a 8b       	std	Y+18, r25	; 0x12
    136a:	89 8b       	std	Y+17, r24	; 0x11
    136c:	89 89       	ldd	r24, Y+17	; 0x11
    136e:	9a 89       	ldd	r25, Y+18	; 0x12
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	f1 f7       	brne	.-4      	; 0x1370 <nokia_lcd_init+0x268>
    1374:	9a 8b       	std	Y+18, r25	; 0x12
    1376:	89 8b       	std	Y+17, r24	; 0x11
    1378:	85 e2       	ldi	r24, 0x25	; 37
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	25 e2       	ldi	r18, 0x25	; 37
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	f9 01       	movw	r30, r18
    1382:	20 81       	ld	r18, Z
    1384:	24 60       	ori	r18, 0x04	; 4
    1386:	fc 01       	movw	r30, r24
    1388:	20 83       	st	Z, r18
    138a:	85 e2       	ldi	r24, 0x25	; 37
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	25 e2       	ldi	r18, 0x25	; 37
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	f9 01       	movw	r30, r18
    1394:	20 81       	ld	r18, Z
    1396:	2d 7f       	andi	r18, 0xFD	; 253
    1398:	fc 01       	movw	r30, r24
    139a:	20 83       	st	Z, r18
    139c:	81 e2       	ldi	r24, 0x21	; 33
    139e:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_cmd>
    13a2:	83 e1       	ldi	r24, 0x13	; 19
    13a4:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_cmd>
    13a8:	86 e0       	ldi	r24, 0x06	; 6
    13aa:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_cmd>
    13ae:	82 ec       	ldi	r24, 0xC2	; 194
    13b0:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_cmd>
    13b4:	80 e2       	ldi	r24, 0x20	; 32
    13b6:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_cmd>
    13ba:	89 e0       	ldi	r24, 0x09	; 9
    13bc:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_cmd>
    13c0:	80 e8       	ldi	r24, 0x80	; 128
    13c2:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_cmd>
    13c6:	80 e4       	ldi	r24, 0x40	; 64
    13c8:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_cmd>
    13cc:	00 e0       	ldi	r16, 0x00	; 0
    13ce:	10 e0       	ldi	r17, 0x00	; 0
    13d0:	05 c0       	rjmp	.+10     	; 0x13dc <nokia_lcd_init+0x2d4>
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	0e 94 75 08 	call	0x10ea	; 0x10ea <write_data>
    13d8:	0f 5f       	subi	r16, 0xFF	; 255
    13da:	1f 4f       	sbci	r17, 0xFF	; 255
    13dc:	08 3f       	cpi	r16, 0xF8	; 248
    13de:	f1 e0       	ldi	r31, 0x01	; 1
    13e0:	1f 07       	cpc	r17, r31
    13e2:	b8 f3       	brcs	.-18     	; 0x13d2 <nokia_lcd_init+0x2ca>
    13e4:	88 e0       	ldi	r24, 0x08	; 8
    13e6:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_cmd>
    13ea:	8c e0       	ldi	r24, 0x0C	; 12
    13ec:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_cmd>
    13f0:	00 00       	nop
    13f2:	6c 96       	adiw	r28, 0x1c	; 28
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	08 95       	ret

00001408 <nokia_lcd_clear>:
    1408:	0f 93       	push	r16
    140a:	1f 93       	push	r17
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
    1414:	80 e8       	ldi	r24, 0x80	; 128
    1416:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_cmd>
    141a:	80 e4       	ldi	r24, 0x40	; 64
    141c:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_cmd>
    1420:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <nokia_lcd+0x1f8>
    1424:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <nokia_lcd+0x1f9>
    1428:	00 e0       	ldi	r16, 0x00	; 0
    142a:	10 e0       	ldi	r17, 0x00	; 0
    142c:	07 c0       	rjmp	.+14     	; 0x143c <nokia_lcd_clear+0x34>
    142e:	c8 01       	movw	r24, r16
    1430:	80 51       	subi	r24, 0x10	; 16
    1432:	9e 4f       	sbci	r25, 0xFE	; 254
    1434:	fc 01       	movw	r30, r24
    1436:	10 82       	st	Z, r1
    1438:	0f 5f       	subi	r16, 0xFF	; 255
    143a:	1f 4f       	sbci	r17, 0xFF	; 255
    143c:	08 3f       	cpi	r16, 0xF8	; 248
    143e:	f1 e0       	ldi	r31, 0x01	; 1
    1440:	1f 07       	cpc	r17, r31
    1442:	a8 f3       	brcs	.-22     	; 0x142e <nokia_lcd_clear+0x26>
    1444:	00 00       	nop
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	1f 91       	pop	r17
    144c:	0f 91       	pop	r16
    144e:	08 95       	ret

00001450 <nokia_lcd_set_pixel>:

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	00 d0       	rcall	.+0      	; 0x1456 <nokia_lcd_set_pixel+0x6>
    1456:	00 d0       	rcall	.+0      	; 0x1458 <nokia_lcd_set_pixel+0x8>
    1458:	1f 92       	push	r1
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	8b 83       	std	Y+3, r24	; 0x03
    1460:	6c 83       	std	Y+4, r22	; 0x04
    1462:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
    1464:	8c 81       	ldd	r24, Y+4	; 0x04
    1466:	86 95       	lsr	r24
    1468:	86 95       	lsr	r24
    146a:	86 95       	lsr	r24
    146c:	88 2f       	mov	r24, r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	44 e5       	ldi	r20, 0x54	; 84
    1472:	48 9f       	mul	r20, r24
    1474:	90 01       	movw	r18, r0
    1476:	49 9f       	mul	r20, r25
    1478:	30 0d       	add	r19, r0
    147a:	11 24       	eor	r1, r1
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	82 0f       	add	r24, r18
    1484:	93 1f       	adc	r25, r19
    1486:	80 51       	subi	r24, 0x10	; 16
    1488:	9e 4f       	sbci	r25, 0xFE	; 254
    148a:	9a 83       	std	Y+2, r25	; 0x02
    148c:	89 83       	std	Y+1, r24	; 0x01
	if (value)
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	88 23       	and	r24, r24
    1492:	c9 f0       	breq	.+50     	; 0x14c6 <nokia_lcd_set_pixel+0x76>
		*byte |= (1 << (y % 8));
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	9a 81       	ldd	r25, Y+2	; 0x02
    1498:	fc 01       	movw	r30, r24
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8c 81       	ldd	r24, Y+4	; 0x04
    14a0:	88 2f       	mov	r24, r24
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	9c 01       	movw	r18, r24
    14a6:	27 70       	andi	r18, 0x07	; 7
    14a8:	33 27       	eor	r19, r19
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <nokia_lcd_set_pixel+0x64>
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	2a 95       	dec	r18
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <nokia_lcd_set_pixel+0x60>
    14b8:	84 2b       	or	r24, r20
    14ba:	28 2f       	mov	r18, r24
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	9a 81       	ldd	r25, Y+2	; 0x02
    14c0:	fc 01       	movw	r30, r24
    14c2:	20 83       	st	Z, r18
	else
		*byte &= ~(1 << (y %8 ));
}
    14c4:	19 c0       	rjmp	.+50     	; 0x14f8 <nokia_lcd_set_pixel+0xa8>
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
	if (value)
		*byte |= (1 << (y % 8));
	else
		*byte &= ~(1 << (y %8 ));
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ca:	fc 01       	movw	r30, r24
    14cc:	80 81       	ld	r24, Z
    14ce:	48 2f       	mov	r20, r24
    14d0:	8c 81       	ldd	r24, Y+4	; 0x04
    14d2:	88 2f       	mov	r24, r24
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	9c 01       	movw	r18, r24
    14d8:	27 70       	andi	r18, 0x07	; 7
    14da:	33 27       	eor	r19, r19
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <nokia_lcd_set_pixel+0x96>
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	2a 95       	dec	r18
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <nokia_lcd_set_pixel+0x92>
    14ea:	80 95       	com	r24
    14ec:	84 23       	and	r24, r20
    14ee:	28 2f       	mov	r18, r24
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	9a 81       	ldd	r25, Y+2	; 0x02
    14f4:	fc 01       	movw	r30, r24
    14f6:	20 83       	st	Z, r18
}
    14f8:	00 00       	nop
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	08 95       	ret

0000150a <nokia_lcd_write_char>:

void nokia_lcd_write_char(char code, uint8_t scale)
{
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	00 d0       	rcall	.+0      	; 0x1514 <nokia_lcd_write_char+0xa>
    1514:	00 d0       	rcall	.+0      	; 0x1516 <nokia_lcd_write_char+0xc>
    1516:	1f 92       	push	r1
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	8c 83       	std	Y+4, r24	; 0x04
    151e:	6d 83       	std	Y+5, r22	; 0x05
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    1520:	10 e0       	ldi	r17, 0x00	; 0
    1522:	65 c0       	rjmp	.+202    	; 0x15ee <nokia_lcd_write_char+0xe4>
		for (y = 0; y < 7*scale; y++)
    1524:	00 e0       	ldi	r16, 0x00	; 0
    1526:	4e c0       	rjmp	.+156    	; 0x15c4 <nokia_lcd_write_char+0xba>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    1528:	8c 81       	ldd	r24, Y+4	; 0x04
    152a:	88 2f       	mov	r24, r24
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	9c 01       	movw	r18, r24
    1530:	20 52       	subi	r18, 0x20	; 32
    1532:	31 09       	sbc	r19, r1
    1534:	9d 81       	ldd	r25, Y+5	; 0x05
    1536:	81 2f       	mov	r24, r17
    1538:	69 2f       	mov	r22, r25
    153a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__udivmodqi4>
    153e:	48 2f       	mov	r20, r24
    1540:	50 e0       	ldi	r21, 0x00	; 0
    1542:	c9 01       	movw	r24, r18
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	82 0f       	add	r24, r18
    154e:	93 1f       	adc	r25, r19
    1550:	84 0f       	add	r24, r20
    1552:	95 1f       	adc	r25, r21
    1554:	88 59       	subi	r24, 0x98	; 152
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	9a 83       	std	Y+2, r25	; 0x02
    155a:	89 83       	std	Y+1, r24	; 0x01
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	9a 81       	ldd	r25, Y+2	; 0x02
    1560:	fc 01       	movw	r30, r24
    1562:	84 91       	lpm	r24, Z
    1564:	8b 83       	std	Y+3, r24	; 0x03
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	9d 81       	ldd	r25, Y+5	; 0x05
    156e:	80 2f       	mov	r24, r16
    1570:	69 2f       	mov	r22, r25
    1572:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__udivmodqi4>
    1576:	88 2f       	mov	r24, r24
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	a9 01       	movw	r20, r18
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <nokia_lcd_write_char+0x78>
    157e:	55 95       	asr	r21
    1580:	47 95       	ror	r20
    1582:	8a 95       	dec	r24
    1584:	e2 f7       	brpl	.-8      	; 0x157e <nokia_lcd_write_char+0x74>
    1586:	ca 01       	movw	r24, r20
    1588:	81 70       	andi	r24, 0x01	; 1
    158a:	99 27       	eor	r25, r25
    158c:	89 2b       	or	r24, r25
    158e:	61 f0       	breq	.+24     	; 0x15a8 <nokia_lcd_write_char+0x9e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
    1590:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <nokia_lcd+0x1f9>
    1594:	98 2f       	mov	r25, r24
    1596:	90 0f       	add	r25, r16
    1598:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <nokia_lcd+0x1f8>
    159c:	81 0f       	add	r24, r17
    159e:	41 e0       	ldi	r20, 0x01	; 1
    15a0:	69 2f       	mov	r22, r25
    15a2:	0e 94 28 0a 	call	0x1450	; 0x1450 <nokia_lcd_set_pixel>
    15a6:	0b c0       	rjmp	.+22     	; 0x15be <nokia_lcd_write_char+0xb4>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    15a8:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <nokia_lcd+0x1f9>
    15ac:	98 2f       	mov	r25, r24
    15ae:	90 0f       	add	r25, r16
    15b0:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <nokia_lcd+0x1f8>
    15b4:	81 0f       	add	r24, r17
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	69 2f       	mov	r22, r25
    15ba:	0e 94 28 0a 	call	0x1450	; 0x1450 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
    15be:	80 2f       	mov	r24, r16
    15c0:	01 e0       	ldi	r16, 0x01	; 1
    15c2:	08 0f       	add	r16, r24
    15c4:	40 2f       	mov	r20, r16
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	c9 01       	movw	r24, r18
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	82 1b       	sub	r24, r18
    15de:	93 0b       	sbc	r25, r19
    15e0:	48 17       	cp	r20, r24
    15e2:	59 07       	cpc	r21, r25
    15e4:	0c f4       	brge	.+2      	; 0x15e8 <nokia_lcd_write_char+0xde>
    15e6:	a0 cf       	rjmp	.-192    	; 0x1528 <nokia_lcd_write_char+0x1e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    15e8:	81 2f       	mov	r24, r17
    15ea:	11 e0       	ldi	r17, 0x01	; 1
    15ec:	18 0f       	add	r17, r24
    15ee:	41 2f       	mov	r20, r17
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	8d 81       	ldd	r24, Y+5	; 0x05
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	c9 01       	movw	r24, r18
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	82 0f       	add	r24, r18
    1604:	93 1f       	adc	r25, r19
    1606:	48 17       	cp	r20, r24
    1608:	59 07       	cpc	r21, r25
    160a:	0c f4       	brge	.+2      	; 0x160e <nokia_lcd_write_char+0x104>
    160c:	8b cf       	rjmp	.-234    	; 0x1524 <nokia_lcd_write_char+0x1a>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    160e:	20 91 e8 03 	lds	r18, 0x03E8	; 0x8003e8 <nokia_lcd+0x1f8>
    1612:	9d 81       	ldd	r25, Y+5	; 0x05
    1614:	89 2f       	mov	r24, r25
    1616:	88 0f       	add	r24, r24
    1618:	88 0f       	add	r24, r24
    161a:	89 0f       	add	r24, r25
    161c:	82 0f       	add	r24, r18
    161e:	8f 5f       	subi	r24, 0xFF	; 255
    1620:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <nokia_lcd+0x1f8>
	if (nokia_lcd.cursor_x >= 84) {
    1624:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <nokia_lcd+0x1f8>
    1628:	84 35       	cpi	r24, 0x54	; 84
    162a:	70 f0       	brcs	.+28     	; 0x1648 <nokia_lcd_write_char+0x13e>
		nokia_lcd.cursor_x = 0;
    162c:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
    1630:	20 91 e9 03 	lds	r18, 0x03E9	; 0x8003e9 <nokia_lcd+0x1f9>
    1634:	9d 81       	ldd	r25, Y+5	; 0x05
    1636:	89 2f       	mov	r24, r25
    1638:	88 0f       	add	r24, r24
    163a:	88 0f       	add	r24, r24
    163c:	88 0f       	add	r24, r24
    163e:	89 1b       	sub	r24, r25
    1640:	82 0f       	add	r24, r18
    1642:	8f 5f       	subi	r24, 0xFF	; 255
    1644:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <nokia_lcd+0x1f9>
	}
	if (nokia_lcd.cursor_y >= 48) {
    1648:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <nokia_lcd+0x1f9>
    164c:	80 33       	cpi	r24, 0x30	; 48
    164e:	20 f0       	brcs	.+8      	; 0x1658 <nokia_lcd_write_char+0x14e>
		nokia_lcd.cursor_x = 0;
    1650:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
    1654:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <nokia_lcd+0x1f9>
	}
}
    1658:	00 00       	nop
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	df 91       	pop	r29
    1666:	cf 91       	pop	r28
    1668:	1f 91       	pop	r17
    166a:	0f 91       	pop	r16
    166c:	08 95       	ret

0000166e <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	00 d0       	rcall	.+0      	; 0x1674 <nokia_lcd_write_string+0x6>
    1674:	1f 92       	push	r1
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	9a 83       	std	Y+2, r25	; 0x02
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	6b 83       	std	Y+3, r22	; 0x03
	while(*str)
    1680:	0c c0       	rjmp	.+24     	; 0x169a <nokia_lcd_write_string+0x2c>
		nokia_lcd_write_char(*str++, scale);
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	9a 81       	ldd	r25, Y+2	; 0x02
    1686:	9c 01       	movw	r18, r24
    1688:	2f 5f       	subi	r18, 0xFF	; 255
    168a:	3f 4f       	sbci	r19, 0xFF	; 255
    168c:	3a 83       	std	Y+2, r19	; 0x02
    168e:	29 83       	std	Y+1, r18	; 0x01
    1690:	fc 01       	movw	r30, r24
    1692:	80 81       	ld	r24, Z
    1694:	6b 81       	ldd	r22, Y+3	; 0x03
    1696:	0e 94 85 0a 	call	0x150a	; 0x150a <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	9a 81       	ldd	r25, Y+2	; 0x02
    169e:	fc 01       	movw	r30, r24
    16a0:	80 81       	ld	r24, Z
    16a2:	88 23       	and	r24, r24
    16a4:	71 f7       	brne	.-36     	; 0x1682 <nokia_lcd_write_string+0x14>
		nokia_lcd_write_char(*str++, scale);
}
    16a6:	00 00       	nop
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	08 95       	ret

000016b4 <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <nokia_lcd_set_cursor+0x6>
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	6a 83       	std	Y+2, r22	; 0x02
	nokia_lcd.cursor_x = x;
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <nokia_lcd+0x1f9>
}
    16ce:	00 00       	nop
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	08 95       	ret

000016da <nokia_lcd_render>:

void nokia_lcd_render(void)
{
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
    16e6:	80 e8       	ldi	r24, 0x80	; 128
    16e8:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_cmd>
	write_cmd(0x40);
    16ec:	80 e4       	ldi	r24, 0x40	; 64
    16ee:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_cmd>

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    16f2:	00 e0       	ldi	r16, 0x00	; 0
    16f4:	10 e0       	ldi	r17, 0x00	; 0
    16f6:	09 c0       	rjmp	.+18     	; 0x170a <nokia_lcd_render+0x30>
		write_data(nokia_lcd.screen[i]);
    16f8:	c8 01       	movw	r24, r16
    16fa:	80 51       	subi	r24, 0x10	; 16
    16fc:	9e 4f       	sbci	r25, 0xFE	; 254
    16fe:	fc 01       	movw	r30, r24
    1700:	80 81       	ld	r24, Z
    1702:	0e 94 75 08 	call	0x10ea	; 0x10ea <write_data>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    1706:	0f 5f       	subi	r16, 0xFF	; 255
    1708:	1f 4f       	sbci	r17, 0xFF	; 255
    170a:	08 3f       	cpi	r16, 0xF8	; 248
    170c:	f1 e0       	ldi	r31, 0x01	; 1
    170e:	1f 07       	cpc	r17, r31
    1710:	98 f3       	brcs	.-26     	; 0x16f8 <nokia_lcd_render+0x1e>
		write_data(nokia_lcd.screen[i]);
}
    1712:	00 00       	nop
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	08 95       	ret

0000171e <__cmpsf2>:
    171e:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__fp_cmp>
    1722:	08 f4       	brcc	.+2      	; 0x1726 <__cmpsf2+0x8>
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	08 95       	ret

00001728 <__divsf3>:
    1728:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__divsf3x>
    172c:	0c 94 ad 0c 	jmp	0x195a	; 0x195a <__fp_round>
    1730:	0e 94 a6 0c 	call	0x194c	; 0x194c <__fp_pscB>
    1734:	58 f0       	brcs	.+22     	; 0x174c <__divsf3+0x24>
    1736:	0e 94 9f 0c 	call	0x193e	; 0x193e <__fp_pscA>
    173a:	40 f0       	brcs	.+16     	; 0x174c <__divsf3+0x24>
    173c:	29 f4       	brne	.+10     	; 0x1748 <__divsf3+0x20>
    173e:	5f 3f       	cpi	r21, 0xFF	; 255
    1740:	29 f0       	breq	.+10     	; 0x174c <__divsf3+0x24>
    1742:	0c 94 96 0c 	jmp	0x192c	; 0x192c <__fp_inf>
    1746:	51 11       	cpse	r21, r1
    1748:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <__fp_szero>
    174c:	0c 94 9c 0c 	jmp	0x1938	; 0x1938 <__fp_nan>

00001750 <__divsf3x>:
    1750:	0e 94 be 0c 	call	0x197c	; 0x197c <__fp_split3>
    1754:	68 f3       	brcs	.-38     	; 0x1730 <__divsf3+0x8>

00001756 <__divsf3_pse>:
    1756:	99 23       	and	r25, r25
    1758:	b1 f3       	breq	.-20     	; 0x1746 <__divsf3+0x1e>
    175a:	55 23       	and	r21, r21
    175c:	91 f3       	breq	.-28     	; 0x1742 <__divsf3+0x1a>
    175e:	95 1b       	sub	r25, r21
    1760:	55 0b       	sbc	r21, r21
    1762:	bb 27       	eor	r27, r27
    1764:	aa 27       	eor	r26, r26
    1766:	62 17       	cp	r22, r18
    1768:	73 07       	cpc	r23, r19
    176a:	84 07       	cpc	r24, r20
    176c:	38 f0       	brcs	.+14     	; 0x177c <__divsf3_pse+0x26>
    176e:	9f 5f       	subi	r25, 0xFF	; 255
    1770:	5f 4f       	sbci	r21, 0xFF	; 255
    1772:	22 0f       	add	r18, r18
    1774:	33 1f       	adc	r19, r19
    1776:	44 1f       	adc	r20, r20
    1778:	aa 1f       	adc	r26, r26
    177a:	a9 f3       	breq	.-22     	; 0x1766 <__divsf3_pse+0x10>
    177c:	35 d0       	rcall	.+106    	; 0x17e8 <__divsf3_pse+0x92>
    177e:	0e 2e       	mov	r0, r30
    1780:	3a f0       	brmi	.+14     	; 0x1790 <__divsf3_pse+0x3a>
    1782:	e0 e8       	ldi	r30, 0x80	; 128
    1784:	32 d0       	rcall	.+100    	; 0x17ea <__divsf3_pse+0x94>
    1786:	91 50       	subi	r25, 0x01	; 1
    1788:	50 40       	sbci	r21, 0x00	; 0
    178a:	e6 95       	lsr	r30
    178c:	00 1c       	adc	r0, r0
    178e:	ca f7       	brpl	.-14     	; 0x1782 <__divsf3_pse+0x2c>
    1790:	2b d0       	rcall	.+86     	; 0x17e8 <__divsf3_pse+0x92>
    1792:	fe 2f       	mov	r31, r30
    1794:	29 d0       	rcall	.+82     	; 0x17e8 <__divsf3_pse+0x92>
    1796:	66 0f       	add	r22, r22
    1798:	77 1f       	adc	r23, r23
    179a:	88 1f       	adc	r24, r24
    179c:	bb 1f       	adc	r27, r27
    179e:	26 17       	cp	r18, r22
    17a0:	37 07       	cpc	r19, r23
    17a2:	48 07       	cpc	r20, r24
    17a4:	ab 07       	cpc	r26, r27
    17a6:	b0 e8       	ldi	r27, 0x80	; 128
    17a8:	09 f0       	breq	.+2      	; 0x17ac <__divsf3_pse+0x56>
    17aa:	bb 0b       	sbc	r27, r27
    17ac:	80 2d       	mov	r24, r0
    17ae:	bf 01       	movw	r22, r30
    17b0:	ff 27       	eor	r31, r31
    17b2:	93 58       	subi	r25, 0x83	; 131
    17b4:	5f 4f       	sbci	r21, 0xFF	; 255
    17b6:	3a f0       	brmi	.+14     	; 0x17c6 <__divsf3_pse+0x70>
    17b8:	9e 3f       	cpi	r25, 0xFE	; 254
    17ba:	51 05       	cpc	r21, r1
    17bc:	78 f0       	brcs	.+30     	; 0x17dc <__divsf3_pse+0x86>
    17be:	0c 94 96 0c 	jmp	0x192c	; 0x192c <__fp_inf>
    17c2:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <__fp_szero>
    17c6:	5f 3f       	cpi	r21, 0xFF	; 255
    17c8:	e4 f3       	brlt	.-8      	; 0x17c2 <__divsf3_pse+0x6c>
    17ca:	98 3e       	cpi	r25, 0xE8	; 232
    17cc:	d4 f3       	brlt	.-12     	; 0x17c2 <__divsf3_pse+0x6c>
    17ce:	86 95       	lsr	r24
    17d0:	77 95       	ror	r23
    17d2:	67 95       	ror	r22
    17d4:	b7 95       	ror	r27
    17d6:	f7 95       	ror	r31
    17d8:	9f 5f       	subi	r25, 0xFF	; 255
    17da:	c9 f7       	brne	.-14     	; 0x17ce <__divsf3_pse+0x78>
    17dc:	88 0f       	add	r24, r24
    17de:	91 1d       	adc	r25, r1
    17e0:	96 95       	lsr	r25
    17e2:	87 95       	ror	r24
    17e4:	97 f9       	bld	r25, 7
    17e6:	08 95       	ret
    17e8:	e1 e0       	ldi	r30, 0x01	; 1
    17ea:	66 0f       	add	r22, r22
    17ec:	77 1f       	adc	r23, r23
    17ee:	88 1f       	adc	r24, r24
    17f0:	bb 1f       	adc	r27, r27
    17f2:	62 17       	cp	r22, r18
    17f4:	73 07       	cpc	r23, r19
    17f6:	84 07       	cpc	r24, r20
    17f8:	ba 07       	cpc	r27, r26
    17fa:	20 f0       	brcs	.+8      	; 0x1804 <__divsf3_pse+0xae>
    17fc:	62 1b       	sub	r22, r18
    17fe:	73 0b       	sbc	r23, r19
    1800:	84 0b       	sbc	r24, r20
    1802:	ba 0b       	sbc	r27, r26
    1804:	ee 1f       	adc	r30, r30
    1806:	88 f7       	brcc	.-30     	; 0x17ea <__divsf3_pse+0x94>
    1808:	e0 95       	com	r30
    180a:	08 95       	ret

0000180c <__fixunssfsi>:
    180c:	0e 94 c6 0c 	call	0x198c	; 0x198c <__fp_splitA>
    1810:	88 f0       	brcs	.+34     	; 0x1834 <__fixunssfsi+0x28>
    1812:	9f 57       	subi	r25, 0x7F	; 127
    1814:	98 f0       	brcs	.+38     	; 0x183c <__fixunssfsi+0x30>
    1816:	b9 2f       	mov	r27, r25
    1818:	99 27       	eor	r25, r25
    181a:	b7 51       	subi	r27, 0x17	; 23
    181c:	b0 f0       	brcs	.+44     	; 0x184a <__fixunssfsi+0x3e>
    181e:	e1 f0       	breq	.+56     	; 0x1858 <__fixunssfsi+0x4c>
    1820:	66 0f       	add	r22, r22
    1822:	77 1f       	adc	r23, r23
    1824:	88 1f       	adc	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	1a f0       	brmi	.+6      	; 0x1830 <__fixunssfsi+0x24>
    182a:	ba 95       	dec	r27
    182c:	c9 f7       	brne	.-14     	; 0x1820 <__fixunssfsi+0x14>
    182e:	14 c0       	rjmp	.+40     	; 0x1858 <__fixunssfsi+0x4c>
    1830:	b1 30       	cpi	r27, 0x01	; 1
    1832:	91 f0       	breq	.+36     	; 0x1858 <__fixunssfsi+0x4c>
    1834:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__fp_zero>
    1838:	b1 e0       	ldi	r27, 0x01	; 1
    183a:	08 95       	ret
    183c:	0c 94 e0 0c 	jmp	0x19c0	; 0x19c0 <__fp_zero>
    1840:	67 2f       	mov	r22, r23
    1842:	78 2f       	mov	r23, r24
    1844:	88 27       	eor	r24, r24
    1846:	b8 5f       	subi	r27, 0xF8	; 248
    1848:	39 f0       	breq	.+14     	; 0x1858 <__fixunssfsi+0x4c>
    184a:	b9 3f       	cpi	r27, 0xF9	; 249
    184c:	cc f3       	brlt	.-14     	; 0x1840 <__fixunssfsi+0x34>
    184e:	86 95       	lsr	r24
    1850:	77 95       	ror	r23
    1852:	67 95       	ror	r22
    1854:	b3 95       	inc	r27
    1856:	d9 f7       	brne	.-10     	; 0x184e <__fixunssfsi+0x42>
    1858:	3e f4       	brtc	.+14     	; 0x1868 <__fixunssfsi+0x5c>
    185a:	90 95       	com	r25
    185c:	80 95       	com	r24
    185e:	70 95       	com	r23
    1860:	61 95       	neg	r22
    1862:	7f 4f       	sbci	r23, 0xFF	; 255
    1864:	8f 4f       	sbci	r24, 0xFF	; 255
    1866:	9f 4f       	sbci	r25, 0xFF	; 255
    1868:	08 95       	ret

0000186a <__floatunsisf>:
    186a:	e8 94       	clt
    186c:	09 c0       	rjmp	.+18     	; 0x1880 <__floatsisf+0x12>

0000186e <__floatsisf>:
    186e:	97 fb       	bst	r25, 7
    1870:	3e f4       	brtc	.+14     	; 0x1880 <__floatsisf+0x12>
    1872:	90 95       	com	r25
    1874:	80 95       	com	r24
    1876:	70 95       	com	r23
    1878:	61 95       	neg	r22
    187a:	7f 4f       	sbci	r23, 0xFF	; 255
    187c:	8f 4f       	sbci	r24, 0xFF	; 255
    187e:	9f 4f       	sbci	r25, 0xFF	; 255
    1880:	99 23       	and	r25, r25
    1882:	a9 f0       	breq	.+42     	; 0x18ae <__floatsisf+0x40>
    1884:	f9 2f       	mov	r31, r25
    1886:	96 e9       	ldi	r25, 0x96	; 150
    1888:	bb 27       	eor	r27, r27
    188a:	93 95       	inc	r25
    188c:	f6 95       	lsr	r31
    188e:	87 95       	ror	r24
    1890:	77 95       	ror	r23
    1892:	67 95       	ror	r22
    1894:	b7 95       	ror	r27
    1896:	f1 11       	cpse	r31, r1
    1898:	f8 cf       	rjmp	.-16     	; 0x188a <__floatsisf+0x1c>
    189a:	fa f4       	brpl	.+62     	; 0x18da <__floatsisf+0x6c>
    189c:	bb 0f       	add	r27, r27
    189e:	11 f4       	brne	.+4      	; 0x18a4 <__floatsisf+0x36>
    18a0:	60 ff       	sbrs	r22, 0
    18a2:	1b c0       	rjmp	.+54     	; 0x18da <__floatsisf+0x6c>
    18a4:	6f 5f       	subi	r22, 0xFF	; 255
    18a6:	7f 4f       	sbci	r23, 0xFF	; 255
    18a8:	8f 4f       	sbci	r24, 0xFF	; 255
    18aa:	9f 4f       	sbci	r25, 0xFF	; 255
    18ac:	16 c0       	rjmp	.+44     	; 0x18da <__floatsisf+0x6c>
    18ae:	88 23       	and	r24, r24
    18b0:	11 f0       	breq	.+4      	; 0x18b6 <__floatsisf+0x48>
    18b2:	96 e9       	ldi	r25, 0x96	; 150
    18b4:	11 c0       	rjmp	.+34     	; 0x18d8 <__floatsisf+0x6a>
    18b6:	77 23       	and	r23, r23
    18b8:	21 f0       	breq	.+8      	; 0x18c2 <__floatsisf+0x54>
    18ba:	9e e8       	ldi	r25, 0x8E	; 142
    18bc:	87 2f       	mov	r24, r23
    18be:	76 2f       	mov	r23, r22
    18c0:	05 c0       	rjmp	.+10     	; 0x18cc <__floatsisf+0x5e>
    18c2:	66 23       	and	r22, r22
    18c4:	71 f0       	breq	.+28     	; 0x18e2 <__floatsisf+0x74>
    18c6:	96 e8       	ldi	r25, 0x86	; 134
    18c8:	86 2f       	mov	r24, r22
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	60 e0       	ldi	r22, 0x00	; 0
    18ce:	2a f0       	brmi	.+10     	; 0x18da <__floatsisf+0x6c>
    18d0:	9a 95       	dec	r25
    18d2:	66 0f       	add	r22, r22
    18d4:	77 1f       	adc	r23, r23
    18d6:	88 1f       	adc	r24, r24
    18d8:	da f7       	brpl	.-10     	; 0x18d0 <__floatsisf+0x62>
    18da:	88 0f       	add	r24, r24
    18dc:	96 95       	lsr	r25
    18de:	87 95       	ror	r24
    18e0:	97 f9       	bld	r25, 7
    18e2:	08 95       	ret

000018e4 <__fp_cmp>:
    18e4:	99 0f       	add	r25, r25
    18e6:	00 08       	sbc	r0, r0
    18e8:	55 0f       	add	r21, r21
    18ea:	aa 0b       	sbc	r26, r26
    18ec:	e0 e8       	ldi	r30, 0x80	; 128
    18ee:	fe ef       	ldi	r31, 0xFE	; 254
    18f0:	16 16       	cp	r1, r22
    18f2:	17 06       	cpc	r1, r23
    18f4:	e8 07       	cpc	r30, r24
    18f6:	f9 07       	cpc	r31, r25
    18f8:	c0 f0       	brcs	.+48     	; 0x192a <__fp_cmp+0x46>
    18fa:	12 16       	cp	r1, r18
    18fc:	13 06       	cpc	r1, r19
    18fe:	e4 07       	cpc	r30, r20
    1900:	f5 07       	cpc	r31, r21
    1902:	98 f0       	brcs	.+38     	; 0x192a <__fp_cmp+0x46>
    1904:	62 1b       	sub	r22, r18
    1906:	73 0b       	sbc	r23, r19
    1908:	84 0b       	sbc	r24, r20
    190a:	95 0b       	sbc	r25, r21
    190c:	39 f4       	brne	.+14     	; 0x191c <__fp_cmp+0x38>
    190e:	0a 26       	eor	r0, r26
    1910:	61 f0       	breq	.+24     	; 0x192a <__fp_cmp+0x46>
    1912:	23 2b       	or	r18, r19
    1914:	24 2b       	or	r18, r20
    1916:	25 2b       	or	r18, r21
    1918:	21 f4       	brne	.+8      	; 0x1922 <__fp_cmp+0x3e>
    191a:	08 95       	ret
    191c:	0a 26       	eor	r0, r26
    191e:	09 f4       	brne	.+2      	; 0x1922 <__fp_cmp+0x3e>
    1920:	a1 40       	sbci	r26, 0x01	; 1
    1922:	a6 95       	lsr	r26
    1924:	8f ef       	ldi	r24, 0xFF	; 255
    1926:	81 1d       	adc	r24, r1
    1928:	81 1d       	adc	r24, r1
    192a:	08 95       	ret

0000192c <__fp_inf>:
    192c:	97 f9       	bld	r25, 7
    192e:	9f 67       	ori	r25, 0x7F	; 127
    1930:	80 e8       	ldi	r24, 0x80	; 128
    1932:	70 e0       	ldi	r23, 0x00	; 0
    1934:	60 e0       	ldi	r22, 0x00	; 0
    1936:	08 95       	ret

00001938 <__fp_nan>:
    1938:	9f ef       	ldi	r25, 0xFF	; 255
    193a:	80 ec       	ldi	r24, 0xC0	; 192
    193c:	08 95       	ret

0000193e <__fp_pscA>:
    193e:	00 24       	eor	r0, r0
    1940:	0a 94       	dec	r0
    1942:	16 16       	cp	r1, r22
    1944:	17 06       	cpc	r1, r23
    1946:	18 06       	cpc	r1, r24
    1948:	09 06       	cpc	r0, r25
    194a:	08 95       	ret

0000194c <__fp_pscB>:
    194c:	00 24       	eor	r0, r0
    194e:	0a 94       	dec	r0
    1950:	12 16       	cp	r1, r18
    1952:	13 06       	cpc	r1, r19
    1954:	14 06       	cpc	r1, r20
    1956:	05 06       	cpc	r0, r21
    1958:	08 95       	ret

0000195a <__fp_round>:
    195a:	09 2e       	mov	r0, r25
    195c:	03 94       	inc	r0
    195e:	00 0c       	add	r0, r0
    1960:	11 f4       	brne	.+4      	; 0x1966 <__fp_round+0xc>
    1962:	88 23       	and	r24, r24
    1964:	52 f0       	brmi	.+20     	; 0x197a <__fp_round+0x20>
    1966:	bb 0f       	add	r27, r27
    1968:	40 f4       	brcc	.+16     	; 0x197a <__fp_round+0x20>
    196a:	bf 2b       	or	r27, r31
    196c:	11 f4       	brne	.+4      	; 0x1972 <__fp_round+0x18>
    196e:	60 ff       	sbrs	r22, 0
    1970:	04 c0       	rjmp	.+8      	; 0x197a <__fp_round+0x20>
    1972:	6f 5f       	subi	r22, 0xFF	; 255
    1974:	7f 4f       	sbci	r23, 0xFF	; 255
    1976:	8f 4f       	sbci	r24, 0xFF	; 255
    1978:	9f 4f       	sbci	r25, 0xFF	; 255
    197a:	08 95       	ret

0000197c <__fp_split3>:
    197c:	57 fd       	sbrc	r21, 7
    197e:	90 58       	subi	r25, 0x80	; 128
    1980:	44 0f       	add	r20, r20
    1982:	55 1f       	adc	r21, r21
    1984:	59 f0       	breq	.+22     	; 0x199c <__fp_splitA+0x10>
    1986:	5f 3f       	cpi	r21, 0xFF	; 255
    1988:	71 f0       	breq	.+28     	; 0x19a6 <__fp_splitA+0x1a>
    198a:	47 95       	ror	r20

0000198c <__fp_splitA>:
    198c:	88 0f       	add	r24, r24
    198e:	97 fb       	bst	r25, 7
    1990:	99 1f       	adc	r25, r25
    1992:	61 f0       	breq	.+24     	; 0x19ac <__fp_splitA+0x20>
    1994:	9f 3f       	cpi	r25, 0xFF	; 255
    1996:	79 f0       	breq	.+30     	; 0x19b6 <__fp_splitA+0x2a>
    1998:	87 95       	ror	r24
    199a:	08 95       	ret
    199c:	12 16       	cp	r1, r18
    199e:	13 06       	cpc	r1, r19
    19a0:	14 06       	cpc	r1, r20
    19a2:	55 1f       	adc	r21, r21
    19a4:	f2 cf       	rjmp	.-28     	; 0x198a <__fp_split3+0xe>
    19a6:	46 95       	lsr	r20
    19a8:	f1 df       	rcall	.-30     	; 0x198c <__fp_splitA>
    19aa:	08 c0       	rjmp	.+16     	; 0x19bc <__fp_splitA+0x30>
    19ac:	16 16       	cp	r1, r22
    19ae:	17 06       	cpc	r1, r23
    19b0:	18 06       	cpc	r1, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	f1 cf       	rjmp	.-30     	; 0x1998 <__fp_splitA+0xc>
    19b6:	86 95       	lsr	r24
    19b8:	71 05       	cpc	r23, r1
    19ba:	61 05       	cpc	r22, r1
    19bc:	08 94       	sec
    19be:	08 95       	ret

000019c0 <__fp_zero>:
    19c0:	e8 94       	clt

000019c2 <__fp_szero>:
    19c2:	bb 27       	eor	r27, r27
    19c4:	66 27       	eor	r22, r22
    19c6:	77 27       	eor	r23, r23
    19c8:	cb 01       	movw	r24, r22
    19ca:	97 f9       	bld	r25, 7
    19cc:	08 95       	ret

000019ce <__gesf2>:
    19ce:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__fp_cmp>
    19d2:	08 f4       	brcc	.+2      	; 0x19d6 <__gesf2+0x8>
    19d4:	8f ef       	ldi	r24, 0xFF	; 255
    19d6:	08 95       	ret

000019d8 <__mulsf3>:
    19d8:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__mulsf3x>
    19dc:	0c 94 ad 0c 	jmp	0x195a	; 0x195a <__fp_round>
    19e0:	0e 94 9f 0c 	call	0x193e	; 0x193e <__fp_pscA>
    19e4:	38 f0       	brcs	.+14     	; 0x19f4 <__mulsf3+0x1c>
    19e6:	0e 94 a6 0c 	call	0x194c	; 0x194c <__fp_pscB>
    19ea:	20 f0       	brcs	.+8      	; 0x19f4 <__mulsf3+0x1c>
    19ec:	95 23       	and	r25, r21
    19ee:	11 f0       	breq	.+4      	; 0x19f4 <__mulsf3+0x1c>
    19f0:	0c 94 96 0c 	jmp	0x192c	; 0x192c <__fp_inf>
    19f4:	0c 94 9c 0c 	jmp	0x1938	; 0x1938 <__fp_nan>
    19f8:	11 24       	eor	r1, r1
    19fa:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <__fp_szero>

000019fe <__mulsf3x>:
    19fe:	0e 94 be 0c 	call	0x197c	; 0x197c <__fp_split3>
    1a02:	70 f3       	brcs	.-36     	; 0x19e0 <__mulsf3+0x8>

00001a04 <__mulsf3_pse>:
    1a04:	95 9f       	mul	r25, r21
    1a06:	c1 f3       	breq	.-16     	; 0x19f8 <__mulsf3+0x20>
    1a08:	95 0f       	add	r25, r21
    1a0a:	50 e0       	ldi	r21, 0x00	; 0
    1a0c:	55 1f       	adc	r21, r21
    1a0e:	62 9f       	mul	r22, r18
    1a10:	f0 01       	movw	r30, r0
    1a12:	72 9f       	mul	r23, r18
    1a14:	bb 27       	eor	r27, r27
    1a16:	f0 0d       	add	r31, r0
    1a18:	b1 1d       	adc	r27, r1
    1a1a:	63 9f       	mul	r22, r19
    1a1c:	aa 27       	eor	r26, r26
    1a1e:	f0 0d       	add	r31, r0
    1a20:	b1 1d       	adc	r27, r1
    1a22:	aa 1f       	adc	r26, r26
    1a24:	64 9f       	mul	r22, r20
    1a26:	66 27       	eor	r22, r22
    1a28:	b0 0d       	add	r27, r0
    1a2a:	a1 1d       	adc	r26, r1
    1a2c:	66 1f       	adc	r22, r22
    1a2e:	82 9f       	mul	r24, r18
    1a30:	22 27       	eor	r18, r18
    1a32:	b0 0d       	add	r27, r0
    1a34:	a1 1d       	adc	r26, r1
    1a36:	62 1f       	adc	r22, r18
    1a38:	73 9f       	mul	r23, r19
    1a3a:	b0 0d       	add	r27, r0
    1a3c:	a1 1d       	adc	r26, r1
    1a3e:	62 1f       	adc	r22, r18
    1a40:	83 9f       	mul	r24, r19
    1a42:	a0 0d       	add	r26, r0
    1a44:	61 1d       	adc	r22, r1
    1a46:	22 1f       	adc	r18, r18
    1a48:	74 9f       	mul	r23, r20
    1a4a:	33 27       	eor	r19, r19
    1a4c:	a0 0d       	add	r26, r0
    1a4e:	61 1d       	adc	r22, r1
    1a50:	23 1f       	adc	r18, r19
    1a52:	84 9f       	mul	r24, r20
    1a54:	60 0d       	add	r22, r0
    1a56:	21 1d       	adc	r18, r1
    1a58:	82 2f       	mov	r24, r18
    1a5a:	76 2f       	mov	r23, r22
    1a5c:	6a 2f       	mov	r22, r26
    1a5e:	11 24       	eor	r1, r1
    1a60:	9f 57       	subi	r25, 0x7F	; 127
    1a62:	50 40       	sbci	r21, 0x00	; 0
    1a64:	9a f0       	brmi	.+38     	; 0x1a8c <__mulsf3_pse+0x88>
    1a66:	f1 f0       	breq	.+60     	; 0x1aa4 <__mulsf3_pse+0xa0>
    1a68:	88 23       	and	r24, r24
    1a6a:	4a f0       	brmi	.+18     	; 0x1a7e <__mulsf3_pse+0x7a>
    1a6c:	ee 0f       	add	r30, r30
    1a6e:	ff 1f       	adc	r31, r31
    1a70:	bb 1f       	adc	r27, r27
    1a72:	66 1f       	adc	r22, r22
    1a74:	77 1f       	adc	r23, r23
    1a76:	88 1f       	adc	r24, r24
    1a78:	91 50       	subi	r25, 0x01	; 1
    1a7a:	50 40       	sbci	r21, 0x00	; 0
    1a7c:	a9 f7       	brne	.-22     	; 0x1a68 <__mulsf3_pse+0x64>
    1a7e:	9e 3f       	cpi	r25, 0xFE	; 254
    1a80:	51 05       	cpc	r21, r1
    1a82:	80 f0       	brcs	.+32     	; 0x1aa4 <__mulsf3_pse+0xa0>
    1a84:	0c 94 96 0c 	jmp	0x192c	; 0x192c <__fp_inf>
    1a88:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <__fp_szero>
    1a8c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a8e:	e4 f3       	brlt	.-8      	; 0x1a88 <__mulsf3_pse+0x84>
    1a90:	98 3e       	cpi	r25, 0xE8	; 232
    1a92:	d4 f3       	brlt	.-12     	; 0x1a88 <__mulsf3_pse+0x84>
    1a94:	86 95       	lsr	r24
    1a96:	77 95       	ror	r23
    1a98:	67 95       	ror	r22
    1a9a:	b7 95       	ror	r27
    1a9c:	f7 95       	ror	r31
    1a9e:	e7 95       	ror	r30
    1aa0:	9f 5f       	subi	r25, 0xFF	; 255
    1aa2:	c1 f7       	brne	.-16     	; 0x1a94 <__mulsf3_pse+0x90>
    1aa4:	fe 2b       	or	r31, r30
    1aa6:	88 0f       	add	r24, r24
    1aa8:	91 1d       	adc	r25, r1
    1aaa:	96 95       	lsr	r25
    1aac:	87 95       	ror	r24
    1aae:	97 f9       	bld	r25, 7
    1ab0:	08 95       	ret

00001ab2 <__udivmodqi4>:
    1ab2:	99 1b       	sub	r25, r25
    1ab4:	79 e0       	ldi	r23, 0x09	; 9
    1ab6:	04 c0       	rjmp	.+8      	; 0x1ac0 <__udivmodqi4_ep>

00001ab8 <__udivmodqi4_loop>:
    1ab8:	99 1f       	adc	r25, r25
    1aba:	96 17       	cp	r25, r22
    1abc:	08 f0       	brcs	.+2      	; 0x1ac0 <__udivmodqi4_ep>
    1abe:	96 1b       	sub	r25, r22

00001ac0 <__udivmodqi4_ep>:
    1ac0:	88 1f       	adc	r24, r24
    1ac2:	7a 95       	dec	r23
    1ac4:	c9 f7       	brne	.-14     	; 0x1ab8 <__udivmodqi4_loop>
    1ac6:	80 95       	com	r24
    1ac8:	08 95       	ret

00001aca <__umulhisi3>:
    1aca:	a2 9f       	mul	r26, r18
    1acc:	b0 01       	movw	r22, r0
    1ace:	b3 9f       	mul	r27, r19
    1ad0:	c0 01       	movw	r24, r0
    1ad2:	a3 9f       	mul	r26, r19
    1ad4:	70 0d       	add	r23, r0
    1ad6:	81 1d       	adc	r24, r1
    1ad8:	11 24       	eor	r1, r1
    1ada:	91 1d       	adc	r25, r1
    1adc:	b2 9f       	mul	r27, r18
    1ade:	70 0d       	add	r23, r0
    1ae0:	81 1d       	adc	r24, r1
    1ae2:	11 24       	eor	r1, r1
    1ae4:	91 1d       	adc	r25, r1
    1ae6:	08 95       	ret

00001ae8 <_exit>:
    1ae8:	f8 94       	cli

00001aea <__stop_program>:
    1aea:	ff cf       	rjmp	.-2      	; 0x1aea <__stop_program>
