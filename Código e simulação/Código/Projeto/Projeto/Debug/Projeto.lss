
Projeto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ee  00800100  000021dc  00002270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000207  008001ee  008001ee  0000235e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000235e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000023d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014db  00000000  00000000  00002538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000962  00000000  00000000  00003a13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000112a  00000000  00000000  00004375  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000036c  00000000  00000000  000054a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057f  00000000  00000000  0000580c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000076a  00000000  00000000  00005d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000064f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
       4:	0c 94 af 04 	jmp	0x95e	; 0x95e <__vector_1>
       8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
       c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      14:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      38:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      48:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__vector_18>
      4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      54:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_21>
      58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <CHARSET>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	d8 e0       	ldi	r29, 0x08	; 8
     250:	de bf       	out	0x3e, r29	; 62
     252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
     254:	11 e0       	ldi	r17, 0x01	; 1
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	ec ed       	ldi	r30, 0xDC	; 220
     25c:	f1 e2       	ldi	r31, 0x21	; 33
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
     260:	05 90       	lpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	ae 3e       	cpi	r26, 0xEE	; 238
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
     26a:	23 e0       	ldi	r18, 0x03	; 3
     26c:	ae ee       	ldi	r26, 0xEE	; 238
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	a5 3f       	cpi	r26, 0xF5	; 245
     276:	b2 07       	cpc	r27, r18
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
     27a:	0e 94 a1 01 	call	0x342	; 0x342 <main>
     27e:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <_exit>

00000282 <__bad_interrupt>:
     282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <__vector_21>:
}
unsigned char USART_Receive(void)
{
	while(!(UCSR0A = 0b00100000));//espera o dado ser recebido
	return UDR0;// lê o dado e retorna 
}
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     28e:	0f 92       	push	r0
     290:	11 24       	eor	r1, r1
     292:	8f 93       	push	r24
     294:	9f 93       	push	r25
     296:	ef 93       	push	r30
     298:	ff 93       	push	r31
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
     2a2:	88 e7       	ldi	r24, 0x78	; 120
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	fc 01       	movw	r30, r24
     2a8:	80 81       	ld	r24, Z
     2aa:	91 81       	ldd	r25, Z+1	; 0x01
     2ac:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <__data_end+0x1>
     2b0:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <__data_end>
     2b4:	00 00       	nop
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	ff 91       	pop	r31
     2bc:	ef 91       	pop	r30
     2be:	9f 91       	pop	r25
     2c0:	8f 91       	pop	r24
     2c2:	0f 90       	pop	r0
     2c4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     2c8:	0f 90       	pop	r0
     2ca:	1f 90       	pop	r1
     2cc:	18 95       	reti

000002ce <USART_Init>:
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <USART_Init+0x6>
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
     2d8:	9a 83       	std	Y+2, r25	; 0x02
     2da:	89 83       	std	Y+1, r24	; 0x01
     2dc:	85 ec       	ldi	r24, 0xC5	; 197
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	29 81       	ldd	r18, Y+1	; 0x01
     2e2:	3a 81       	ldd	r19, Y+2	; 0x02
     2e4:	23 2f       	mov	r18, r19
     2e6:	33 27       	eor	r19, r19
     2e8:	fc 01       	movw	r30, r24
     2ea:	20 83       	st	Z, r18
     2ec:	84 ec       	ldi	r24, 0xC4	; 196
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	29 81       	ldd	r18, Y+1	; 0x01
     2f2:	fc 01       	movw	r30, r24
     2f4:	20 83       	st	Z, r18
     2f6:	81 ec       	ldi	r24, 0xC1	; 193
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	28 e9       	ldi	r18, 0x98	; 152
     2fc:	fc 01       	movw	r30, r24
     2fe:	20 83       	st	Z, r18
     300:	82 ec       	ldi	r24, 0xC2	; 194
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	2e e0       	ldi	r18, 0x0E	; 14
     306:	fc 01       	movw	r30, r24
     308:	20 83       	st	Z, r18
     30a:	00 00       	nop
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <USART_transmit>:
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	1f 92       	push	r1
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62
     320:	89 83       	std	Y+1, r24	; 0x01
     322:	00 00       	nop
     324:	80 ec       	ldi	r24, 0xC0	; 192
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	20 e2       	ldi	r18, 0x20	; 32
     32a:	fc 01       	movw	r30, r24
     32c:	20 83       	st	Z, r18
     32e:	86 ec       	ldi	r24, 0xC6	; 198
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	29 81       	ldd	r18, Y+1	; 0x01
     334:	fc 01       	movw	r30, r24
     336:	20 83       	st	Z, r18
     338:	00 00       	nop
     33a:	0f 90       	pop	r0
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	08 95       	ret

00000342 <main>:
int i = 0;
int test = 1;


int main(void)
{
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
     34a:	ac 97       	sbiw	r28, 0x2c	; 44
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	f8 94       	cli
     350:	de bf       	out	0x3e, r29	; 62
     352:	0f be       	out	0x3f, r0	; 63
     354:	cd bf       	out	0x3d, r28	; 61
	
	//Portas GPIO
	DDRD = 0b01000001; // todos os pinos da porta D como entrada, somente o 6 e o 0 como saida
     356:	8a e2       	ldi	r24, 0x2A	; 42
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	21 e4       	ldi	r18, 0x41	; 65
     35c:	fc 01       	movw	r30, r24
     35e:	20 83       	st	Z, r18
	DDRC = 0b01100001; // pinos 6 , 5 e 0 como saida
     360:	87 e2       	ldi	r24, 0x27	; 39
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	21 e6       	ldi	r18, 0x61	; 97
     366:	fc 01       	movw	r30, r24
     368:	20 83       	st	Z, r18
	PORTD= 0b00000100;// GPIO para interrupção Pino D2
     36a:	8b e2       	ldi	r24, 0x2B	; 43
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	24 e0       	ldi	r18, 0x04	; 4
     370:	fc 01       	movw	r30, r24
     372:	20 83       	st	Z, r18
	PORTC = 0x00; //todos com nivel baixo 
     374:	88 e2       	ldi	r24, 0x28	; 40
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	fc 01       	movw	r30, r24
     37a:	10 82       	st	Z, r1
	
	//configuração das interrupções
	EICRA = 0b00000010;	// configurando como borda de descida
     37c:	89 e6       	ldi	r24, 0x69	; 105
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	22 e0       	ldi	r18, 0x02	; 2
     382:	fc 01       	movw	r30, r24
     384:	20 83       	st	Z, r18
	EIMSK = 0b00000001; //habilita a interrupção extrena INT0 
     386:	8d e3       	ldi	r24, 0x3D	; 61
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	fc 01       	movw	r30, r24
     38e:	20 83       	st	Z, r18
	
	
	//modo PWM
	TCCR0A = 0b10100011; // habilita o Modo PWM rapido e modo nao invertido  nos pinos OC0A e OC0B
     390:	84 e4       	ldi	r24, 0x44	; 68
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	23 ea       	ldi	r18, 0xA3	; 163
     396:	fc 01       	movw	r30, r24
     398:	20 83       	st	Z, r18
	TCCR0B = 0b00000101;	//liga TC0, prescaler = 1024, fpwm =  16MHZ/(256*1024) = 61Hz
     39a:	85 e4       	ldi	r24, 0x45	; 69
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	25 e0       	ldi	r18, 0x05	; 5
     3a0:	fc 01       	movw	r30, r24
     3a2:	20 83       	st	Z, r18
	OCR0A = 0; // controle do ciclo ativo do PWM OC0A(PD6)Duty = 200/256 = 78%
     3a4:	87 e4       	ldi	r24, 0x47	; 71
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	fc 01       	movw	r30, r24
     3aa:	10 82       	st	Z, r1
	
	//configurando o ADC
	ADMUX = 0b01000000;// tensao interna de ref(5.0v)
     3ac:	8c e7       	ldi	r24, 0x7C	; 124
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	20 e4       	ldi	r18, 0x40	; 64
     3b2:	fc 01       	movw	r30, r24
     3b4:	20 83       	st	Z, r18
	ADCSRA = 0b11101111;//habilita o AD, interrupção, conversao, prescaler 128
     3b6:	8a e7       	ldi	r24, 0x7A	; 122
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	2f ee       	ldi	r18, 0xEF	; 239
     3bc:	fc 01       	movw	r30, r24
     3be:	20 83       	st	Z, r18
	ADCSRB = 0x00;// conversão continua
     3c0:	8b e7       	ldi	r24, 0x7B	; 123
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	fc 01       	movw	r30, r24
     3c6:	10 82       	st	Z, r1
	DIDR0 = 0b00111110;// habilita o PC0 como entrada do ADC0
     3c8:	8e e7       	ldi	r24, 0x7E	; 126
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	2e e3       	ldi	r18, 0x3E	; 62
     3ce:	fc 01       	movw	r30, r24
     3d0:	20 83       	st	Z, r18
	
	sei();//Habilita interrupção Global 
     3d2:	78 94       	sei
	
	USART_Init(MYUBRR);// Inicializa o protocolo USART
     3d4:	87 e6       	ldi	r24, 0x67	; 103
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 67 01 	call	0x2ce	; 0x2ce <USART_Init>
   
   
    while (1) 
    {
		// LImpar o display apos as interrupções e atualiza
		if (test == 1)
     3dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	51 f4       	brne	.+20     	; 0x3fc <main+0xba>
		{
			nokia_lcd_init();
     3e8:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nokia_lcd_init>
			nokia_lcd_clear();
     3ec:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <nokia_lcd_clear>
			nokia_lcd_render();
     3f0:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <nokia_lcd_render>
			test = 0;
     3f4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3f8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		//Calculo do sensor LM35 Vout = 0.01 * T 10mV -> 1ºC
		
		Celsius = (((leitura_ADC/1023.0)*5))/0.01; 
     3fc:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <__data_end>
     400:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <__data_end+0x1>
     404:	cc 01       	movw	r24, r24
     406:	a0 e0       	ldi	r26, 0x00	; 0
     408:	b0 e0       	ldi	r27, 0x00	; 0
     40a:	bc 01       	movw	r22, r24
     40c:	cd 01       	movw	r24, r26
     40e:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__floatunsisf>
     412:	dc 01       	movw	r26, r24
     414:	cb 01       	movw	r24, r22
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	30 ec       	ldi	r19, 0xC0	; 192
     41a:	4f e7       	ldi	r20, 0x7F	; 127
     41c:	54 e4       	ldi	r21, 0x44	; 68
     41e:	bc 01       	movw	r22, r24
     420:	cd 01       	movw	r24, r26
     422:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__divsf3>
     426:	dc 01       	movw	r26, r24
     428:	cb 01       	movw	r24, r22
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	40 ea       	ldi	r20, 0xA0	; 160
     430:	50 e4       	ldi	r21, 0x40	; 64
     432:	bc 01       	movw	r22, r24
     434:	cd 01       	movw	r24, r26
     436:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
     43a:	dc 01       	movw	r26, r24
     43c:	cb 01       	movw	r24, r22
     43e:	2a e0       	ldi	r18, 0x0A	; 10
     440:	37 ed       	ldi	r19, 0xD7	; 215
     442:	43 e2       	ldi	r20, 0x23	; 35
     444:	5c e3       	ldi	r21, 0x3C	; 60
     446:	bc 01       	movw	r22, r24
     448:	cd 01       	movw	r24, r26
     44a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__divsf3>
     44e:	dc 01       	movw	r26, r24
     450:	cb 01       	movw	r24, r22
     452:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <Celsius>
     456:	90 93 f2 03 	sts	0x03F2, r25	; 0x8003f2 <Celsius+0x1>
     45a:	a0 93 f3 03 	sts	0x03F3, r26	; 0x8003f3 <Celsius+0x2>
     45e:	b0 93 f4 03 	sts	0x03F4, r27	; 0x8003f4 <Celsius+0x3>
		
		//Gravando na memoria EEPROM
		if (Celsius >= 80)
     462:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <Celsius>
     466:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <Celsius+0x1>
     46a:	a0 91 f3 03 	lds	r26, 0x03F3	; 0x8003f3 <Celsius+0x2>
     46e:	b0 91 f4 03 	lds	r27, 0x03F4	; 0x8003f4 <Celsius+0x3>
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	40 ea       	ldi	r20, 0xA0	; 160
     478:	52 e4       	ldi	r21, 0x42	; 66
     47a:	bc 01       	movw	r22, r24
     47c:	cd 01       	movw	r24, r26
     47e:	0e 94 2e 10 	call	0x205c	; 0x205c <__gesf2>
     482:	88 23       	and	r24, r24
     484:	0c f4       	brge	.+2      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     486:	c3 c0       	rjmp	.+390    	; 0x60e <__EEPROM_REGION_LENGTH__+0x20e>
		{
			int critico;

			critico = Celsius ;
     488:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <Celsius>
     48c:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <Celsius+0x1>
     490:	a0 91 f3 03 	lds	r26, 0x03F3	; 0x8003f3 <Celsius+0x2>
     494:	b0 91 f4 03 	lds	r27, 0x03F4	; 0x8003f4 <Celsius+0x3>
     498:	bc 01       	movw	r22, r24
     49a:	cd 01       	movw	r24, r26
     49c:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__fixsfsi>
     4a0:	dc 01       	movw	r26, r24
     4a2:	cb 01       	movw	r24, r22
     4a4:	9a 83       	std	Y+2, r25	; 0x02
     4a6:	89 83       	std	Y+1, r24	; 0x01
			eeprom_write_float (( float *) 20, critico);// escreve na EEPROM no endereço 20
     4a8:	89 81       	ldd	r24, Y+1	; 0x01
     4aa:	9a 81       	ldd	r25, Y+2	; 0x02
     4ac:	09 2e       	mov	r0, r25
     4ae:	00 0c       	add	r0, r0
     4b0:	aa 0b       	sbc	r26, r26
     4b2:	bb 0b       	sbc	r27, r27
     4b4:	bc 01       	movw	r22, r24
     4b6:	cd 01       	movw	r24, r26
     4b8:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__floatsisf>
     4bc:	dc 01       	movw	r26, r24
     4be:	cb 01       	movw	r24, r22
     4c0:	ac 01       	movw	r20, r24
     4c2:	bd 01       	movw	r22, r26
     4c4:	84 e1       	ldi	r24, 0x14	; 20
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 c1 10 	call	0x2182	; 0x2182 <eeprom_write_dword>
			critico =eeprom_read_float(( float *) 20);// Lê na EEPROM no endereço 20
     4cc:	84 e1       	ldi	r24, 0x14	; 20
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 bb 10 	call	0x2176	; 0x2176 <eeprom_read_dword>
     4d4:	dc 01       	movw	r26, r24
     4d6:	cb 01       	movw	r24, r22
     4d8:	bc 01       	movw	r22, r24
     4da:	cd 01       	movw	r24, r26
     4dc:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__fixsfsi>
     4e0:	dc 01       	movw	r26, r24
     4e2:	cb 01       	movw	r24, r22
     4e4:	9a 83       	std	Y+2, r25	; 0x02
     4e6:	89 83       	std	Y+1, r24	; 0x01
			
			//Mostra no display o valor da variavel critica a ser analisada 
			nokia_lcd_clear();
     4e8:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <nokia_lcd_clear>
			int_to_str(critico, leitura_ADC_string);
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	9a 81       	ldd	r25, Y+2	; 0x02
     4f0:	6c ee       	ldi	r22, 0xEC	; 236
     4f2:	73 e0       	ldi	r23, 0x03	; 3
     4f4:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <int_to_str>
			nokia_lcd_write_string(leitura_ADC_string, 1);
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	8c ee       	ldi	r24, 0xEC	; 236
     4fc:	93 e0       	ldi	r25, 0x03	; 3
     4fe:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
			nokia_lcd_write_string(" C",1);
     502:	61 e0       	ldi	r22, 0x01	; 1
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 10);
     50c:	6a e0       	ldi	r22, 0x0A	; 10
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Variavel Critica armaz. ",1);
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	85 e0       	ldi	r24, 0x05	; 5
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 20);
     51e:	64 e1       	ldi	r22, 0x14	; 20
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
			nokia_lcd_render();
     526:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <nokia_lcd_render>
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e8       	ldi	r25, 0x80	; 128
     52e:	ab e3       	ldi	r26, 0x3B	; 59
     530:	b5 e4       	ldi	r27, 0x45	; 69
     532:	8b 87       	std	Y+11, r24	; 0x0b
     534:	9c 87       	std	Y+12, r25	; 0x0c
     536:	ad 87       	std	Y+13, r26	; 0x0d
     538:	be 87       	std	Y+14, r27	; 0x0e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	4a e7       	ldi	r20, 0x7A	; 122
     540:	55 e4       	ldi	r21, 0x45	; 69
     542:	6b 85       	ldd	r22, Y+11	; 0x0b
     544:	7c 85       	ldd	r23, Y+12	; 0x0c
     546:	8d 85       	ldd	r24, Y+13	; 0x0d
     548:	9e 85       	ldd	r25, Y+14	; 0x0e
     54a:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
     54e:	dc 01       	movw	r26, r24
     550:	cb 01       	movw	r24, r22
     552:	8f 87       	std	Y+15, r24	; 0x0f
     554:	98 8b       	std	Y+16, r25	; 0x10
     556:	a9 8b       	std	Y+17, r26	; 0x11
     558:	ba 8b       	std	Y+18, r27	; 0x12
	if (__tmp < 1.0)
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	40 e8       	ldi	r20, 0x80	; 128
     560:	5f e3       	ldi	r21, 0x3F	; 63
     562:	6f 85       	ldd	r22, Y+15	; 0x0f
     564:	78 89       	ldd	r23, Y+16	; 0x10
     566:	89 89       	ldd	r24, Y+17	; 0x11
     568:	9a 89       	ldd	r25, Y+18	; 0x12
     56a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__cmpsf2>
     56e:	88 23       	and	r24, r24
     570:	2c f4       	brge	.+10     	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
		__ticks = 1;
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	9c 8b       	std	Y+20, r25	; 0x14
     578:	8b 8b       	std	Y+19, r24	; 0x13
     57a:	3f c0       	rjmp	.+126    	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
	else if (__tmp > 65535)
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	3f ef       	ldi	r19, 0xFF	; 255
     580:	4f e7       	ldi	r20, 0x7F	; 127
     582:	57 e4       	ldi	r21, 0x47	; 71
     584:	6f 85       	ldd	r22, Y+15	; 0x0f
     586:	78 89       	ldd	r23, Y+16	; 0x10
     588:	89 89       	ldd	r24, Y+17	; 0x11
     58a:	9a 89       	ldd	r25, Y+18	; 0x12
     58c:	0e 94 2e 10 	call	0x205c	; 0x205c <__gesf2>
     590:	18 16       	cp	r1, r24
     592:	4c f5       	brge	.+82     	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	40 e2       	ldi	r20, 0x20	; 32
     59a:	51 e4       	ldi	r21, 0x41	; 65
     59c:	6b 85       	ldd	r22, Y+11	; 0x0b
     59e:	7c 85       	ldd	r23, Y+12	; 0x0c
     5a0:	8d 85       	ldd	r24, Y+13	; 0x0d
     5a2:	9e 85       	ldd	r25, Y+14	; 0x0e
     5a4:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
     5a8:	dc 01       	movw	r26, r24
     5aa:	cb 01       	movw	r24, r22
     5ac:	bc 01       	movw	r22, r24
     5ae:	cd 01       	movw	r24, r26
     5b0:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
     5b4:	dc 01       	movw	r26, r24
     5b6:	cb 01       	movw	r24, r22
     5b8:	9c 8b       	std	Y+20, r25	; 0x14
     5ba:	8b 8b       	std	Y+19, r24	; 0x13
     5bc:	0f c0       	rjmp	.+30     	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
     5be:	80 e9       	ldi	r24, 0x90	; 144
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	9e 8b       	std	Y+22, r25	; 0x16
     5c4:	8d 8b       	std	Y+21, r24	; 0x15
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5c6:	8d 89       	ldd	r24, Y+21	; 0x15
     5c8:	9e 89       	ldd	r25, Y+22	; 0x16
     5ca:	01 97       	sbiw	r24, 0x01	; 1
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
     5ce:	9e 8b       	std	Y+22, r25	; 0x16
     5d0:	8d 8b       	std	Y+21, r24	; 0x15
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5d2:	8b 89       	ldd	r24, Y+19	; 0x13
     5d4:	9c 89       	ldd	r25, Y+20	; 0x14
     5d6:	01 97       	sbiw	r24, 0x01	; 1
     5d8:	9c 8b       	std	Y+20, r25	; 0x14
     5da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5dc:	8b 89       	ldd	r24, Y+19	; 0x13
     5de:	9c 89       	ldd	r25, Y+20	; 0x14
     5e0:	89 2b       	or	r24, r25
     5e2:	69 f7       	brne	.-38     	; 0x5be <__EEPROM_REGION_LENGTH__+0x1be>
     5e4:	14 c0       	rjmp	.+40     	; 0x60e <__EEPROM_REGION_LENGTH__+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5e6:	6f 85       	ldd	r22, Y+15	; 0x0f
     5e8:	78 89       	ldd	r23, Y+16	; 0x10
     5ea:	89 89       	ldd	r24, Y+17	; 0x11
     5ec:	9a 89       	ldd	r25, Y+18	; 0x12
     5ee:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
     5f2:	dc 01       	movw	r26, r24
     5f4:	cb 01       	movw	r24, r22
     5f6:	9c 8b       	std	Y+20, r25	; 0x14
     5f8:	8b 8b       	std	Y+19, r24	; 0x13
     5fa:	8b 89       	ldd	r24, Y+19	; 0x13
     5fc:	9c 89       	ldd	r25, Y+20	; 0x14
     5fe:	98 8f       	std	Y+24, r25	; 0x18
     600:	8f 8b       	std	Y+23, r24	; 0x17
     602:	8f 89       	ldd	r24, Y+23	; 0x17
     604:	98 8d       	ldd	r25, Y+24	; 0x18
     606:	01 97       	sbiw	r24, 0x01	; 1
     608:	f1 f7       	brne	.-4      	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
     60a:	98 8f       	std	Y+24, r25	; 0x18
     60c:	8f 8b       	std	Y+23, r24	; 0x17
			_delay_ms(3000);
		}
		
		
		// monitoramento da temperatura em tempo real 
		nokia_lcd_clear();
     60e:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <nokia_lcd_clear>
		int_to_str(Celsius, leitura_ADC_string);
     612:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <Celsius>
     616:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <Celsius+0x1>
     61a:	a0 91 f3 03 	lds	r26, 0x03F3	; 0x8003f3 <Celsius+0x2>
     61e:	b0 91 f4 03 	lds	r27, 0x03F4	; 0x8003f4 <Celsius+0x3>
     622:	bc 01       	movw	r22, r24
     624:	cd 01       	movw	r24, r26
     626:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
     62a:	dc 01       	movw	r26, r24
     62c:	cb 01       	movw	r24, r22
     62e:	6c ee       	ldi	r22, 0xEC	; 236
     630:	73 e0       	ldi	r23, 0x03	; 3
     632:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <int_to_str>
		nokia_lcd_write_string("Monitoramento ",1);
     636:	61 e0       	ldi	r22, 0x01	; 1
     638:	8e e1       	ldi	r24, 0x1E	; 30
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 10);
     640:	6a e0       	ldi	r22, 0x0A	; 10
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("*------------*", 1);
     648:	61 e0       	ldi	r22, 0x01	; 1
     64a:	8d e2       	ldi	r24, 0x2D	; 45
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 20);
     652:	64 e1       	ldi	r22, 0x14	; 20
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Temperatura: ",1);
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	8c e3       	ldi	r24, 0x3C	; 60
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 30);
     664:	6e e1       	ldi	r22, 0x1E	; 30
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
		nokia_lcd_write_string(leitura_ADC_string, 1);
     66c:	61 e0       	ldi	r22, 0x01	; 1
     66e:	8c ee       	ldi	r24, 0xEC	; 236
     670:	93 e0       	ldi	r25, 0x03	; 3
     672:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
		nokia_lcd_write_string(" C",1);
     676:	61 e0       	ldi	r22, 0x01	; 1
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 30);
     680:	6e e1       	ldi	r22, 0x1E	; 30
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
		nokia_lcd_render();
     688:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <nokia_lcd_render>
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	aa e7       	ldi	r26, 0x7A	; 122
     692:	b4 e4       	ldi	r27, 0x44	; 68
     694:	8b 83       	std	Y+3, r24	; 0x03
     696:	9c 83       	std	Y+4, r25	; 0x04
     698:	ad 83       	std	Y+5, r26	; 0x05
     69a:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	4a e7       	ldi	r20, 0x7A	; 122
     6a2:	55 e4       	ldi	r21, 0x45	; 69
     6a4:	6b 81       	ldd	r22, Y+3	; 0x03
     6a6:	7c 81       	ldd	r23, Y+4	; 0x04
     6a8:	8d 81       	ldd	r24, Y+5	; 0x05
     6aa:	9e 81       	ldd	r25, Y+6	; 0x06
     6ac:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
     6b0:	dc 01       	movw	r26, r24
     6b2:	cb 01       	movw	r24, r22
     6b4:	89 8f       	std	Y+25, r24	; 0x19
     6b6:	9a 8f       	std	Y+26, r25	; 0x1a
     6b8:	ab 8f       	std	Y+27, r26	; 0x1b
     6ba:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	40 e8       	ldi	r20, 0x80	; 128
     6c2:	5f e3       	ldi	r21, 0x3F	; 63
     6c4:	69 8d       	ldd	r22, Y+25	; 0x19
     6c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     6c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     6cc:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__cmpsf2>
     6d0:	88 23       	and	r24, r24
     6d2:	2c f4       	brge	.+10     	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
		__ticks = 1;
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	9e 8f       	std	Y+30, r25	; 0x1e
     6da:	8d 8f       	std	Y+29, r24	; 0x1d
     6dc:	3f c0       	rjmp	.+126    	; 0x75c <__EEPROM_REGION_LENGTH__+0x35c>
	else if (__tmp > 65535)
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	3f ef       	ldi	r19, 0xFF	; 255
     6e2:	4f e7       	ldi	r20, 0x7F	; 127
     6e4:	57 e4       	ldi	r21, 0x47	; 71
     6e6:	69 8d       	ldd	r22, Y+25	; 0x19
     6e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     6ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
     6ee:	0e 94 2e 10 	call	0x205c	; 0x205c <__gesf2>
     6f2:	18 16       	cp	r1, r24
     6f4:	4c f5       	brge	.+82     	; 0x748 <__EEPROM_REGION_LENGTH__+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	40 e2       	ldi	r20, 0x20	; 32
     6fc:	51 e4       	ldi	r21, 0x41	; 65
     6fe:	6b 81       	ldd	r22, Y+3	; 0x03
     700:	7c 81       	ldd	r23, Y+4	; 0x04
     702:	8d 81       	ldd	r24, Y+5	; 0x05
     704:	9e 81       	ldd	r25, Y+6	; 0x06
     706:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
     70a:	dc 01       	movw	r26, r24
     70c:	cb 01       	movw	r24, r22
     70e:	bc 01       	movw	r22, r24
     710:	cd 01       	movw	r24, r26
     712:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
     716:	dc 01       	movw	r26, r24
     718:	cb 01       	movw	r24, r22
     71a:	9e 8f       	std	Y+30, r25	; 0x1e
     71c:	8d 8f       	std	Y+29, r24	; 0x1d
     71e:	0f c0       	rjmp	.+30     	; 0x73e <__EEPROM_REGION_LENGTH__+0x33e>
     720:	80 e9       	ldi	r24, 0x90	; 144
     722:	91 e0       	ldi	r25, 0x01	; 1
     724:	98 a3       	std	Y+32, r25	; 0x20
     726:	8f 8f       	std	Y+31, r24	; 0x1f
     728:	8f 8d       	ldd	r24, Y+31	; 0x1f
     72a:	98 a1       	ldd	r25, Y+32	; 0x20
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <__EEPROM_REGION_LENGTH__+0x32c>
     730:	98 a3       	std	Y+32, r25	; 0x20
     732:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     734:	8d 8d       	ldd	r24, Y+29	; 0x1d
     736:	9e 8d       	ldd	r25, Y+30	; 0x1e
     738:	01 97       	sbiw	r24, 0x01	; 1
     73a:	9e 8f       	std	Y+30, r25	; 0x1e
     73c:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     73e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     740:	9e 8d       	ldd	r25, Y+30	; 0x1e
     742:	89 2b       	or	r24, r25
     744:	69 f7       	brne	.-38     	; 0x720 <__EEPROM_REGION_LENGTH__+0x320>
     746:	14 c0       	rjmp	.+40     	; 0x770 <__EEPROM_REGION_LENGTH__+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     748:	69 8d       	ldd	r22, Y+25	; 0x19
     74a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     74c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     74e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     750:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
     754:	dc 01       	movw	r26, r24
     756:	cb 01       	movw	r24, r22
     758:	9e 8f       	std	Y+30, r25	; 0x1e
     75a:	8d 8f       	std	Y+29, r24	; 0x1d
     75c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     75e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     760:	9a a3       	std	Y+34, r25	; 0x22
     762:	89 a3       	std	Y+33, r24	; 0x21
     764:	89 a1       	ldd	r24, Y+33	; 0x21
     766:	9a a1       	ldd	r25, Y+34	; 0x22
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	f1 f7       	brne	.-4      	; 0x768 <__EEPROM_REGION_LENGTH__+0x368>
     76c:	9a a3       	std	Y+34, r25	; 0x22
     76e:	89 a3       	std	Y+33, r24	; 0x21
		_delay_ms(1000);
		
		//condição de acionamento do motor 
		if (Celsius <=50)
     770:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <Celsius>
     774:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <Celsius+0x1>
     778:	a0 91 f3 03 	lds	r26, 0x03F3	; 0x8003f3 <Celsius+0x2>
     77c:	b0 91 f4 03 	lds	r27, 0x03F4	; 0x8003f4 <Celsius+0x3>
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	48 e4       	ldi	r20, 0x48	; 72
     786:	52 e4       	ldi	r21, 0x42	; 66
     788:	bc 01       	movw	r22, r24
     78a:	cd 01       	movw	r24, r26
     78c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__cmpsf2>
     790:	18 16       	cp	r1, r24
     792:	2c f0       	brlt	.+10     	; 0x79e <__EEPROM_REGION_LENGTH__+0x39e>
		{
			PORTC = 0b00000000; // desliga o motor 
     794:	88 e2       	ldi	r24, 0x28	; 40
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	fc 01       	movw	r30, r24
     79a:	10 82       	st	Z, r1
     79c:	1f ce       	rjmp	.-962    	; 0x3dc <main+0x9a>
			
		}
		
		else
		{
			PORTC = 0b00100000; //  liga o motor e monstra no display uma flag de alerta para o motor em movimento 
     79e:	88 e2       	ldi	r24, 0x28	; 40
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	20 e2       	ldi	r18, 0x20	; 32
     7a4:	fc 01       	movw	r30, r24
     7a6:	20 83       	st	Z, r18
			  nokia_lcd_set_cursor(0, 40);
     7a8:	68 e2       	ldi	r22, 0x28	; 40
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
			  nokia_lcd_write_string("              ",1);
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	8a e4       	ldi	r24, 0x4A	; 74
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
			  nokia_lcd_set_cursor(0, 40);
     7ba:	68 e2       	ldi	r22, 0x28	; 40
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
			  nokia_lcd_write_string("motor ativo ",1);
     7c2:	61 e0       	ldi	r22, 0x01	; 1
     7c4:	89 e5       	ldi	r24, 0x59	; 89
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
			  nokia_lcd_render();
     7cc:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <nokia_lcd_render>
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e4       	ldi	r25, 0x40	; 64
     7d4:	ac e9       	ldi	r26, 0x9C	; 156
     7d6:	b5 e4       	ldi	r27, 0x45	; 69
     7d8:	8f 83       	std	Y+7, r24	; 0x07
     7da:	98 87       	std	Y+8, r25	; 0x08
     7dc:	a9 87       	std	Y+9, r26	; 0x09
     7de:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	4a e7       	ldi	r20, 0x7A	; 122
     7e6:	55 e4       	ldi	r21, 0x45	; 69
     7e8:	6f 81       	ldd	r22, Y+7	; 0x07
     7ea:	78 85       	ldd	r23, Y+8	; 0x08
     7ec:	89 85       	ldd	r24, Y+9	; 0x09
     7ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     7f0:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
     7f4:	dc 01       	movw	r26, r24
     7f6:	cb 01       	movw	r24, r22
     7f8:	8b a3       	std	Y+35, r24	; 0x23
     7fa:	9c a3       	std	Y+36, r25	; 0x24
     7fc:	ad a3       	std	Y+37, r26	; 0x25
     7fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	40 e8       	ldi	r20, 0x80	; 128
     806:	5f e3       	ldi	r21, 0x3F	; 63
     808:	6b a1       	ldd	r22, Y+35	; 0x23
     80a:	7c a1       	ldd	r23, Y+36	; 0x24
     80c:	8d a1       	ldd	r24, Y+37	; 0x25
     80e:	9e a1       	ldd	r25, Y+38	; 0x26
     810:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__cmpsf2>
     814:	88 23       	and	r24, r24
     816:	2c f4       	brge	.+10     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		__ticks = 1;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	98 a7       	std	Y+40, r25	; 0x28
     81e:	8f a3       	std	Y+39, r24	; 0x27
     820:	3f c0       	rjmp	.+126    	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
	else if (__tmp > 65535)
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	3f ef       	ldi	r19, 0xFF	; 255
     826:	4f e7       	ldi	r20, 0x7F	; 127
     828:	57 e4       	ldi	r21, 0x47	; 71
     82a:	6b a1       	ldd	r22, Y+35	; 0x23
     82c:	7c a1       	ldd	r23, Y+36	; 0x24
     82e:	8d a1       	ldd	r24, Y+37	; 0x25
     830:	9e a1       	ldd	r25, Y+38	; 0x26
     832:	0e 94 2e 10 	call	0x205c	; 0x205c <__gesf2>
     836:	18 16       	cp	r1, r24
     838:	4c f5       	brge	.+82     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	40 e2       	ldi	r20, 0x20	; 32
     840:	51 e4       	ldi	r21, 0x41	; 65
     842:	6f 81       	ldd	r22, Y+7	; 0x07
     844:	78 85       	ldd	r23, Y+8	; 0x08
     846:	89 85       	ldd	r24, Y+9	; 0x09
     848:	9a 85       	ldd	r25, Y+10	; 0x0a
     84a:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
     84e:	dc 01       	movw	r26, r24
     850:	cb 01       	movw	r24, r22
     852:	bc 01       	movw	r22, r24
     854:	cd 01       	movw	r24, r26
     856:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
     85a:	dc 01       	movw	r26, r24
     85c:	cb 01       	movw	r24, r22
     85e:	98 a7       	std	Y+40, r25	; 0x28
     860:	8f a3       	std	Y+39, r24	; 0x27
     862:	0f c0       	rjmp	.+30     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
     864:	80 e9       	ldi	r24, 0x90	; 144
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	9a a7       	std	Y+42, r25	; 0x2a
     86a:	89 a7       	std	Y+41, r24	; 0x29
     86c:	89 a5       	ldd	r24, Y+41	; 0x29
     86e:	9a a5       	ldd	r25, Y+42	; 0x2a
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	f1 f7       	brne	.-4      	; 0x870 <__DATA_REGION_LENGTH__+0x70>
     874:	9a a7       	std	Y+42, r25	; 0x2a
     876:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     878:	8f a1       	ldd	r24, Y+39	; 0x27
     87a:	98 a5       	ldd	r25, Y+40	; 0x28
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	98 a7       	std	Y+40, r25	; 0x28
     880:	8f a3       	std	Y+39, r24	; 0x27
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     882:	8f a1       	ldd	r24, Y+39	; 0x27
     884:	98 a5       	ldd	r25, Y+40	; 0x28
     886:	89 2b       	or	r24, r25
     888:	69 f7       	brne	.-38     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
     88a:	14 c0       	rjmp	.+40     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     88c:	6b a1       	ldd	r22, Y+35	; 0x23
     88e:	7c a1       	ldd	r23, Y+36	; 0x24
     890:	8d a1       	ldd	r24, Y+37	; 0x25
     892:	9e a1       	ldd	r25, Y+38	; 0x26
     894:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
     898:	dc 01       	movw	r26, r24
     89a:	cb 01       	movw	r24, r22
     89c:	98 a7       	std	Y+40, r25	; 0x28
     89e:	8f a3       	std	Y+39, r24	; 0x27
     8a0:	8f a1       	ldd	r24, Y+39	; 0x27
     8a2:	98 a5       	ldd	r25, Y+40	; 0x28
     8a4:	9c a7       	std	Y+44, r25	; 0x2c
     8a6:	8b a7       	std	Y+43, r24	; 0x2b
     8a8:	8b a5       	ldd	r24, Y+43	; 0x2b
     8aa:	9c a5       	ldd	r25, Y+44	; 0x2c
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
     8b0:	9c a7       	std	Y+44, r25	; 0x2c
     8b2:	8b a7       	std	Y+43, r24	; 0x2b
			  _delay_ms(5000);
		}	
		
    }
     8b4:	93 cd       	rjmp	.-1242   	; 0x3dc <main+0x9a>

000008b6 <int_to_str>:
}

//Função para o display 
void int_to_str(uint16_t s, unsigned char *d)
{
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	00 d0       	rcall	.+0      	; 0x8bc <int_to_str+0x6>
     8bc:	00 d0       	rcall	.+0      	; 0x8be <int_to_str+0x8>
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <int_to_str+0xa>
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	9c 83       	std	Y+4, r25	; 0x04
     8c6:	8b 83       	std	Y+3, r24	; 0x03
     8c8:	7e 83       	std	Y+6, r23	; 0x06
     8ca:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t n = tam_vetor - 2;
     8cc:	83 e0       	ldi	r24, 0x03	; 3
     8ce:	8a 83       	std	Y+2, r24	; 0x02

	for (int8_t i = n; i >= 0; i--)
     8d0:	8a 81       	ldd	r24, Y+2	; 0x02
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	37 c0       	rjmp	.+110    	; 0x944 <__stack+0x45>
	{
		d[i]=s%10+48;
     8d6:	89 81       	ldd	r24, Y+1	; 0x01
     8d8:	08 2e       	mov	r0, r24
     8da:	00 0c       	add	r0, r0
     8dc:	99 0b       	sbc	r25, r25
     8de:	2d 81       	ldd	r18, Y+5	; 0x05
     8e0:	3e 81       	ldd	r19, Y+6	; 0x06
     8e2:	f9 01       	movw	r30, r18
     8e4:	e8 0f       	add	r30, r24
     8e6:	f9 1f       	adc	r31, r25
     8e8:	4b 81       	ldd	r20, Y+3	; 0x03
     8ea:	5c 81       	ldd	r21, Y+4	; 0x04
     8ec:	9a 01       	movw	r18, r20
     8ee:	ad ec       	ldi	r26, 0xCD	; 205
     8f0:	bc ec       	ldi	r27, 0xCC	; 204
     8f2:	0e 94 ac 10 	call	0x2158	; 0x2158 <__umulhisi3>
     8f6:	96 95       	lsr	r25
     8f8:	87 95       	ror	r24
     8fa:	96 95       	lsr	r25
     8fc:	87 95       	ror	r24
     8fe:	96 95       	lsr	r25
     900:	87 95       	ror	r24
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	9c 01       	movw	r18, r24
     908:	22 0f       	add	r18, r18
     90a:	33 1f       	adc	r19, r19
     90c:	22 0f       	add	r18, r18
     90e:	33 1f       	adc	r19, r19
     910:	82 0f       	add	r24, r18
     912:	93 1f       	adc	r25, r19
     914:	9a 01       	movw	r18, r20
     916:	28 1b       	sub	r18, r24
     918:	39 0b       	sbc	r19, r25
     91a:	c9 01       	movw	r24, r18
     91c:	80 5d       	subi	r24, 0xD0	; 208
     91e:	80 83       	st	Z, r24
		s/=10;
     920:	8b 81       	ldd	r24, Y+3	; 0x03
     922:	9c 81       	ldd	r25, Y+4	; 0x04
     924:	9c 01       	movw	r18, r24
     926:	ad ec       	ldi	r26, 0xCD	; 205
     928:	bc ec       	ldi	r27, 0xCC	; 204
     92a:	0e 94 ac 10 	call	0x2158	; 0x2158 <__umulhisi3>
     92e:	96 95       	lsr	r25
     930:	87 95       	ror	r24
     932:	96 95       	lsr	r25
     934:	87 95       	ror	r24
     936:	96 95       	lsr	r25
     938:	87 95       	ror	r24
     93a:	9c 83       	std	Y+4, r25	; 0x04
     93c:	8b 83       	std	Y+3, r24	; 0x03
//Função para o display 
void int_to_str(uint16_t s, unsigned char *d)
{
	uint8_t n = tam_vetor - 2;

	for (int8_t i = n; i >= 0; i--)
     93e:	89 81       	ldd	r24, Y+1	; 0x01
     940:	81 50       	subi	r24, 0x01	; 1
     942:	89 83       	std	Y+1, r24	; 0x01
     944:	89 81       	ldd	r24, Y+1	; 0x01
     946:	88 23       	and	r24, r24
     948:	34 f6       	brge	.-116    	; 0x8d6 <int_to_str+0x20>
	{
		d[i]=s%10+48;
		s/=10;
	}
}
     94a:	00 00       	nop
     94c:	26 96       	adiw	r28, 0x06	; 6
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	f8 94       	cli
     952:	de bf       	out	0x3e, r29	; 62
     954:	0f be       	out	0x3f, r0	; 63
     956:	cd bf       	out	0x3d, r28	; 61
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <__vector_1>:


ISR(INT0_vect) //Sensor de presença
{
     95e:	1f 92       	push	r1
     960:	0f 92       	push	r0
     962:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     966:	0f 92       	push	r0
     968:	11 24       	eor	r1, r1
     96a:	2f 93       	push	r18
     96c:	3f 93       	push	r19
     96e:	4f 93       	push	r20
     970:	5f 93       	push	r21
     972:	6f 93       	push	r22
     974:	7f 93       	push	r23
     976:	8f 93       	push	r24
     978:	9f 93       	push	r25
     97a:	af 93       	push	r26
     97c:	bf 93       	push	r27
     97e:	ef 93       	push	r30
     980:	ff 93       	push	r31
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	2e 97       	sbiw	r28, 0x0e	; 14
     98c:	de bf       	out	0x3e, r29	; 62
     98e:	cd bf       	out	0x3d, r28	; 61
	// mostra no display uma mensagem de saudação apos o sensor detectar presença  
	nokia_lcd_init();
     990:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nokia_lcd_init>
	nokia_lcd_clear();
     994:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <nokia_lcd_clear>
	nokia_lcd_write_string("Seja bem vindo",1);
     998:	61 e0       	ldi	r22, 0x01	; 1
     99a:	86 e6       	ldi	r24, 0x66	; 102
     99c:	91 e0       	ldi	r25, 0x01	; 1
     99e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 10);
     9a2:	6a e0       	ldi	r22, 0x0A	; 10
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
	nokia_lcd_render();
     9aa:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <nokia_lcd_render>
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	aa ef       	ldi	r26, 0xFA	; 250
     9b4:	b4 e4       	ldi	r27, 0x44	; 68
     9b6:	89 83       	std	Y+1, r24	; 0x01
     9b8:	9a 83       	std	Y+2, r25	; 0x02
     9ba:	ab 83       	std	Y+3, r26	; 0x03
     9bc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	4a e7       	ldi	r20, 0x7A	; 122
     9c4:	55 e4       	ldi	r21, 0x45	; 69
     9c6:	69 81       	ldd	r22, Y+1	; 0x01
     9c8:	7a 81       	ldd	r23, Y+2	; 0x02
     9ca:	8b 81       	ldd	r24, Y+3	; 0x03
     9cc:	9c 81       	ldd	r25, Y+4	; 0x04
     9ce:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
     9d2:	dc 01       	movw	r26, r24
     9d4:	cb 01       	movw	r24, r22
     9d6:	8d 83       	std	Y+5, r24	; 0x05
     9d8:	9e 83       	std	Y+6, r25	; 0x06
     9da:	af 83       	std	Y+7, r26	; 0x07
     9dc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	40 e8       	ldi	r20, 0x80	; 128
     9e4:	5f e3       	ldi	r21, 0x3F	; 63
     9e6:	6d 81       	ldd	r22, Y+5	; 0x05
     9e8:	7e 81       	ldd	r23, Y+6	; 0x06
     9ea:	8f 81       	ldd	r24, Y+7	; 0x07
     9ec:	98 85       	ldd	r25, Y+8	; 0x08
     9ee:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__cmpsf2>
     9f2:	88 23       	and	r24, r24
     9f4:	2c f4       	brge	.+10     	; 0xa00 <__vector_1+0xa2>
		__ticks = 1;
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	9a 87       	std	Y+10, r25	; 0x0a
     9fc:	89 87       	std	Y+9, r24	; 0x09
     9fe:	3f c0       	rjmp	.+126    	; 0xa7e <__vector_1+0x120>
	else if (__tmp > 65535)
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	3f ef       	ldi	r19, 0xFF	; 255
     a04:	4f e7       	ldi	r20, 0x7F	; 127
     a06:	57 e4       	ldi	r21, 0x47	; 71
     a08:	6d 81       	ldd	r22, Y+5	; 0x05
     a0a:	7e 81       	ldd	r23, Y+6	; 0x06
     a0c:	8f 81       	ldd	r24, Y+7	; 0x07
     a0e:	98 85       	ldd	r25, Y+8	; 0x08
     a10:	0e 94 2e 10 	call	0x205c	; 0x205c <__gesf2>
     a14:	18 16       	cp	r1, r24
     a16:	4c f5       	brge	.+82     	; 0xa6a <__vector_1+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	40 e2       	ldi	r20, 0x20	; 32
     a1e:	51 e4       	ldi	r21, 0x41	; 65
     a20:	69 81       	ldd	r22, Y+1	; 0x01
     a22:	7a 81       	ldd	r23, Y+2	; 0x02
     a24:	8b 81       	ldd	r24, Y+3	; 0x03
     a26:	9c 81       	ldd	r25, Y+4	; 0x04
     a28:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
     a2c:	dc 01       	movw	r26, r24
     a2e:	cb 01       	movw	r24, r22
     a30:	bc 01       	movw	r22, r24
     a32:	cd 01       	movw	r24, r26
     a34:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
     a38:	dc 01       	movw	r26, r24
     a3a:	cb 01       	movw	r24, r22
     a3c:	9a 87       	std	Y+10, r25	; 0x0a
     a3e:	89 87       	std	Y+9, r24	; 0x09
     a40:	0f c0       	rjmp	.+30     	; 0xa60 <__vector_1+0x102>
     a42:	80 e9       	ldi	r24, 0x90	; 144
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	9c 87       	std	Y+12, r25	; 0x0c
     a48:	8b 87       	std	Y+11, r24	; 0x0b
     a4a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a4c:	9c 85       	ldd	r25, Y+12	; 0x0c
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	f1 f7       	brne	.-4      	; 0xa4e <__vector_1+0xf0>
     a52:	9c 87       	std	Y+12, r25	; 0x0c
     a54:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a56:	89 85       	ldd	r24, Y+9	; 0x09
     a58:	9a 85       	ldd	r25, Y+10	; 0x0a
     a5a:	01 97       	sbiw	r24, 0x01	; 1
     a5c:	9a 87       	std	Y+10, r25	; 0x0a
     a5e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a60:	89 85       	ldd	r24, Y+9	; 0x09
     a62:	9a 85       	ldd	r25, Y+10	; 0x0a
     a64:	89 2b       	or	r24, r25
     a66:	69 f7       	brne	.-38     	; 0xa42 <__vector_1+0xe4>
     a68:	14 c0       	rjmp	.+40     	; 0xa92 <__vector_1+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a6a:	6d 81       	ldd	r22, Y+5	; 0x05
     a6c:	7e 81       	ldd	r23, Y+6	; 0x06
     a6e:	8f 81       	ldd	r24, Y+7	; 0x07
     a70:	98 85       	ldd	r25, Y+8	; 0x08
     a72:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
     a76:	dc 01       	movw	r26, r24
     a78:	cb 01       	movw	r24, r22
     a7a:	9a 87       	std	Y+10, r25	; 0x0a
     a7c:	89 87       	std	Y+9, r24	; 0x09
     a7e:	89 85       	ldd	r24, Y+9	; 0x09
     a80:	9a 85       	ldd	r25, Y+10	; 0x0a
     a82:	9e 87       	std	Y+14, r25	; 0x0e
     a84:	8d 87       	std	Y+13, r24	; 0x0d
     a86:	8d 85       	ldd	r24, Y+13	; 0x0d
     a88:	9e 85       	ldd	r25, Y+14	; 0x0e
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	f1 f7       	brne	.-4      	; 0xa8a <__vector_1+0x12c>
     a8e:	9e 87       	std	Y+14, r25	; 0x0e
     a90:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(2000);
	test = 1;
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a9a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
     a9e:	00 00       	nop
     aa0:	2e 96       	adiw	r28, 0x0e	; 14
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	de bf       	out	0x3e, r29	; 62
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	cd bf       	out	0x3d, r28	; 61
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	ff 91       	pop	r31
     ab2:	ef 91       	pop	r30
     ab4:	bf 91       	pop	r27
     ab6:	af 91       	pop	r26
     ab8:	9f 91       	pop	r25
     aba:	8f 91       	pop	r24
     abc:	7f 91       	pop	r23
     abe:	6f 91       	pop	r22
     ac0:	5f 91       	pop	r21
     ac2:	4f 91       	pop	r20
     ac4:	3f 91       	pop	r19
     ac6:	2f 91       	pop	r18
     ac8:	0f 90       	pop	r0
     aca:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     ace:	0f 90       	pop	r0
     ad0:	1f 90       	pop	r1
     ad2:	18 95       	reti

00000ad4 <__vector_18>:

//Protocolo Usart para definição de luminosidade da lampada
ISR(USART_RX_vect)
{
     ad4:	1f 92       	push	r1
     ad6:	0f 92       	push	r0
     ad8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     adc:	0f 92       	push	r0
     ade:	11 24       	eor	r1, r1
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	2f 93       	push	r18
     ae6:	3f 93       	push	r19
     ae8:	4f 93       	push	r20
     aea:	5f 93       	push	r21
     aec:	6f 93       	push	r22
     aee:	7f 93       	push	r23
     af0:	8f 93       	push	r24
     af2:	9f 93       	push	r25
     af4:	af 93       	push	r26
     af6:	bf 93       	push	r27
     af8:	ef 93       	push	r30
     afa:	ff 93       	push	r31
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	cd b7       	in	r28, 0x3d	; 61
     b02:	de b7       	in	r29, 0x3e	; 62
     b04:	c3 56       	subi	r28, 0x63	; 99
     b06:	d1 09       	sbc	r29, r1
     b08:	de bf       	out	0x3e, r29	; 62
     b0a:	cd bf       	out	0x3d, r28	; 61
		char recebido;
		recebido = UDR0; // variavel q ira receber os comandos do seriam monitor 
     b0c:	86 ec       	ldi	r24, 0xC6	; 198
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	fc 01       	movw	r30, r24
     b12:	80 81       	ld	r24, Z
     b14:	89 83       	std	Y+1, r24	; 0x01
		
		if (recebido == 'l')// recebe l para ligar o Led da sala de maquinas
     b16:	89 81       	ldd	r24, Y+1	; 0x01
     b18:	8c 36       	cpi	r24, 0x6C	; 108
     b1a:	09 f0       	breq	.+2      	; 0xb1e <__vector_18+0x4a>
     b1c:	99 c0       	rjmp	.+306    	; 0xc50 <__vector_18+0x17c>
		{
			PORTD |= (1 << PD0);
     b1e:	8b e2       	ldi	r24, 0x2B	; 43
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	2b e2       	ldi	r18, 0x2B	; 43
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	f9 01       	movw	r30, r18
     b28:	20 81       	ld	r18, Z
     b2a:	21 60       	ori	r18, 0x01	; 1
     b2c:	fc 01       	movw	r30, r24
     b2e:	20 83       	st	Z, r18
			
			nokia_lcd_init();
     b30:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nokia_lcd_init>
			nokia_lcd_clear();
     b34:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <nokia_lcd_clear>
			nokia_lcd_write_string("Lamp. Maq:",1);
     b38:	61 e0       	ldi	r22, 0x01	; 1
     b3a:	85 e7       	ldi	r24, 0x75	; 117
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 10);
     b42:	6a e0       	ldi	r22, 0x0A	; 10
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("ligada",1);
     b4a:	61 e0       	ldi	r22, 0x01	; 1
     b4c:	80 e8       	ldi	r24, 0x80	; 128
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 20);
     b54:	64 e1       	ldi	r22, 0x14	; 20
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
			nokia_lcd_render();
     b5c:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <nokia_lcd_render>
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	aa ef       	ldi	r26, 0xFA	; 250
     b66:	b4 e4       	ldi	r27, 0x44	; 68
     b68:	8a 8f       	std	Y+26, r24	; 0x1a
     b6a:	9b 8f       	std	Y+27, r25	; 0x1b
     b6c:	ac 8f       	std	Y+28, r26	; 0x1c
     b6e:	bd 8f       	std	Y+29, r27	; 0x1d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	4a e7       	ldi	r20, 0x7A	; 122
     b76:	55 e4       	ldi	r21, 0x45	; 69
     b78:	6a 8d       	ldd	r22, Y+26	; 0x1a
     b7a:	7b 8d       	ldd	r23, Y+27	; 0x1b
     b7c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b7e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     b80:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
     b84:	dc 01       	movw	r26, r24
     b86:	cb 01       	movw	r24, r22
     b88:	8e 8f       	std	Y+30, r24	; 0x1e
     b8a:	9f 8f       	std	Y+31, r25	; 0x1f
     b8c:	a8 a3       	std	Y+32, r26	; 0x20
     b8e:	b9 a3       	std	Y+33, r27	; 0x21
	if (__tmp < 1.0)
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	40 e8       	ldi	r20, 0x80	; 128
     b96:	5f e3       	ldi	r21, 0x3F	; 63
     b98:	6e 8d       	ldd	r22, Y+30	; 0x1e
     b9a:	7f 8d       	ldd	r23, Y+31	; 0x1f
     b9c:	88 a1       	ldd	r24, Y+32	; 0x20
     b9e:	99 a1       	ldd	r25, Y+33	; 0x21
     ba0:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__cmpsf2>
     ba4:	88 23       	and	r24, r24
     ba6:	2c f4       	brge	.+10     	; 0xbb2 <__vector_18+0xde>
		__ticks = 1;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	9b a3       	std	Y+35, r25	; 0x23
     bae:	8a a3       	std	Y+34, r24	; 0x22
     bb0:	3f c0       	rjmp	.+126    	; 0xc30 <__vector_18+0x15c>
	else if (__tmp > 65535)
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	3f ef       	ldi	r19, 0xFF	; 255
     bb6:	4f e7       	ldi	r20, 0x7F	; 127
     bb8:	57 e4       	ldi	r21, 0x47	; 71
     bba:	6e 8d       	ldd	r22, Y+30	; 0x1e
     bbc:	7f 8d       	ldd	r23, Y+31	; 0x1f
     bbe:	88 a1       	ldd	r24, Y+32	; 0x20
     bc0:	99 a1       	ldd	r25, Y+33	; 0x21
     bc2:	0e 94 2e 10 	call	0x205c	; 0x205c <__gesf2>
     bc6:	18 16       	cp	r1, r24
     bc8:	4c f5       	brge	.+82     	; 0xc1c <__vector_18+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	40 e2       	ldi	r20, 0x20	; 32
     bd0:	51 e4       	ldi	r21, 0x41	; 65
     bd2:	6a 8d       	ldd	r22, Y+26	; 0x1a
     bd4:	7b 8d       	ldd	r23, Y+27	; 0x1b
     bd6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     bd8:	9d 8d       	ldd	r25, Y+29	; 0x1d
     bda:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	bc 01       	movw	r22, r24
     be4:	cd 01       	movw	r24, r26
     be6:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
     bea:	dc 01       	movw	r26, r24
     bec:	cb 01       	movw	r24, r22
     bee:	9b a3       	std	Y+35, r25	; 0x23
     bf0:	8a a3       	std	Y+34, r24	; 0x22
     bf2:	0f c0       	rjmp	.+30     	; 0xc12 <__vector_18+0x13e>
     bf4:	80 e9       	ldi	r24, 0x90	; 144
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	9d a3       	std	Y+37, r25	; 0x25
     bfa:	8c a3       	std	Y+36, r24	; 0x24
     bfc:	8c a1       	ldd	r24, Y+36	; 0x24
     bfe:	9d a1       	ldd	r25, Y+37	; 0x25
     c00:	01 97       	sbiw	r24, 0x01	; 1
     c02:	f1 f7       	brne	.-4      	; 0xc00 <__vector_18+0x12c>
     c04:	9d a3       	std	Y+37, r25	; 0x25
     c06:	8c a3       	std	Y+36, r24	; 0x24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c08:	8a a1       	ldd	r24, Y+34	; 0x22
     c0a:	9b a1       	ldd	r25, Y+35	; 0x23
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	9b a3       	std	Y+35, r25	; 0x23
     c10:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c12:	8a a1       	ldd	r24, Y+34	; 0x22
     c14:	9b a1       	ldd	r25, Y+35	; 0x23
     c16:	89 2b       	or	r24, r25
     c18:	69 f7       	brne	.-38     	; 0xbf4 <__vector_18+0x120>
     c1a:	14 c0       	rjmp	.+40     	; 0xc44 <__vector_18+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c1c:	6e 8d       	ldd	r22, Y+30	; 0x1e
     c1e:	7f 8d       	ldd	r23, Y+31	; 0x1f
     c20:	88 a1       	ldd	r24, Y+32	; 0x20
     c22:	99 a1       	ldd	r25, Y+33	; 0x21
     c24:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
     c28:	dc 01       	movw	r26, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	9b a3       	std	Y+35, r25	; 0x23
     c2e:	8a a3       	std	Y+34, r24	; 0x22
     c30:	8a a1       	ldd	r24, Y+34	; 0x22
     c32:	9b a1       	ldd	r25, Y+35	; 0x23
     c34:	9f a3       	std	Y+39, r25	; 0x27
     c36:	8e a3       	std	Y+38, r24	; 0x26
     c38:	8e a1       	ldd	r24, Y+38	; 0x26
     c3a:	9f a1       	ldd	r25, Y+39	; 0x27
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	f1 f7       	brne	.-4      	; 0xc3c <__vector_18+0x168>
     c40:	9f a3       	std	Y+39, r25	; 0x27
     c42:	8e a3       	std	Y+38, r24	; 0x26
			_delay_ms(2000);
			test = 1;
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c4c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		if (recebido == 'd')//recebe d para desligar o Led da sala de maquinas
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	84 36       	cpi	r24, 0x64	; 100
     c54:	09 f0       	breq	.+2      	; 0xc58 <__vector_18+0x184>
     c56:	99 c0       	rjmp	.+306    	; 0xd8a <__vector_18+0x2b6>
		{
			PORTD &= ~(1 << PD0);
     c58:	8b e2       	ldi	r24, 0x2B	; 43
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	2b e2       	ldi	r18, 0x2B	; 43
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	f9 01       	movw	r30, r18
     c62:	20 81       	ld	r18, Z
     c64:	2e 7f       	andi	r18, 0xFE	; 254
     c66:	fc 01       	movw	r30, r24
     c68:	20 83       	st	Z, r18
			nokia_lcd_init();
     c6a:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nokia_lcd_init>
			nokia_lcd_clear();
     c6e:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <nokia_lcd_clear>
			nokia_lcd_write_string("Lamp. Maq:",1);
     c72:	61 e0       	ldi	r22, 0x01	; 1
     c74:	85 e7       	ldi	r24, 0x75	; 117
     c76:	91 e0       	ldi	r25, 0x01	; 1
     c78:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 10);
     c7c:	6a e0       	ldi	r22, 0x0A	; 10
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("desligada",1);
     c84:	61 e0       	ldi	r22, 0x01	; 1
     c86:	87 e8       	ldi	r24, 0x87	; 135
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 20);
     c8e:	64 e1       	ldi	r22, 0x14	; 20
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
			nokia_lcd_render();
     c96:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <nokia_lcd_render>
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	aa ef       	ldi	r26, 0xFA	; 250
     ca0:	b4 e4       	ldi	r27, 0x44	; 68
     ca2:	8a 83       	std	Y+2, r24	; 0x02
     ca4:	9b 83       	std	Y+3, r25	; 0x03
     ca6:	ac 83       	std	Y+4, r26	; 0x04
     ca8:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	4a e7       	ldi	r20, 0x7A	; 122
     cb0:	55 e4       	ldi	r21, 0x45	; 69
     cb2:	6a 81       	ldd	r22, Y+2	; 0x02
     cb4:	7b 81       	ldd	r23, Y+3	; 0x03
     cb6:	8c 81       	ldd	r24, Y+4	; 0x04
     cb8:	9d 81       	ldd	r25, Y+5	; 0x05
     cba:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
     cbe:	dc 01       	movw	r26, r24
     cc0:	cb 01       	movw	r24, r22
     cc2:	88 a7       	std	Y+40, r24	; 0x28
     cc4:	99 a7       	std	Y+41, r25	; 0x29
     cc6:	aa a7       	std	Y+42, r26	; 0x2a
     cc8:	bb a7       	std	Y+43, r27	; 0x2b
	if (__tmp < 1.0)
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 e8       	ldi	r20, 0x80	; 128
     cd0:	5f e3       	ldi	r21, 0x3F	; 63
     cd2:	68 a5       	ldd	r22, Y+40	; 0x28
     cd4:	79 a5       	ldd	r23, Y+41	; 0x29
     cd6:	8a a5       	ldd	r24, Y+42	; 0x2a
     cd8:	9b a5       	ldd	r25, Y+43	; 0x2b
     cda:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__cmpsf2>
     cde:	88 23       	and	r24, r24
     ce0:	2c f4       	brge	.+10     	; 0xcec <__vector_18+0x218>
		__ticks = 1;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	9d a7       	std	Y+45, r25	; 0x2d
     ce8:	8c a7       	std	Y+44, r24	; 0x2c
     cea:	3f c0       	rjmp	.+126    	; 0xd6a <__vector_18+0x296>
	else if (__tmp > 65535)
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	3f ef       	ldi	r19, 0xFF	; 255
     cf0:	4f e7       	ldi	r20, 0x7F	; 127
     cf2:	57 e4       	ldi	r21, 0x47	; 71
     cf4:	68 a5       	ldd	r22, Y+40	; 0x28
     cf6:	79 a5       	ldd	r23, Y+41	; 0x29
     cf8:	8a a5       	ldd	r24, Y+42	; 0x2a
     cfa:	9b a5       	ldd	r25, Y+43	; 0x2b
     cfc:	0e 94 2e 10 	call	0x205c	; 0x205c <__gesf2>
     d00:	18 16       	cp	r1, r24
     d02:	4c f5       	brge	.+82     	; 0xd56 <__vector_18+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e2       	ldi	r20, 0x20	; 32
     d0a:	51 e4       	ldi	r21, 0x41	; 65
     d0c:	6a 81       	ldd	r22, Y+2	; 0x02
     d0e:	7b 81       	ldd	r23, Y+3	; 0x03
     d10:	8c 81       	ldd	r24, Y+4	; 0x04
     d12:	9d 81       	ldd	r25, Y+5	; 0x05
     d14:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
     d18:	dc 01       	movw	r26, r24
     d1a:	cb 01       	movw	r24, r22
     d1c:	bc 01       	movw	r22, r24
     d1e:	cd 01       	movw	r24, r26
     d20:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	9d a7       	std	Y+45, r25	; 0x2d
     d2a:	8c a7       	std	Y+44, r24	; 0x2c
     d2c:	0f c0       	rjmp	.+30     	; 0xd4c <__vector_18+0x278>
     d2e:	80 e9       	ldi	r24, 0x90	; 144
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	9f a7       	std	Y+47, r25	; 0x2f
     d34:	8e a7       	std	Y+46, r24	; 0x2e
     d36:	8e a5       	ldd	r24, Y+46	; 0x2e
     d38:	9f a5       	ldd	r25, Y+47	; 0x2f
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <__vector_18+0x266>
     d3e:	9f a7       	std	Y+47, r25	; 0x2f
     d40:	8e a7       	std	Y+46, r24	; 0x2e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d42:	8c a5       	ldd	r24, Y+44	; 0x2c
     d44:	9d a5       	ldd	r25, Y+45	; 0x2d
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	9d a7       	std	Y+45, r25	; 0x2d
     d4a:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d4c:	8c a5       	ldd	r24, Y+44	; 0x2c
     d4e:	9d a5       	ldd	r25, Y+45	; 0x2d
     d50:	89 2b       	or	r24, r25
     d52:	69 f7       	brne	.-38     	; 0xd2e <__vector_18+0x25a>
     d54:	14 c0       	rjmp	.+40     	; 0xd7e <__vector_18+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d56:	68 a5       	ldd	r22, Y+40	; 0x28
     d58:	79 a5       	ldd	r23, Y+41	; 0x29
     d5a:	8a a5       	ldd	r24, Y+42	; 0x2a
     d5c:	9b a5       	ldd	r25, Y+43	; 0x2b
     d5e:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	9d a7       	std	Y+45, r25	; 0x2d
     d68:	8c a7       	std	Y+44, r24	; 0x2c
     d6a:	8c a5       	ldd	r24, Y+44	; 0x2c
     d6c:	9d a5       	ldd	r25, Y+45	; 0x2d
     d6e:	99 ab       	std	Y+49, r25	; 0x31
     d70:	88 ab       	std	Y+48, r24	; 0x30
     d72:	88 a9       	ldd	r24, Y+48	; 0x30
     d74:	99 a9       	ldd	r25, Y+49	; 0x31
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	f1 f7       	brne	.-4      	; 0xd76 <__vector_18+0x2a2>
     d7a:	99 ab       	std	Y+49, r25	; 0x31
     d7c:	88 ab       	std	Y+48, r24	; 0x30
			_delay_ms(2000);
			test=1;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d86:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		if(recebido == '0')// recebe 0 para desligar o LED
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	80 33       	cpi	r24, 0x30	; 48
     d8e:	09 f0       	breq	.+2      	; 0xd92 <__vector_18+0x2be>
     d90:	a1 c0       	rjmp	.+322    	; 0xed4 <__vector_18+0x400>
		{
			 i = 0;
     d92:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <i+0x1>
     d96:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <i>
			 OCR0A = i *60;
     d9a:	87 e4       	ldi	r24, 0x47	; 71
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <i>
     da2:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <i+0x1>
     da6:	32 2f       	mov	r19, r18
     da8:	2c e3       	ldi	r18, 0x3C	; 60
     daa:	32 9f       	mul	r19, r18
     dac:	20 2d       	mov	r18, r0
     dae:	11 24       	eor	r1, r1
     db0:	fc 01       	movw	r30, r24
     db2:	20 83       	st	Z, r18
			 nokia_lcd_init();
     db4:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nokia_lcd_init>
			 nokia_lcd_clear();
     db8:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <nokia_lcd_clear>
			 nokia_lcd_write_string("Lamp. desligada",1);
     dbc:	61 e0       	ldi	r22, 0x01	; 1
     dbe:	81 e9       	ldi	r24, 0x91	; 145
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
     dc6:	6a e0       	ldi	r22, 0x0A	; 10
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
			 nokia_lcd_write_string("Porcent:0%",1);
     dce:	61 e0       	ldi	r22, 0x01	; 1
     dd0:	81 ea       	ldi	r24, 0xA1	; 161
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
     dd8:	6a e0       	ldi	r22, 0x0A	; 10
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
			 nokia_lcd_render();
     de0:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <nokia_lcd_render>
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	aa ef       	ldi	r26, 0xFA	; 250
     dea:	b4 e4       	ldi	r27, 0x44	; 68
     dec:	8e 83       	std	Y+6, r24	; 0x06
     dee:	9f 83       	std	Y+7, r25	; 0x07
     df0:	a8 87       	std	Y+8, r26	; 0x08
     df2:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	4a e7       	ldi	r20, 0x7A	; 122
     dfa:	55 e4       	ldi	r21, 0x45	; 69
     dfc:	6e 81       	ldd	r22, Y+6	; 0x06
     dfe:	7f 81       	ldd	r23, Y+7	; 0x07
     e00:	88 85       	ldd	r24, Y+8	; 0x08
     e02:	99 85       	ldd	r25, Y+9	; 0x09
     e04:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	8a ab       	std	Y+50, r24	; 0x32
     e0e:	9b ab       	std	Y+51, r25	; 0x33
     e10:	ac ab       	std	Y+52, r26	; 0x34
     e12:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	40 e8       	ldi	r20, 0x80	; 128
     e1a:	5f e3       	ldi	r21, 0x3F	; 63
     e1c:	6a a9       	ldd	r22, Y+50	; 0x32
     e1e:	7b a9       	ldd	r23, Y+51	; 0x33
     e20:	8c a9       	ldd	r24, Y+52	; 0x34
     e22:	9d a9       	ldd	r25, Y+53	; 0x35
     e24:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__cmpsf2>
     e28:	88 23       	and	r24, r24
     e2a:	2c f4       	brge	.+10     	; 0xe36 <__vector_18+0x362>
		__ticks = 1;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	9f ab       	std	Y+55, r25	; 0x37
     e32:	8e ab       	std	Y+54, r24	; 0x36
     e34:	3f c0       	rjmp	.+126    	; 0xeb4 <__vector_18+0x3e0>
	else if (__tmp > 65535)
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	3f ef       	ldi	r19, 0xFF	; 255
     e3a:	4f e7       	ldi	r20, 0x7F	; 127
     e3c:	57 e4       	ldi	r21, 0x47	; 71
     e3e:	6a a9       	ldd	r22, Y+50	; 0x32
     e40:	7b a9       	ldd	r23, Y+51	; 0x33
     e42:	8c a9       	ldd	r24, Y+52	; 0x34
     e44:	9d a9       	ldd	r25, Y+53	; 0x35
     e46:	0e 94 2e 10 	call	0x205c	; 0x205c <__gesf2>
     e4a:	18 16       	cp	r1, r24
     e4c:	4c f5       	brge	.+82     	; 0xea0 <__vector_18+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e2       	ldi	r20, 0x20	; 32
     e54:	51 e4       	ldi	r21, 0x41	; 65
     e56:	6e 81       	ldd	r22, Y+6	; 0x06
     e58:	7f 81       	ldd	r23, Y+7	; 0x07
     e5a:	88 85       	ldd	r24, Y+8	; 0x08
     e5c:	99 85       	ldd	r25, Y+9	; 0x09
     e5e:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	bc 01       	movw	r22, r24
     e68:	cd 01       	movw	r24, r26
     e6a:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	9f ab       	std	Y+55, r25	; 0x37
     e74:	8e ab       	std	Y+54, r24	; 0x36
     e76:	0f c0       	rjmp	.+30     	; 0xe96 <__vector_18+0x3c2>
     e78:	80 e9       	ldi	r24, 0x90	; 144
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	99 af       	std	Y+57, r25	; 0x39
     e7e:	88 af       	std	Y+56, r24	; 0x38
     e80:	88 ad       	ldd	r24, Y+56	; 0x38
     e82:	99 ad       	ldd	r25, Y+57	; 0x39
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	f1 f7       	brne	.-4      	; 0xe84 <__vector_18+0x3b0>
     e88:	99 af       	std	Y+57, r25	; 0x39
     e8a:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e8c:	8e a9       	ldd	r24, Y+54	; 0x36
     e8e:	9f a9       	ldd	r25, Y+55	; 0x37
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	9f ab       	std	Y+55, r25	; 0x37
     e94:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e96:	8e a9       	ldd	r24, Y+54	; 0x36
     e98:	9f a9       	ldd	r25, Y+55	; 0x37
     e9a:	89 2b       	or	r24, r25
     e9c:	69 f7       	brne	.-38     	; 0xe78 <__vector_18+0x3a4>
     e9e:	14 c0       	rjmp	.+40     	; 0xec8 <__vector_18+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea0:	6a a9       	ldd	r22, Y+50	; 0x32
     ea2:	7b a9       	ldd	r23, Y+51	; 0x33
     ea4:	8c a9       	ldd	r24, Y+52	; 0x34
     ea6:	9d a9       	ldd	r25, Y+53	; 0x35
     ea8:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	9f ab       	std	Y+55, r25	; 0x37
     eb2:	8e ab       	std	Y+54, r24	; 0x36
     eb4:	8e a9       	ldd	r24, Y+54	; 0x36
     eb6:	9f a9       	ldd	r25, Y+55	; 0x37
     eb8:	9b af       	std	Y+59, r25	; 0x3b
     eba:	8a af       	std	Y+58, r24	; 0x3a
     ebc:	8a ad       	ldd	r24, Y+58	; 0x3a
     ebe:	9b ad       	ldd	r25, Y+59	; 0x3b
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	f1 f7       	brne	.-4      	; 0xec0 <__vector_18+0x3ec>
     ec4:	9b af       	std	Y+59, r25	; 0x3b
     ec6:	8a af       	std	Y+58, r24	; 0x3a
			 _delay_ms(2000);
			 test=1;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ed0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			
		}
		
		if(recebido == '1')// recebe 1 para ligar o LED com 25% de luminosidade
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	81 33       	cpi	r24, 0x31	; 49
     ed8:	09 f0       	breq	.+2      	; 0xedc <__vector_18+0x408>
     eda:	d9 c0       	rjmp	.+434    	; 0x108e <__vector_18+0x5ba>
		{
			 i = 1;
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <i+0x1>
     ee4:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <i>
			 OCR0A = i *60;
     ee8:	87 e4       	ldi	r24, 0x47	; 71
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <i>
     ef0:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <i+0x1>
     ef4:	32 2f       	mov	r19, r18
     ef6:	2c e3       	ldi	r18, 0x3C	; 60
     ef8:	32 9f       	mul	r19, r18
     efa:	20 2d       	mov	r18, r0
     efc:	11 24       	eor	r1, r1
     efe:	fc 01       	movw	r30, r24
     f00:	20 83       	st	Z, r18
			 nokia_lcd_init();
     f02:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nokia_lcd_init>
			 nokia_lcd_clear();
     f06:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <nokia_lcd_clear>
			 nokia_lcd_write_string("Lamp: ligada",1);
     f0a:	61 e0       	ldi	r22, 0x01	; 1
     f0c:	8c ea       	ldi	r24, 0xAC	; 172
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
     f14:	6a e0       	ldi	r22, 0x0A	; 10
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
			 nokia_lcd_write_string("Porcent:25%",1);
     f1c:	61 e0       	ldi	r22, 0x01	; 1
     f1e:	89 eb       	ldi	r24, 0xB9	; 185
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
     f26:	6a e0       	ldi	r22, 0x0A	; 10
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
			 nokia_lcd_render();
     f2e:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <nokia_lcd_render>
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	aa ef       	ldi	r26, 0xFA	; 250
     f38:	b4 e4       	ldi	r27, 0x44	; 68
     f3a:	8a 87       	std	Y+10, r24	; 0x0a
     f3c:	9b 87       	std	Y+11, r25	; 0x0b
     f3e:	ac 87       	std	Y+12, r26	; 0x0c
     f40:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	4a e7       	ldi	r20, 0x7A	; 122
     f48:	55 e4       	ldi	r21, 0x45	; 69
     f4a:	6a 85       	ldd	r22, Y+10	; 0x0a
     f4c:	7b 85       	ldd	r23, Y+11	; 0x0b
     f4e:	8c 85       	ldd	r24, Y+12	; 0x0c
     f50:	9d 85       	ldd	r25, Y+13	; 0x0d
     f52:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	8c af       	std	Y+60, r24	; 0x3c
     f5c:	9d af       	std	Y+61, r25	; 0x3d
     f5e:	ae af       	std	Y+62, r26	; 0x3e
     f60:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	40 e8       	ldi	r20, 0x80	; 128
     f68:	5f e3       	ldi	r21, 0x3F	; 63
     f6a:	6c ad       	ldd	r22, Y+60	; 0x3c
     f6c:	7d ad       	ldd	r23, Y+61	; 0x3d
     f6e:	8e ad       	ldd	r24, Y+62	; 0x3e
     f70:	9f ad       	ldd	r25, Y+63	; 0x3f
     f72:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__cmpsf2>
     f76:	88 23       	and	r24, r24
     f78:	4c f4       	brge	.+18     	; 0xf8c <__vector_18+0x4b8>
		__ticks = 1;
     f7a:	ce 01       	movw	r24, r28
     f7c:	80 5c       	subi	r24, 0xC0	; 192
     f7e:	9f 4f       	sbci	r25, 0xFF	; 255
     f80:	21 e0       	ldi	r18, 0x01	; 1
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	fc 01       	movw	r30, r24
     f86:	31 83       	std	Z+1, r19	; 0x01
     f88:	20 83       	st	Z, r18
     f8a:	61 c0       	rjmp	.+194    	; 0x104e <__vector_18+0x57a>
	else if (__tmp > 65535)
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	3f ef       	ldi	r19, 0xFF	; 255
     f90:	4f e7       	ldi	r20, 0x7F	; 127
     f92:	57 e4       	ldi	r21, 0x47	; 71
     f94:	6c ad       	ldd	r22, Y+60	; 0x3c
     f96:	7d ad       	ldd	r23, Y+61	; 0x3d
     f98:	8e ad       	ldd	r24, Y+62	; 0x3e
     f9a:	9f ad       	ldd	r25, Y+63	; 0x3f
     f9c:	0e 94 2e 10 	call	0x205c	; 0x205c <__gesf2>
     fa0:	18 16       	cp	r1, r24
     fa2:	0c f0       	brlt	.+2      	; 0xfa6 <__vector_18+0x4d2>
     fa4:	46 c0       	rjmp	.+140    	; 0x1032 <__vector_18+0x55e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e2       	ldi	r20, 0x20	; 32
     fac:	51 e4       	ldi	r21, 0x41	; 65
     fae:	6a 85       	ldd	r22, Y+10	; 0x0a
     fb0:	7b 85       	ldd	r23, Y+11	; 0x0b
     fb2:	8c 85       	ldd	r24, Y+12	; 0x0c
     fb4:	9d 85       	ldd	r25, Y+13	; 0x0d
     fb6:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	8e 01       	movw	r16, r28
     fc0:	00 5c       	subi	r16, 0xC0	; 192
     fc2:	1f 4f       	sbci	r17, 0xFF	; 255
     fc4:	bc 01       	movw	r22, r24
     fc6:	cd 01       	movw	r24, r26
     fc8:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	f8 01       	movw	r30, r16
     fd2:	91 83       	std	Z+1, r25	; 0x01
     fd4:	80 83       	st	Z, r24
     fd6:	24 c0       	rjmp	.+72     	; 0x1020 <__vector_18+0x54c>
     fd8:	ce 01       	movw	r24, r28
     fda:	8e 5b       	subi	r24, 0xBE	; 190
     fdc:	9f 4f       	sbci	r25, 0xFF	; 255
     fde:	20 e9       	ldi	r18, 0x90	; 144
     fe0:	31 e0       	ldi	r19, 0x01	; 1
     fe2:	fc 01       	movw	r30, r24
     fe4:	31 83       	std	Z+1, r19	; 0x01
     fe6:	20 83       	st	Z, r18
     fe8:	ce 01       	movw	r24, r28
     fea:	8e 5b       	subi	r24, 0xBE	; 190
     fec:	9f 4f       	sbci	r25, 0xFF	; 255
     fee:	fc 01       	movw	r30, r24
     ff0:	80 81       	ld	r24, Z
     ff2:	91 81       	ldd	r25, Z+1	; 0x01
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <__vector_18+0x520>
     ff8:	9e 01       	movw	r18, r28
     ffa:	2e 5b       	subi	r18, 0xBE	; 190
     ffc:	3f 4f       	sbci	r19, 0xFF	; 255
     ffe:	f9 01       	movw	r30, r18
    1000:	91 83       	std	Z+1, r25	; 0x01
    1002:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1004:	ce 01       	movw	r24, r28
    1006:	80 5c       	subi	r24, 0xC0	; 192
    1008:	9f 4f       	sbci	r25, 0xFF	; 255
    100a:	9e 01       	movw	r18, r28
    100c:	20 5c       	subi	r18, 0xC0	; 192
    100e:	3f 4f       	sbci	r19, 0xFF	; 255
    1010:	f9 01       	movw	r30, r18
    1012:	20 81       	ld	r18, Z
    1014:	31 81       	ldd	r19, Z+1	; 0x01
    1016:	21 50       	subi	r18, 0x01	; 1
    1018:	31 09       	sbc	r19, r1
    101a:	fc 01       	movw	r30, r24
    101c:	31 83       	std	Z+1, r19	; 0x01
    101e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1020:	ce 01       	movw	r24, r28
    1022:	80 5c       	subi	r24, 0xC0	; 192
    1024:	9f 4f       	sbci	r25, 0xFF	; 255
    1026:	fc 01       	movw	r30, r24
    1028:	80 81       	ld	r24, Z
    102a:	91 81       	ldd	r25, Z+1	; 0x01
    102c:	89 2b       	or	r24, r25
    102e:	a1 f6       	brne	.-88     	; 0xfd8 <__vector_18+0x504>
    1030:	28 c0       	rjmp	.+80     	; 0x1082 <__vector_18+0x5ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1032:	8e 01       	movw	r16, r28
    1034:	00 5c       	subi	r16, 0xC0	; 192
    1036:	1f 4f       	sbci	r17, 0xFF	; 255
    1038:	6c ad       	ldd	r22, Y+60	; 0x3c
    103a:	7d ad       	ldd	r23, Y+61	; 0x3d
    103c:	8e ad       	ldd	r24, Y+62	; 0x3e
    103e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1040:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	f8 01       	movw	r30, r16
    104a:	91 83       	std	Z+1, r25	; 0x01
    104c:	80 83       	st	Z, r24
    104e:	ce 01       	movw	r24, r28
    1050:	8c 5b       	subi	r24, 0xBC	; 188
    1052:	9f 4f       	sbci	r25, 0xFF	; 255
    1054:	9e 01       	movw	r18, r28
    1056:	20 5c       	subi	r18, 0xC0	; 192
    1058:	3f 4f       	sbci	r19, 0xFF	; 255
    105a:	f9 01       	movw	r30, r18
    105c:	20 81       	ld	r18, Z
    105e:	31 81       	ldd	r19, Z+1	; 0x01
    1060:	fc 01       	movw	r30, r24
    1062:	31 83       	std	Z+1, r19	; 0x01
    1064:	20 83       	st	Z, r18
    1066:	ce 01       	movw	r24, r28
    1068:	8c 5b       	subi	r24, 0xBC	; 188
    106a:	9f 4f       	sbci	r25, 0xFF	; 255
    106c:	fc 01       	movw	r30, r24
    106e:	80 81       	ld	r24, Z
    1070:	91 81       	ldd	r25, Z+1	; 0x01
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	f1 f7       	brne	.-4      	; 0x1072 <__vector_18+0x59e>
    1076:	9e 01       	movw	r18, r28
    1078:	2c 5b       	subi	r18, 0xBC	; 188
    107a:	3f 4f       	sbci	r19, 0xFF	; 255
    107c:	f9 01       	movw	r30, r18
    107e:	91 83       	std	Z+1, r25	; 0x01
    1080:	80 83       	st	Z, r24
			 _delay_ms(2000);
			 test=1;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    108a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		if(recebido == '2')// recebe 2 para ligar o LED com 50% de luminosidade
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	82 33       	cpi	r24, 0x32	; 50
    1092:	09 f0       	breq	.+2      	; 0x1096 <__vector_18+0x5c2>
    1094:	e9 c0       	rjmp	.+466    	; 0x1268 <__vector_18+0x794>
		{
			 i = 2;
    1096:	82 e0       	ldi	r24, 0x02	; 2
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <i+0x1>
    109e:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <i>
			 OCR0A = i *60;
    10a2:	87 e4       	ldi	r24, 0x47	; 71
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <i>
    10aa:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <i+0x1>
    10ae:	32 2f       	mov	r19, r18
    10b0:	2c e3       	ldi	r18, 0x3C	; 60
    10b2:	32 9f       	mul	r19, r18
    10b4:	20 2d       	mov	r18, r0
    10b6:	11 24       	eor	r1, r1
    10b8:	fc 01       	movw	r30, r24
    10ba:	20 83       	st	Z, r18
			 nokia_lcd_init();
    10bc:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nokia_lcd_init>
			 nokia_lcd_clear();
    10c0:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <nokia_lcd_clear>
			 nokia_lcd_write_string("Lamp: ligada",1);
    10c4:	61 e0       	ldi	r22, 0x01	; 1
    10c6:	8c ea       	ldi	r24, 0xAC	; 172
    10c8:	91 e0       	ldi	r25, 0x01	; 1
    10ca:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
    10ce:	6a e0       	ldi	r22, 0x0A	; 10
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
			 nokia_lcd_write_string("Porcent: 50%",1);
    10d6:	61 e0       	ldi	r22, 0x01	; 1
    10d8:	85 ec       	ldi	r24, 0xC5	; 197
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
    10e0:	6a e0       	ldi	r22, 0x0A	; 10
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
			 nokia_lcd_render();
    10e8:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <nokia_lcd_render>
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	aa ef       	ldi	r26, 0xFA	; 250
    10f2:	b4 e4       	ldi	r27, 0x44	; 68
    10f4:	8e 87       	std	Y+14, r24	; 0x0e
    10f6:	9f 87       	std	Y+15, r25	; 0x0f
    10f8:	a8 8b       	std	Y+16, r26	; 0x10
    10fa:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    10fc:	8e 01       	movw	r16, r28
    10fe:	0a 5b       	subi	r16, 0xBA	; 186
    1100:	1f 4f       	sbci	r17, 0xFF	; 255
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	4a e7       	ldi	r20, 0x7A	; 122
    1108:	55 e4       	ldi	r21, 0x45	; 69
    110a:	6e 85       	ldd	r22, Y+14	; 0x0e
    110c:	7f 85       	ldd	r23, Y+15	; 0x0f
    110e:	88 89       	ldd	r24, Y+16	; 0x10
    1110:	99 89       	ldd	r25, Y+17	; 0x11
    1112:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	f8 01       	movw	r30, r16
    111c:	80 83       	st	Z, r24
    111e:	91 83       	std	Z+1, r25	; 0x01
    1120:	a2 83       	std	Z+2, r26	; 0x02
    1122:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1124:	ce 01       	movw	r24, r28
    1126:	8a 5b       	subi	r24, 0xBA	; 186
    1128:	9f 4f       	sbci	r25, 0xFF	; 255
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	40 e8       	ldi	r20, 0x80	; 128
    1130:	5f e3       	ldi	r21, 0x3F	; 63
    1132:	fc 01       	movw	r30, r24
    1134:	60 81       	ld	r22, Z
    1136:	71 81       	ldd	r23, Z+1	; 0x01
    1138:	82 81       	ldd	r24, Z+2	; 0x02
    113a:	93 81       	ldd	r25, Z+3	; 0x03
    113c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__cmpsf2>
    1140:	88 23       	and	r24, r24
    1142:	4c f4       	brge	.+18     	; 0x1156 <__vector_18+0x682>
		__ticks = 1;
    1144:	ce 01       	movw	r24, r28
    1146:	86 5b       	subi	r24, 0xB6	; 182
    1148:	9f 4f       	sbci	r25, 0xFF	; 255
    114a:	21 e0       	ldi	r18, 0x01	; 1
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	fc 01       	movw	r30, r24
    1150:	31 83       	std	Z+1, r19	; 0x01
    1152:	20 83       	st	Z, r18
    1154:	69 c0       	rjmp	.+210    	; 0x1228 <__vector_18+0x754>
	else if (__tmp > 65535)
    1156:	ce 01       	movw	r24, r28
    1158:	8a 5b       	subi	r24, 0xBA	; 186
    115a:	9f 4f       	sbci	r25, 0xFF	; 255
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	3f ef       	ldi	r19, 0xFF	; 255
    1160:	4f e7       	ldi	r20, 0x7F	; 127
    1162:	57 e4       	ldi	r21, 0x47	; 71
    1164:	fc 01       	movw	r30, r24
    1166:	60 81       	ld	r22, Z
    1168:	71 81       	ldd	r23, Z+1	; 0x01
    116a:	82 81       	ldd	r24, Z+2	; 0x02
    116c:	93 81       	ldd	r25, Z+3	; 0x03
    116e:	0e 94 2e 10 	call	0x205c	; 0x205c <__gesf2>
    1172:	18 16       	cp	r1, r24
    1174:	0c f0       	brlt	.+2      	; 0x1178 <__vector_18+0x6a4>
    1176:	46 c0       	rjmp	.+140    	; 0x1204 <__vector_18+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e2       	ldi	r20, 0x20	; 32
    117e:	51 e4       	ldi	r21, 0x41	; 65
    1180:	6e 85       	ldd	r22, Y+14	; 0x0e
    1182:	7f 85       	ldd	r23, Y+15	; 0x0f
    1184:	88 89       	ldd	r24, Y+16	; 0x10
    1186:	99 89       	ldd	r25, Y+17	; 0x11
    1188:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
    118c:	dc 01       	movw	r26, r24
    118e:	cb 01       	movw	r24, r22
    1190:	8e 01       	movw	r16, r28
    1192:	06 5b       	subi	r16, 0xB6	; 182
    1194:	1f 4f       	sbci	r17, 0xFF	; 255
    1196:	bc 01       	movw	r22, r24
    1198:	cd 01       	movw	r24, r26
    119a:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	f8 01       	movw	r30, r16
    11a4:	91 83       	std	Z+1, r25	; 0x01
    11a6:	80 83       	st	Z, r24
    11a8:	24 c0       	rjmp	.+72     	; 0x11f2 <__vector_18+0x71e>
    11aa:	ce 01       	movw	r24, r28
    11ac:	84 5b       	subi	r24, 0xB4	; 180
    11ae:	9f 4f       	sbci	r25, 0xFF	; 255
    11b0:	20 e9       	ldi	r18, 0x90	; 144
    11b2:	31 e0       	ldi	r19, 0x01	; 1
    11b4:	fc 01       	movw	r30, r24
    11b6:	31 83       	std	Z+1, r19	; 0x01
    11b8:	20 83       	st	Z, r18
    11ba:	ce 01       	movw	r24, r28
    11bc:	84 5b       	subi	r24, 0xB4	; 180
    11be:	9f 4f       	sbci	r25, 0xFF	; 255
    11c0:	fc 01       	movw	r30, r24
    11c2:	80 81       	ld	r24, Z
    11c4:	91 81       	ldd	r25, Z+1	; 0x01
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <__vector_18+0x6f2>
    11ca:	9e 01       	movw	r18, r28
    11cc:	24 5b       	subi	r18, 0xB4	; 180
    11ce:	3f 4f       	sbci	r19, 0xFF	; 255
    11d0:	f9 01       	movw	r30, r18
    11d2:	91 83       	std	Z+1, r25	; 0x01
    11d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d6:	ce 01       	movw	r24, r28
    11d8:	86 5b       	subi	r24, 0xB6	; 182
    11da:	9f 4f       	sbci	r25, 0xFF	; 255
    11dc:	9e 01       	movw	r18, r28
    11de:	26 5b       	subi	r18, 0xB6	; 182
    11e0:	3f 4f       	sbci	r19, 0xFF	; 255
    11e2:	f9 01       	movw	r30, r18
    11e4:	20 81       	ld	r18, Z
    11e6:	31 81       	ldd	r19, Z+1	; 0x01
    11e8:	21 50       	subi	r18, 0x01	; 1
    11ea:	31 09       	sbc	r19, r1
    11ec:	fc 01       	movw	r30, r24
    11ee:	31 83       	std	Z+1, r19	; 0x01
    11f0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f2:	ce 01       	movw	r24, r28
    11f4:	86 5b       	subi	r24, 0xB6	; 182
    11f6:	9f 4f       	sbci	r25, 0xFF	; 255
    11f8:	fc 01       	movw	r30, r24
    11fa:	80 81       	ld	r24, Z
    11fc:	91 81       	ldd	r25, Z+1	; 0x01
    11fe:	89 2b       	or	r24, r25
    1200:	a1 f6       	brne	.-88     	; 0x11aa <__vector_18+0x6d6>
    1202:	2c c0       	rjmp	.+88     	; 0x125c <__vector_18+0x788>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1204:	8e 01       	movw	r16, r28
    1206:	06 5b       	subi	r16, 0xB6	; 182
    1208:	1f 4f       	sbci	r17, 0xFF	; 255
    120a:	ce 01       	movw	r24, r28
    120c:	8a 5b       	subi	r24, 0xBA	; 186
    120e:	9f 4f       	sbci	r25, 0xFF	; 255
    1210:	fc 01       	movw	r30, r24
    1212:	60 81       	ld	r22, Z
    1214:	71 81       	ldd	r23, Z+1	; 0x01
    1216:	82 81       	ldd	r24, Z+2	; 0x02
    1218:	93 81       	ldd	r25, Z+3	; 0x03
    121a:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
    121e:	dc 01       	movw	r26, r24
    1220:	cb 01       	movw	r24, r22
    1222:	f8 01       	movw	r30, r16
    1224:	91 83       	std	Z+1, r25	; 0x01
    1226:	80 83       	st	Z, r24
    1228:	ce 01       	movw	r24, r28
    122a:	82 5b       	subi	r24, 0xB2	; 178
    122c:	9f 4f       	sbci	r25, 0xFF	; 255
    122e:	9e 01       	movw	r18, r28
    1230:	26 5b       	subi	r18, 0xB6	; 182
    1232:	3f 4f       	sbci	r19, 0xFF	; 255
    1234:	f9 01       	movw	r30, r18
    1236:	20 81       	ld	r18, Z
    1238:	31 81       	ldd	r19, Z+1	; 0x01
    123a:	fc 01       	movw	r30, r24
    123c:	31 83       	std	Z+1, r19	; 0x01
    123e:	20 83       	st	Z, r18
    1240:	ce 01       	movw	r24, r28
    1242:	82 5b       	subi	r24, 0xB2	; 178
    1244:	9f 4f       	sbci	r25, 0xFF	; 255
    1246:	fc 01       	movw	r30, r24
    1248:	80 81       	ld	r24, Z
    124a:	91 81       	ldd	r25, Z+1	; 0x01
    124c:	01 97       	sbiw	r24, 0x01	; 1
    124e:	f1 f7       	brne	.-4      	; 0x124c <__vector_18+0x778>
    1250:	9e 01       	movw	r18, r28
    1252:	22 5b       	subi	r18, 0xB2	; 178
    1254:	3f 4f       	sbci	r19, 0xFF	; 255
    1256:	f9 01       	movw	r30, r18
    1258:	91 83       	std	Z+1, r25	; 0x01
    125a:	80 83       	st	Z, r24
			 _delay_ms(2000);
			 test=1;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1264:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		if(recebido == '3')// recebe3 para ligar o LED com 75% de luminosidade
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	83 33       	cpi	r24, 0x33	; 51
    126c:	09 f0       	breq	.+2      	; 0x1270 <__vector_18+0x79c>
    126e:	e9 c0       	rjmp	.+466    	; 0x1442 <__vector_18+0x96e>
		{
			 i = 3;
    1270:	83 e0       	ldi	r24, 0x03	; 3
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <i+0x1>
    1278:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <i>
			 OCR0A = i *60;
    127c:	87 e4       	ldi	r24, 0x47	; 71
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <i>
    1284:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <i+0x1>
    1288:	32 2f       	mov	r19, r18
    128a:	2c e3       	ldi	r18, 0x3C	; 60
    128c:	32 9f       	mul	r19, r18
    128e:	20 2d       	mov	r18, r0
    1290:	11 24       	eor	r1, r1
    1292:	fc 01       	movw	r30, r24
    1294:	20 83       	st	Z, r18
			 nokia_lcd_init();
    1296:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nokia_lcd_init>
			 nokia_lcd_clear();
    129a:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <nokia_lcd_clear>
			 nokia_lcd_write_string("Lamp: ligada",1);
    129e:	61 e0       	ldi	r22, 0x01	; 1
    12a0:	8c ea       	ldi	r24, 0xAC	; 172
    12a2:	91 e0       	ldi	r25, 0x01	; 1
    12a4:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
    12a8:	6a e0       	ldi	r22, 0x0A	; 10
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
			 nokia_lcd_write_string("Porcent: 75%",1);
    12b0:	61 e0       	ldi	r22, 0x01	; 1
    12b2:	82 ed       	ldi	r24, 0xD2	; 210
    12b4:	91 e0       	ldi	r25, 0x01	; 1
    12b6:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
    12ba:	6a e0       	ldi	r22, 0x0A	; 10
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
			 nokia_lcd_render();
    12c2:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <nokia_lcd_render>
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	aa ef       	ldi	r26, 0xFA	; 250
    12cc:	b4 e4       	ldi	r27, 0x44	; 68
    12ce:	8a 8b       	std	Y+18, r24	; 0x12
    12d0:	9b 8b       	std	Y+19, r25	; 0x13
    12d2:	ac 8b       	std	Y+20, r26	; 0x14
    12d4:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12d6:	8e 01       	movw	r16, r28
    12d8:	00 5b       	subi	r16, 0xB0	; 176
    12da:	1f 4f       	sbci	r17, 0xFF	; 255
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	4a e7       	ldi	r20, 0x7A	; 122
    12e2:	55 e4       	ldi	r21, 0x45	; 69
    12e4:	6a 89       	ldd	r22, Y+18	; 0x12
    12e6:	7b 89       	ldd	r23, Y+19	; 0x13
    12e8:	8c 89       	ldd	r24, Y+20	; 0x14
    12ea:	9d 89       	ldd	r25, Y+21	; 0x15
    12ec:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	f8 01       	movw	r30, r16
    12f6:	80 83       	st	Z, r24
    12f8:	91 83       	std	Z+1, r25	; 0x01
    12fa:	a2 83       	std	Z+2, r26	; 0x02
    12fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12fe:	ce 01       	movw	r24, r28
    1300:	80 5b       	subi	r24, 0xB0	; 176
    1302:	9f 4f       	sbci	r25, 0xFF	; 255
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	40 e8       	ldi	r20, 0x80	; 128
    130a:	5f e3       	ldi	r21, 0x3F	; 63
    130c:	fc 01       	movw	r30, r24
    130e:	60 81       	ld	r22, Z
    1310:	71 81       	ldd	r23, Z+1	; 0x01
    1312:	82 81       	ldd	r24, Z+2	; 0x02
    1314:	93 81       	ldd	r25, Z+3	; 0x03
    1316:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__cmpsf2>
    131a:	88 23       	and	r24, r24
    131c:	4c f4       	brge	.+18     	; 0x1330 <__vector_18+0x85c>
		__ticks = 1;
    131e:	ce 01       	movw	r24, r28
    1320:	8c 5a       	subi	r24, 0xAC	; 172
    1322:	9f 4f       	sbci	r25, 0xFF	; 255
    1324:	21 e0       	ldi	r18, 0x01	; 1
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	fc 01       	movw	r30, r24
    132a:	31 83       	std	Z+1, r19	; 0x01
    132c:	20 83       	st	Z, r18
    132e:	69 c0       	rjmp	.+210    	; 0x1402 <__vector_18+0x92e>
	else if (__tmp > 65535)
    1330:	ce 01       	movw	r24, r28
    1332:	80 5b       	subi	r24, 0xB0	; 176
    1334:	9f 4f       	sbci	r25, 0xFF	; 255
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	3f ef       	ldi	r19, 0xFF	; 255
    133a:	4f e7       	ldi	r20, 0x7F	; 127
    133c:	57 e4       	ldi	r21, 0x47	; 71
    133e:	fc 01       	movw	r30, r24
    1340:	60 81       	ld	r22, Z
    1342:	71 81       	ldd	r23, Z+1	; 0x01
    1344:	82 81       	ldd	r24, Z+2	; 0x02
    1346:	93 81       	ldd	r25, Z+3	; 0x03
    1348:	0e 94 2e 10 	call	0x205c	; 0x205c <__gesf2>
    134c:	18 16       	cp	r1, r24
    134e:	0c f0       	brlt	.+2      	; 0x1352 <__vector_18+0x87e>
    1350:	46 c0       	rjmp	.+140    	; 0x13de <__vector_18+0x90a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e2       	ldi	r20, 0x20	; 32
    1358:	51 e4       	ldi	r21, 0x41	; 65
    135a:	6a 89       	ldd	r22, Y+18	; 0x12
    135c:	7b 89       	ldd	r23, Y+19	; 0x13
    135e:	8c 89       	ldd	r24, Y+20	; 0x14
    1360:	9d 89       	ldd	r25, Y+21	; 0x15
    1362:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	8e 01       	movw	r16, r28
    136c:	0c 5a       	subi	r16, 0xAC	; 172
    136e:	1f 4f       	sbci	r17, 0xFF	; 255
    1370:	bc 01       	movw	r22, r24
    1372:	cd 01       	movw	r24, r26
    1374:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	f8 01       	movw	r30, r16
    137e:	91 83       	std	Z+1, r25	; 0x01
    1380:	80 83       	st	Z, r24
    1382:	24 c0       	rjmp	.+72     	; 0x13cc <__vector_18+0x8f8>
    1384:	ce 01       	movw	r24, r28
    1386:	8a 5a       	subi	r24, 0xAA	; 170
    1388:	9f 4f       	sbci	r25, 0xFF	; 255
    138a:	20 e9       	ldi	r18, 0x90	; 144
    138c:	31 e0       	ldi	r19, 0x01	; 1
    138e:	fc 01       	movw	r30, r24
    1390:	31 83       	std	Z+1, r19	; 0x01
    1392:	20 83       	st	Z, r18
    1394:	ce 01       	movw	r24, r28
    1396:	8a 5a       	subi	r24, 0xAA	; 170
    1398:	9f 4f       	sbci	r25, 0xFF	; 255
    139a:	fc 01       	movw	r30, r24
    139c:	80 81       	ld	r24, Z
    139e:	91 81       	ldd	r25, Z+1	; 0x01
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <__vector_18+0x8cc>
    13a4:	9e 01       	movw	r18, r28
    13a6:	2a 5a       	subi	r18, 0xAA	; 170
    13a8:	3f 4f       	sbci	r19, 0xFF	; 255
    13aa:	f9 01       	movw	r30, r18
    13ac:	91 83       	std	Z+1, r25	; 0x01
    13ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b0:	ce 01       	movw	r24, r28
    13b2:	8c 5a       	subi	r24, 0xAC	; 172
    13b4:	9f 4f       	sbci	r25, 0xFF	; 255
    13b6:	9e 01       	movw	r18, r28
    13b8:	2c 5a       	subi	r18, 0xAC	; 172
    13ba:	3f 4f       	sbci	r19, 0xFF	; 255
    13bc:	f9 01       	movw	r30, r18
    13be:	20 81       	ld	r18, Z
    13c0:	31 81       	ldd	r19, Z+1	; 0x01
    13c2:	21 50       	subi	r18, 0x01	; 1
    13c4:	31 09       	sbc	r19, r1
    13c6:	fc 01       	movw	r30, r24
    13c8:	31 83       	std	Z+1, r19	; 0x01
    13ca:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13cc:	ce 01       	movw	r24, r28
    13ce:	8c 5a       	subi	r24, 0xAC	; 172
    13d0:	9f 4f       	sbci	r25, 0xFF	; 255
    13d2:	fc 01       	movw	r30, r24
    13d4:	80 81       	ld	r24, Z
    13d6:	91 81       	ldd	r25, Z+1	; 0x01
    13d8:	89 2b       	or	r24, r25
    13da:	a1 f6       	brne	.-88     	; 0x1384 <__vector_18+0x8b0>
    13dc:	2c c0       	rjmp	.+88     	; 0x1436 <__vector_18+0x962>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13de:	8e 01       	movw	r16, r28
    13e0:	0c 5a       	subi	r16, 0xAC	; 172
    13e2:	1f 4f       	sbci	r17, 0xFF	; 255
    13e4:	ce 01       	movw	r24, r28
    13e6:	80 5b       	subi	r24, 0xB0	; 176
    13e8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ea:	fc 01       	movw	r30, r24
    13ec:	60 81       	ld	r22, Z
    13ee:	71 81       	ldd	r23, Z+1	; 0x01
    13f0:	82 81       	ldd	r24, Z+2	; 0x02
    13f2:	93 81       	ldd	r25, Z+3	; 0x03
    13f4:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	f8 01       	movw	r30, r16
    13fe:	91 83       	std	Z+1, r25	; 0x01
    1400:	80 83       	st	Z, r24
    1402:	ce 01       	movw	r24, r28
    1404:	88 5a       	subi	r24, 0xA8	; 168
    1406:	9f 4f       	sbci	r25, 0xFF	; 255
    1408:	9e 01       	movw	r18, r28
    140a:	2c 5a       	subi	r18, 0xAC	; 172
    140c:	3f 4f       	sbci	r19, 0xFF	; 255
    140e:	f9 01       	movw	r30, r18
    1410:	20 81       	ld	r18, Z
    1412:	31 81       	ldd	r19, Z+1	; 0x01
    1414:	fc 01       	movw	r30, r24
    1416:	31 83       	std	Z+1, r19	; 0x01
    1418:	20 83       	st	Z, r18
    141a:	ce 01       	movw	r24, r28
    141c:	88 5a       	subi	r24, 0xA8	; 168
    141e:	9f 4f       	sbci	r25, 0xFF	; 255
    1420:	fc 01       	movw	r30, r24
    1422:	80 81       	ld	r24, Z
    1424:	91 81       	ldd	r25, Z+1	; 0x01
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <__vector_18+0x952>
    142a:	9e 01       	movw	r18, r28
    142c:	28 5a       	subi	r18, 0xA8	; 168
    142e:	3f 4f       	sbci	r19, 0xFF	; 255
    1430:	f9 01       	movw	r30, r18
    1432:	91 83       	std	Z+1, r25	; 0x01
    1434:	80 83       	st	Z, r24
			 _delay_ms(2000);
			 test=1;
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    143e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		if(recebido == '4')// recebe 4 para ligar o LED com 100% de luminosidade
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	84 33       	cpi	r24, 0x34	; 52
    1446:	09 f0       	breq	.+2      	; 0x144a <__vector_18+0x976>
    1448:	e9 c0       	rjmp	.+466    	; 0x161c <__vector_18+0xb48>
		{
			 i = 4;
    144a:	84 e0       	ldi	r24, 0x04	; 4
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <i+0x1>
    1452:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <i>
			 OCR0A = i *60;
    1456:	87 e4       	ldi	r24, 0x47	; 71
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <i>
    145e:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <i+0x1>
    1462:	32 2f       	mov	r19, r18
    1464:	2c e3       	ldi	r18, 0x3C	; 60
    1466:	32 9f       	mul	r19, r18
    1468:	20 2d       	mov	r18, r0
    146a:	11 24       	eor	r1, r1
    146c:	fc 01       	movw	r30, r24
    146e:	20 83       	st	Z, r18
			 nokia_lcd_init();
    1470:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nokia_lcd_init>
			 nokia_lcd_clear();
    1474:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <nokia_lcd_clear>
			 nokia_lcd_write_string("Lamp: ligada",1);
    1478:	61 e0       	ldi	r22, 0x01	; 1
    147a:	8c ea       	ldi	r24, 0xAC	; 172
    147c:	91 e0       	ldi	r25, 0x01	; 1
    147e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
    1482:	6a e0       	ldi	r22, 0x0A	; 10
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
			 nokia_lcd_write_string("Porcent: 100%",1);
    148a:	61 e0       	ldi	r22, 0x01	; 1
    148c:	8f ed       	ldi	r24, 0xDF	; 223
    148e:	91 e0       	ldi	r25, 0x01	; 1
    1490:	0e 94 77 0e 	call	0x1cee	; 0x1cee <nokia_lcd_write_string>
			 nokia_lcd_set_cursor(0, 10);
    1494:	6a e0       	ldi	r22, 0x0A	; 10
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nokia_lcd_set_cursor>
			 nokia_lcd_render();
    149c:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <nokia_lcd_render>
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	aa ef       	ldi	r26, 0xFA	; 250
    14a6:	b4 e4       	ldi	r27, 0x44	; 68
    14a8:	8e 8b       	std	Y+22, r24	; 0x16
    14aa:	9f 8b       	std	Y+23, r25	; 0x17
    14ac:	a8 8f       	std	Y+24, r26	; 0x18
    14ae:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    14b0:	8e 01       	movw	r16, r28
    14b2:	06 5a       	subi	r16, 0xA6	; 166
    14b4:	1f 4f       	sbci	r17, 0xFF	; 255
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	4a e7       	ldi	r20, 0x7A	; 122
    14bc:	55 e4       	ldi	r21, 0x45	; 69
    14be:	6e 89       	ldd	r22, Y+22	; 0x16
    14c0:	7f 89       	ldd	r23, Y+23	; 0x17
    14c2:	88 8d       	ldd	r24, Y+24	; 0x18
    14c4:	99 8d       	ldd	r25, Y+25	; 0x19
    14c6:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	f8 01       	movw	r30, r16
    14d0:	80 83       	st	Z, r24
    14d2:	91 83       	std	Z+1, r25	; 0x01
    14d4:	a2 83       	std	Z+2, r26	; 0x02
    14d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14d8:	ce 01       	movw	r24, r28
    14da:	86 5a       	subi	r24, 0xA6	; 166
    14dc:	9f 4f       	sbci	r25, 0xFF	; 255
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 e8       	ldi	r20, 0x80	; 128
    14e4:	5f e3       	ldi	r21, 0x3F	; 63
    14e6:	fc 01       	movw	r30, r24
    14e8:	60 81       	ld	r22, Z
    14ea:	71 81       	ldd	r23, Z+1	; 0x01
    14ec:	82 81       	ldd	r24, Z+2	; 0x02
    14ee:	93 81       	ldd	r25, Z+3	; 0x03
    14f0:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__cmpsf2>
    14f4:	88 23       	and	r24, r24
    14f6:	4c f4       	brge	.+18     	; 0x150a <__vector_18+0xa36>
		__ticks = 1;
    14f8:	ce 01       	movw	r24, r28
    14fa:	82 5a       	subi	r24, 0xA2	; 162
    14fc:	9f 4f       	sbci	r25, 0xFF	; 255
    14fe:	21 e0       	ldi	r18, 0x01	; 1
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	fc 01       	movw	r30, r24
    1504:	31 83       	std	Z+1, r19	; 0x01
    1506:	20 83       	st	Z, r18
    1508:	69 c0       	rjmp	.+210    	; 0x15dc <__vector_18+0xb08>
	else if (__tmp > 65535)
    150a:	ce 01       	movw	r24, r28
    150c:	86 5a       	subi	r24, 0xA6	; 166
    150e:	9f 4f       	sbci	r25, 0xFF	; 255
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	3f ef       	ldi	r19, 0xFF	; 255
    1514:	4f e7       	ldi	r20, 0x7F	; 127
    1516:	57 e4       	ldi	r21, 0x47	; 71
    1518:	fc 01       	movw	r30, r24
    151a:	60 81       	ld	r22, Z
    151c:	71 81       	ldd	r23, Z+1	; 0x01
    151e:	82 81       	ldd	r24, Z+2	; 0x02
    1520:	93 81       	ldd	r25, Z+3	; 0x03
    1522:	0e 94 2e 10 	call	0x205c	; 0x205c <__gesf2>
    1526:	18 16       	cp	r1, r24
    1528:	0c f0       	brlt	.+2      	; 0x152c <__vector_18+0xa58>
    152a:	46 c0       	rjmp	.+140    	; 0x15b8 <__vector_18+0xae4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e2       	ldi	r20, 0x20	; 32
    1532:	51 e4       	ldi	r21, 0x41	; 65
    1534:	6e 89       	ldd	r22, Y+22	; 0x16
    1536:	7f 89       	ldd	r23, Y+23	; 0x17
    1538:	88 8d       	ldd	r24, Y+24	; 0x18
    153a:	99 8d       	ldd	r25, Y+25	; 0x19
    153c:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	8e 01       	movw	r16, r28
    1546:	02 5a       	subi	r16, 0xA2	; 162
    1548:	1f 4f       	sbci	r17, 0xFF	; 255
    154a:	bc 01       	movw	r22, r24
    154c:	cd 01       	movw	r24, r26
    154e:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	f8 01       	movw	r30, r16
    1558:	91 83       	std	Z+1, r25	; 0x01
    155a:	80 83       	st	Z, r24
    155c:	24 c0       	rjmp	.+72     	; 0x15a6 <__vector_18+0xad2>
    155e:	ce 01       	movw	r24, r28
    1560:	80 5a       	subi	r24, 0xA0	; 160
    1562:	9f 4f       	sbci	r25, 0xFF	; 255
    1564:	20 e9       	ldi	r18, 0x90	; 144
    1566:	31 e0       	ldi	r19, 0x01	; 1
    1568:	fc 01       	movw	r30, r24
    156a:	31 83       	std	Z+1, r19	; 0x01
    156c:	20 83       	st	Z, r18
    156e:	ce 01       	movw	r24, r28
    1570:	80 5a       	subi	r24, 0xA0	; 160
    1572:	9f 4f       	sbci	r25, 0xFF	; 255
    1574:	fc 01       	movw	r30, r24
    1576:	80 81       	ld	r24, Z
    1578:	91 81       	ldd	r25, Z+1	; 0x01
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	f1 f7       	brne	.-4      	; 0x157a <__vector_18+0xaa6>
    157e:	9e 01       	movw	r18, r28
    1580:	20 5a       	subi	r18, 0xA0	; 160
    1582:	3f 4f       	sbci	r19, 0xFF	; 255
    1584:	f9 01       	movw	r30, r18
    1586:	91 83       	std	Z+1, r25	; 0x01
    1588:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158a:	ce 01       	movw	r24, r28
    158c:	82 5a       	subi	r24, 0xA2	; 162
    158e:	9f 4f       	sbci	r25, 0xFF	; 255
    1590:	9e 01       	movw	r18, r28
    1592:	22 5a       	subi	r18, 0xA2	; 162
    1594:	3f 4f       	sbci	r19, 0xFF	; 255
    1596:	f9 01       	movw	r30, r18
    1598:	20 81       	ld	r18, Z
    159a:	31 81       	ldd	r19, Z+1	; 0x01
    159c:	21 50       	subi	r18, 0x01	; 1
    159e:	31 09       	sbc	r19, r1
    15a0:	fc 01       	movw	r30, r24
    15a2:	31 83       	std	Z+1, r19	; 0x01
    15a4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a6:	ce 01       	movw	r24, r28
    15a8:	82 5a       	subi	r24, 0xA2	; 162
    15aa:	9f 4f       	sbci	r25, 0xFF	; 255
    15ac:	fc 01       	movw	r30, r24
    15ae:	80 81       	ld	r24, Z
    15b0:	91 81       	ldd	r25, Z+1	; 0x01
    15b2:	89 2b       	or	r24, r25
    15b4:	a1 f6       	brne	.-88     	; 0x155e <__vector_18+0xa8a>
    15b6:	2c c0       	rjmp	.+88     	; 0x1610 <__vector_18+0xb3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b8:	8e 01       	movw	r16, r28
    15ba:	02 5a       	subi	r16, 0xA2	; 162
    15bc:	1f 4f       	sbci	r17, 0xFF	; 255
    15be:	ce 01       	movw	r24, r28
    15c0:	86 5a       	subi	r24, 0xA6	; 166
    15c2:	9f 4f       	sbci	r25, 0xFF	; 255
    15c4:	fc 01       	movw	r30, r24
    15c6:	60 81       	ld	r22, Z
    15c8:	71 81       	ldd	r23, Z+1	; 0x01
    15ca:	82 81       	ldd	r24, Z+2	; 0x02
    15cc:	93 81       	ldd	r25, Z+3	; 0x03
    15ce:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	f8 01       	movw	r30, r16
    15d8:	91 83       	std	Z+1, r25	; 0x01
    15da:	80 83       	st	Z, r24
    15dc:	ce 01       	movw	r24, r28
    15de:	8e 59       	subi	r24, 0x9E	; 158
    15e0:	9f 4f       	sbci	r25, 0xFF	; 255
    15e2:	9e 01       	movw	r18, r28
    15e4:	22 5a       	subi	r18, 0xA2	; 162
    15e6:	3f 4f       	sbci	r19, 0xFF	; 255
    15e8:	f9 01       	movw	r30, r18
    15ea:	20 81       	ld	r18, Z
    15ec:	31 81       	ldd	r19, Z+1	; 0x01
    15ee:	fc 01       	movw	r30, r24
    15f0:	31 83       	std	Z+1, r19	; 0x01
    15f2:	20 83       	st	Z, r18
    15f4:	ce 01       	movw	r24, r28
    15f6:	8e 59       	subi	r24, 0x9E	; 158
    15f8:	9f 4f       	sbci	r25, 0xFF	; 255
    15fa:	fc 01       	movw	r30, r24
    15fc:	80 81       	ld	r24, Z
    15fe:	91 81       	ldd	r25, Z+1	; 0x01
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	f1 f7       	brne	.-4      	; 0x1600 <__vector_18+0xb2c>
    1604:	9e 01       	movw	r18, r28
    1606:	2e 59       	subi	r18, 0x9E	; 158
    1608:	3f 4f       	sbci	r19, 0xFF	; 255
    160a:	f9 01       	movw	r30, r18
    160c:	91 83       	std	Z+1, r25	; 0x01
    160e:	80 83       	st	Z, r24
			 _delay_ms(2000);
			 test=1;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1618:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

		}
		
		USART_transmit(recebido);
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	0e 94 8b 01 	call	0x316	; 0x316 <USART_transmit>
		
    1622:	00 00       	nop
    1624:	cd 59       	subi	r28, 0x9D	; 157
    1626:	df 4f       	sbci	r29, 0xFF	; 255
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	cd bf       	out	0x3d, r28	; 61
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	ff 91       	pop	r31
    1638:	ef 91       	pop	r30
    163a:	bf 91       	pop	r27
    163c:	af 91       	pop	r26
    163e:	9f 91       	pop	r25
    1640:	8f 91       	pop	r24
    1642:	7f 91       	pop	r23
    1644:	6f 91       	pop	r22
    1646:	5f 91       	pop	r21
    1648:	4f 91       	pop	r20
    164a:	3f 91       	pop	r19
    164c:	2f 91       	pop	r18
    164e:	1f 91       	pop	r17
    1650:	0f 91       	pop	r16
    1652:	0f 90       	pop	r0
    1654:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1658:	0f 90       	pop	r0
    165a:	1f 90       	pop	r1
    165c:	18 95       	reti

0000165e <write>:
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
}
    165e:	1f 93       	push	r17
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	00 d0       	rcall	.+0      	; 0x1666 <write+0x8>
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	89 83       	std	Y+1, r24	; 0x01
    166c:	6a 83       	std	Y+2, r22	; 0x02
    166e:	85 e2       	ldi	r24, 0x25	; 37
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	25 e2       	ldi	r18, 0x25	; 37
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	f9 01       	movw	r30, r18
    1678:	20 81       	ld	r18, Z
    167a:	2d 7f       	andi	r18, 0xFD	; 253
    167c:	fc 01       	movw	r30, r24
    167e:	20 83       	st	Z, r18
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	88 23       	and	r24, r24
    1684:	51 f0       	breq	.+20     	; 0x169a <write+0x3c>
    1686:	85 e2       	ldi	r24, 0x25	; 37
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	25 e2       	ldi	r18, 0x25	; 37
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	f9 01       	movw	r30, r18
    1690:	20 81       	ld	r18, Z
    1692:	28 60       	ori	r18, 0x08	; 8
    1694:	fc 01       	movw	r30, r24
    1696:	20 83       	st	Z, r18
    1698:	09 c0       	rjmp	.+18     	; 0x16ac <write+0x4e>
    169a:	85 e2       	ldi	r24, 0x25	; 37
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	25 e2       	ldi	r18, 0x25	; 37
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	f9 01       	movw	r30, r18
    16a4:	20 81       	ld	r18, Z
    16a6:	27 7f       	andi	r18, 0xF7	; 247
    16a8:	fc 01       	movw	r30, r24
    16aa:	20 83       	st	Z, r18
    16ac:	10 e0       	ldi	r17, 0x00	; 0
    16ae:	3c c0       	rjmp	.+120    	; 0x1728 <write+0xca>
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	88 2f       	mov	r24, r24
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	21 2f       	mov	r18, r17
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	47 e0       	ldi	r20, 0x07	; 7
    16bc:	50 e0       	ldi	r21, 0x00	; 0
    16be:	ba 01       	movw	r22, r20
    16c0:	62 1b       	sub	r22, r18
    16c2:	73 0b       	sbc	r23, r19
    16c4:	9b 01       	movw	r18, r22
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <write+0x6e>
    16c8:	95 95       	asr	r25
    16ca:	87 95       	ror	r24
    16cc:	2a 95       	dec	r18
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <write+0x6a>
    16d0:	81 70       	andi	r24, 0x01	; 1
    16d2:	99 27       	eor	r25, r25
    16d4:	89 2b       	or	r24, r25
    16d6:	51 f0       	breq	.+20     	; 0x16ec <write+0x8e>
    16d8:	85 e2       	ldi	r24, 0x25	; 37
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	25 e2       	ldi	r18, 0x25	; 37
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	f9 01       	movw	r30, r18
    16e2:	20 81       	ld	r18, Z
    16e4:	20 61       	ori	r18, 0x10	; 16
    16e6:	fc 01       	movw	r30, r24
    16e8:	20 83       	st	Z, r18
    16ea:	09 c0       	rjmp	.+18     	; 0x16fe <write+0xa0>
    16ec:	85 e2       	ldi	r24, 0x25	; 37
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	25 e2       	ldi	r18, 0x25	; 37
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	f9 01       	movw	r30, r18
    16f6:	20 81       	ld	r18, Z
    16f8:	2f 7e       	andi	r18, 0xEF	; 239
    16fa:	fc 01       	movw	r30, r24
    16fc:	20 83       	st	Z, r18
    16fe:	85 e2       	ldi	r24, 0x25	; 37
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	25 e2       	ldi	r18, 0x25	; 37
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	f9 01       	movw	r30, r18
    1708:	20 81       	ld	r18, Z
    170a:	20 62       	ori	r18, 0x20	; 32
    170c:	fc 01       	movw	r30, r24
    170e:	20 83       	st	Z, r18
    1710:	85 e2       	ldi	r24, 0x25	; 37
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	25 e2       	ldi	r18, 0x25	; 37
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	f9 01       	movw	r30, r18
    171a:	20 81       	ld	r18, Z
    171c:	2f 7d       	andi	r18, 0xDF	; 223
    171e:	fc 01       	movw	r30, r24
    1720:	20 83       	st	Z, r18
    1722:	81 2f       	mov	r24, r17
    1724:	11 e0       	ldi	r17, 0x01	; 1
    1726:	18 0f       	add	r17, r24
    1728:	18 30       	cpi	r17, 0x08	; 8
    172a:	10 f2       	brcs	.-124    	; 0x16b0 <write+0x52>
    172c:	85 e2       	ldi	r24, 0x25	; 37
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	25 e2       	ldi	r18, 0x25	; 37
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	f9 01       	movw	r30, r18
    1736:	20 81       	ld	r18, Z
    1738:	22 60       	ori	r18, 0x02	; 2
    173a:	fc 01       	movw	r30, r24
    173c:	20 83       	st	Z, r18
    173e:	00 00       	nop
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	1f 91       	pop	r17
    174a:	08 95       	ret

0000174c <write_cmd>:
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	1f 92       	push	r1
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	89 83       	std	Y+1, r24	; 0x01
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	0e 94 2f 0b 	call	0x165e	; 0x165e <write>
    1760:	00 00       	nop
    1762:	0f 90       	pop	r0
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	08 95       	ret

0000176a <write_data>:
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	1f 92       	push	r1
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	61 e0       	ldi	r22, 0x01	; 1
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	0e 94 2f 0b 	call	0x165e	; 0x165e <write>
    177e:	00 00       	nop
    1780:	0f 90       	pop	r0
    1782:	df 91       	pop	r29
    1784:	cf 91       	pop	r28
    1786:	08 95       	ret

00001788 <nokia_lcd_init>:
    1788:	0f 93       	push	r16
    178a:	1f 93       	push	r17
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	6c 97       	sbiw	r28, 0x1c	; 28
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	84 e2       	ldi	r24, 0x24	; 36
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	24 e2       	ldi	r18, 0x24	; 36
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	f9 01       	movw	r30, r18
    17aa:	20 81       	ld	r18, Z
    17ac:	22 60       	ori	r18, 0x02	; 2
    17ae:	fc 01       	movw	r30, r24
    17b0:	20 83       	st	Z, r18
    17b2:	84 e2       	ldi	r24, 0x24	; 36
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	24 e2       	ldi	r18, 0x24	; 36
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	f9 01       	movw	r30, r18
    17bc:	20 81       	ld	r18, Z
    17be:	24 60       	ori	r18, 0x04	; 4
    17c0:	fc 01       	movw	r30, r24
    17c2:	20 83       	st	Z, r18
    17c4:	84 e2       	ldi	r24, 0x24	; 36
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	24 e2       	ldi	r18, 0x24	; 36
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	f9 01       	movw	r30, r18
    17ce:	20 81       	ld	r18, Z
    17d0:	28 60       	ori	r18, 0x08	; 8
    17d2:	fc 01       	movw	r30, r24
    17d4:	20 83       	st	Z, r18
    17d6:	84 e2       	ldi	r24, 0x24	; 36
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	24 e2       	ldi	r18, 0x24	; 36
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	f9 01       	movw	r30, r18
    17e0:	20 81       	ld	r18, Z
    17e2:	20 61       	ori	r18, 0x10	; 16
    17e4:	fc 01       	movw	r30, r24
    17e6:	20 83       	st	Z, r18
    17e8:	84 e2       	ldi	r24, 0x24	; 36
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	24 e2       	ldi	r18, 0x24	; 36
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	f9 01       	movw	r30, r18
    17f2:	20 81       	ld	r18, Z
    17f4:	20 62       	ori	r18, 0x20	; 32
    17f6:	fc 01       	movw	r30, r24
    17f8:	20 83       	st	Z, r18
    17fa:	85 e2       	ldi	r24, 0x25	; 37
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	25 e2       	ldi	r18, 0x25	; 37
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	f9 01       	movw	r30, r18
    1804:	20 81       	ld	r18, Z
    1806:	24 60       	ori	r18, 0x04	; 4
    1808:	fc 01       	movw	r30, r24
    180a:	20 83       	st	Z, r18
    180c:	85 e2       	ldi	r24, 0x25	; 37
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	25 e2       	ldi	r18, 0x25	; 37
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	f9 01       	movw	r30, r18
    1816:	20 81       	ld	r18, Z
    1818:	22 60       	ori	r18, 0x02	; 2
    181a:	fc 01       	movw	r30, r24
    181c:	20 83       	st	Z, r18
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	a0 e2       	ldi	r26, 0x20	; 32
    1824:	b1 e4       	ldi	r27, 0x41	; 65
    1826:	89 83       	std	Y+1, r24	; 0x01
    1828:	9a 83       	std	Y+2, r25	; 0x02
    182a:	ab 83       	std	Y+3, r26	; 0x03
    182c:	bc 83       	std	Y+4, r27	; 0x04
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	4a e7       	ldi	r20, 0x7A	; 122
    1834:	53 e4       	ldi	r21, 0x43	; 67
    1836:	69 81       	ldd	r22, Y+1	; 0x01
    1838:	7a 81       	ldd	r23, Y+2	; 0x02
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	9c 81       	ldd	r25, Y+4	; 0x04
    183e:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	8b 8b       	std	Y+19, r24	; 0x13
    1848:	9c 8b       	std	Y+20, r25	; 0x14
    184a:	ad 8b       	std	Y+21, r26	; 0x15
    184c:	be 8b       	std	Y+22, r27	; 0x16
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e8       	ldi	r20, 0x80	; 128
    1854:	5f e3       	ldi	r21, 0x3F	; 63
    1856:	6b 89       	ldd	r22, Y+19	; 0x13
    1858:	7c 89       	ldd	r23, Y+20	; 0x14
    185a:	8d 89       	ldd	r24, Y+21	; 0x15
    185c:	9e 89       	ldd	r25, Y+22	; 0x16
    185e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__cmpsf2>
    1862:	88 23       	and	r24, r24
    1864:	2c f4       	brge	.+10     	; 0x1870 <nokia_lcd_init+0xe8>
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	98 8f       	std	Y+24, r25	; 0x18
    186c:	8f 8b       	std	Y+23, r24	; 0x17
    186e:	3f c0       	rjmp	.+126    	; 0x18ee <nokia_lcd_init+0x166>
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	3f ef       	ldi	r19, 0xFF	; 255
    1874:	4f e7       	ldi	r20, 0x7F	; 127
    1876:	57 e4       	ldi	r21, 0x47	; 71
    1878:	6b 89       	ldd	r22, Y+19	; 0x13
    187a:	7c 89       	ldd	r23, Y+20	; 0x14
    187c:	8d 89       	ldd	r24, Y+21	; 0x15
    187e:	9e 89       	ldd	r25, Y+22	; 0x16
    1880:	0e 94 2e 10 	call	0x205c	; 0x205c <__gesf2>
    1884:	18 16       	cp	r1, r24
    1886:	4c f5       	brge	.+82     	; 0x18da <nokia_lcd_init+0x152>
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e2       	ldi	r20, 0x20	; 32
    188e:	51 e4       	ldi	r21, 0x41	; 65
    1890:	69 81       	ldd	r22, Y+1	; 0x01
    1892:	7a 81       	ldd	r23, Y+2	; 0x02
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	9c 81       	ldd	r25, Y+4	; 0x04
    1898:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	bc 01       	movw	r22, r24
    18a2:	cd 01       	movw	r24, r26
    18a4:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	98 8f       	std	Y+24, r25	; 0x18
    18ae:	8f 8b       	std	Y+23, r24	; 0x17
    18b0:	0f c0       	rjmp	.+30     	; 0x18d0 <nokia_lcd_init+0x148>
    18b2:	89 e1       	ldi	r24, 0x19	; 25
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	9a 8f       	std	Y+26, r25	; 0x1a
    18b8:	89 8f       	std	Y+25, r24	; 0x19
    18ba:	89 8d       	ldd	r24, Y+25	; 0x19
    18bc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	f1 f7       	brne	.-4      	; 0x18be <nokia_lcd_init+0x136>
    18c2:	9a 8f       	std	Y+26, r25	; 0x1a
    18c4:	89 8f       	std	Y+25, r24	; 0x19
    18c6:	8f 89       	ldd	r24, Y+23	; 0x17
    18c8:	98 8d       	ldd	r25, Y+24	; 0x18
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	98 8f       	std	Y+24, r25	; 0x18
    18ce:	8f 8b       	std	Y+23, r24	; 0x17
    18d0:	8f 89       	ldd	r24, Y+23	; 0x17
    18d2:	98 8d       	ldd	r25, Y+24	; 0x18
    18d4:	89 2b       	or	r24, r25
    18d6:	69 f7       	brne	.-38     	; 0x18b2 <nokia_lcd_init+0x12a>
    18d8:	14 c0       	rjmp	.+40     	; 0x1902 <nokia_lcd_init+0x17a>
    18da:	6b 89       	ldd	r22, Y+19	; 0x13
    18dc:	7c 89       	ldd	r23, Y+20	; 0x14
    18de:	8d 89       	ldd	r24, Y+21	; 0x15
    18e0:	9e 89       	ldd	r25, Y+22	; 0x16
    18e2:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	98 8f       	std	Y+24, r25	; 0x18
    18ec:	8f 8b       	std	Y+23, r24	; 0x17
    18ee:	8f 89       	ldd	r24, Y+23	; 0x17
    18f0:	98 8d       	ldd	r25, Y+24	; 0x18
    18f2:	9c 8f       	std	Y+28, r25	; 0x1c
    18f4:	8b 8f       	std	Y+27, r24	; 0x1b
    18f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	f1 f7       	brne	.-4      	; 0x18fa <nokia_lcd_init+0x172>
    18fe:	9c 8f       	std	Y+28, r25	; 0x1c
    1900:	8b 8f       	std	Y+27, r24	; 0x1b
    1902:	85 e2       	ldi	r24, 0x25	; 37
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	25 e2       	ldi	r18, 0x25	; 37
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	f9 01       	movw	r30, r18
    190c:	20 81       	ld	r18, Z
    190e:	2b 7f       	andi	r18, 0xFB	; 251
    1910:	fc 01       	movw	r30, r24
    1912:	20 83       	st	Z, r18
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	ac e8       	ldi	r26, 0x8C	; 140
    191a:	b2 e4       	ldi	r27, 0x42	; 66
    191c:	8d 83       	std	Y+5, r24	; 0x05
    191e:	9e 83       	std	Y+6, r25	; 0x06
    1920:	af 83       	std	Y+7, r26	; 0x07
    1922:	b8 87       	std	Y+8, r27	; 0x08
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	4a e7       	ldi	r20, 0x7A	; 122
    192a:	53 e4       	ldi	r21, 0x43	; 67
    192c:	6d 81       	ldd	r22, Y+5	; 0x05
    192e:	7e 81       	ldd	r23, Y+6	; 0x06
    1930:	8f 81       	ldd	r24, Y+7	; 0x07
    1932:	98 85       	ldd	r25, Y+8	; 0x08
    1934:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	89 87       	std	Y+9, r24	; 0x09
    193e:	9a 87       	std	Y+10, r25	; 0x0a
    1940:	ab 87       	std	Y+11, r26	; 0x0b
    1942:	bc 87       	std	Y+12, r27	; 0x0c
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	40 e8       	ldi	r20, 0x80	; 128
    194a:	5f e3       	ldi	r21, 0x3F	; 63
    194c:	69 85       	ldd	r22, Y+9	; 0x09
    194e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1950:	8b 85       	ldd	r24, Y+11	; 0x0b
    1952:	9c 85       	ldd	r25, Y+12	; 0x0c
    1954:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__cmpsf2>
    1958:	88 23       	and	r24, r24
    195a:	2c f4       	brge	.+10     	; 0x1966 <nokia_lcd_init+0x1de>
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	9e 87       	std	Y+14, r25	; 0x0e
    1962:	8d 87       	std	Y+13, r24	; 0x0d
    1964:	3f c0       	rjmp	.+126    	; 0x19e4 <nokia_lcd_init+0x25c>
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	3f ef       	ldi	r19, 0xFF	; 255
    196a:	4f e7       	ldi	r20, 0x7F	; 127
    196c:	57 e4       	ldi	r21, 0x47	; 71
    196e:	69 85       	ldd	r22, Y+9	; 0x09
    1970:	7a 85       	ldd	r23, Y+10	; 0x0a
    1972:	8b 85       	ldd	r24, Y+11	; 0x0b
    1974:	9c 85       	ldd	r25, Y+12	; 0x0c
    1976:	0e 94 2e 10 	call	0x205c	; 0x205c <__gesf2>
    197a:	18 16       	cp	r1, r24
    197c:	4c f5       	brge	.+82     	; 0x19d0 <nokia_lcd_init+0x248>
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e2       	ldi	r20, 0x20	; 32
    1984:	51 e4       	ldi	r21, 0x41	; 65
    1986:	6d 81       	ldd	r22, Y+5	; 0x05
    1988:	7e 81       	ldd	r23, Y+6	; 0x06
    198a:	8f 81       	ldd	r24, Y+7	; 0x07
    198c:	98 85       	ldd	r25, Y+8	; 0x08
    198e:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	bc 01       	movw	r22, r24
    1998:	cd 01       	movw	r24, r26
    199a:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	9e 87       	std	Y+14, r25	; 0x0e
    19a4:	8d 87       	std	Y+13, r24	; 0x0d
    19a6:	0f c0       	rjmp	.+30     	; 0x19c6 <nokia_lcd_init+0x23e>
    19a8:	89 e1       	ldi	r24, 0x19	; 25
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	98 8b       	std	Y+16, r25	; 0x10
    19ae:	8f 87       	std	Y+15, r24	; 0x0f
    19b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b2:	98 89       	ldd	r25, Y+16	; 0x10
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	f1 f7       	brne	.-4      	; 0x19b4 <nokia_lcd_init+0x22c>
    19b8:	98 8b       	std	Y+16, r25	; 0x10
    19ba:	8f 87       	std	Y+15, r24	; 0x0f
    19bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19be:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	9e 87       	std	Y+14, r25	; 0x0e
    19c4:	8d 87       	std	Y+13, r24	; 0x0d
    19c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ca:	89 2b       	or	r24, r25
    19cc:	69 f7       	brne	.-38     	; 0x19a8 <nokia_lcd_init+0x220>
    19ce:	14 c0       	rjmp	.+40     	; 0x19f8 <nokia_lcd_init+0x270>
    19d0:	69 85       	ldd	r22, Y+9	; 0x09
    19d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    19d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    19d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    19d8:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	9e 87       	std	Y+14, r25	; 0x0e
    19e2:	8d 87       	std	Y+13, r24	; 0x0d
    19e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e8:	9a 8b       	std	Y+18, r25	; 0x12
    19ea:	89 8b       	std	Y+17, r24	; 0x11
    19ec:	89 89       	ldd	r24, Y+17	; 0x11
    19ee:	9a 89       	ldd	r25, Y+18	; 0x12
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <nokia_lcd_init+0x268>
    19f4:	9a 8b       	std	Y+18, r25	; 0x12
    19f6:	89 8b       	std	Y+17, r24	; 0x11
    19f8:	85 e2       	ldi	r24, 0x25	; 37
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	25 e2       	ldi	r18, 0x25	; 37
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	f9 01       	movw	r30, r18
    1a02:	20 81       	ld	r18, Z
    1a04:	24 60       	ori	r18, 0x04	; 4
    1a06:	fc 01       	movw	r30, r24
    1a08:	20 83       	st	Z, r18
    1a0a:	85 e2       	ldi	r24, 0x25	; 37
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	25 e2       	ldi	r18, 0x25	; 37
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	f9 01       	movw	r30, r18
    1a14:	20 81       	ld	r18, Z
    1a16:	2d 7f       	andi	r18, 0xFD	; 253
    1a18:	fc 01       	movw	r30, r24
    1a1a:	20 83       	st	Z, r18
    1a1c:	81 e2       	ldi	r24, 0x21	; 33
    1a1e:	0e 94 a6 0b 	call	0x174c	; 0x174c <write_cmd>
    1a22:	83 e1       	ldi	r24, 0x13	; 19
    1a24:	0e 94 a6 0b 	call	0x174c	; 0x174c <write_cmd>
    1a28:	86 e0       	ldi	r24, 0x06	; 6
    1a2a:	0e 94 a6 0b 	call	0x174c	; 0x174c <write_cmd>
    1a2e:	82 ec       	ldi	r24, 0xC2	; 194
    1a30:	0e 94 a6 0b 	call	0x174c	; 0x174c <write_cmd>
    1a34:	80 e2       	ldi	r24, 0x20	; 32
    1a36:	0e 94 a6 0b 	call	0x174c	; 0x174c <write_cmd>
    1a3a:	89 e0       	ldi	r24, 0x09	; 9
    1a3c:	0e 94 a6 0b 	call	0x174c	; 0x174c <write_cmd>
    1a40:	80 e8       	ldi	r24, 0x80	; 128
    1a42:	0e 94 a6 0b 	call	0x174c	; 0x174c <write_cmd>
    1a46:	80 e4       	ldi	r24, 0x40	; 64
    1a48:	0e 94 a6 0b 	call	0x174c	; 0x174c <write_cmd>
    1a4c:	00 e0       	ldi	r16, 0x00	; 0
    1a4e:	10 e0       	ldi	r17, 0x00	; 0
    1a50:	05 c0       	rjmp	.+10     	; 0x1a5c <nokia_lcd_init+0x2d4>
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	0e 94 b5 0b 	call	0x176a	; 0x176a <write_data>
    1a58:	0f 5f       	subi	r16, 0xFF	; 255
    1a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5c:	08 3f       	cpi	r16, 0xF8	; 248
    1a5e:	f1 e0       	ldi	r31, 0x01	; 1
    1a60:	1f 07       	cpc	r17, r31
    1a62:	b8 f3       	brcs	.-18     	; 0x1a52 <nokia_lcd_init+0x2ca>
    1a64:	88 e0       	ldi	r24, 0x08	; 8
    1a66:	0e 94 a6 0b 	call	0x174c	; 0x174c <write_cmd>
    1a6a:	8c e0       	ldi	r24, 0x0C	; 12
    1a6c:	0e 94 a6 0b 	call	0x174c	; 0x174c <write_cmd>
    1a70:	00 00       	nop
    1a72:	6c 96       	adiw	r28, 0x1c	; 28
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	cd bf       	out	0x3d, r28	; 61
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	1f 91       	pop	r17
    1a84:	0f 91       	pop	r16
    1a86:	08 95       	ret

00001a88 <nokia_lcd_clear>:
    1a88:	0f 93       	push	r16
    1a8a:	1f 93       	push	r17
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	80 e8       	ldi	r24, 0x80	; 128
    1a96:	0e 94 a6 0b 	call	0x174c	; 0x174c <write_cmd>
    1a9a:	80 e4       	ldi	r24, 0x40	; 64
    1a9c:	0e 94 a6 0b 	call	0x174c	; 0x174c <write_cmd>
    1aa0:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <nokia_lcd+0x1f8>
    1aa4:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <nokia_lcd+0x1f9>
    1aa8:	00 e0       	ldi	r16, 0x00	; 0
    1aaa:	10 e0       	ldi	r17, 0x00	; 0
    1aac:	07 c0       	rjmp	.+14     	; 0x1abc <nokia_lcd_clear+0x34>
    1aae:	c8 01       	movw	r24, r16
    1ab0:	8e 50       	subi	r24, 0x0E	; 14
    1ab2:	9e 4f       	sbci	r25, 0xFE	; 254
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	10 82       	st	Z, r1
    1ab8:	0f 5f       	subi	r16, 0xFF	; 255
    1aba:	1f 4f       	sbci	r17, 0xFF	; 255
    1abc:	08 3f       	cpi	r16, 0xF8	; 248
    1abe:	f1 e0       	ldi	r31, 0x01	; 1
    1ac0:	1f 07       	cpc	r17, r31
    1ac2:	a8 f3       	brcs	.-22     	; 0x1aae <nokia_lcd_clear+0x26>
    1ac4:	00 00       	nop
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	08 95       	ret

00001ad0 <nokia_lcd_set_pixel>:

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <nokia_lcd_set_pixel+0x6>
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <nokia_lcd_set_pixel+0x8>
    1ad8:	1f 92       	push	r1
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	8b 83       	std	Y+3, r24	; 0x03
    1ae0:	6c 83       	std	Y+4, r22	; 0x04
    1ae2:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
    1ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae6:	86 95       	lsr	r24
    1ae8:	86 95       	lsr	r24
    1aea:	86 95       	lsr	r24
    1aec:	88 2f       	mov	r24, r24
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	44 e5       	ldi	r20, 0x54	; 84
    1af2:	48 9f       	mul	r20, r24
    1af4:	90 01       	movw	r18, r0
    1af6:	49 9f       	mul	r20, r25
    1af8:	30 0d       	add	r19, r0
    1afa:	11 24       	eor	r1, r1
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	88 2f       	mov	r24, r24
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	82 0f       	add	r24, r18
    1b04:	93 1f       	adc	r25, r19
    1b06:	8e 50       	subi	r24, 0x0E	; 14
    1b08:	9e 4f       	sbci	r25, 0xFE	; 254
    1b0a:	9a 83       	std	Y+2, r25	; 0x02
    1b0c:	89 83       	std	Y+1, r24	; 0x01
	if (value)
    1b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b10:	88 23       	and	r24, r24
    1b12:	c9 f0       	breq	.+50     	; 0x1b46 <nokia_lcd_set_pixel+0x76>
		*byte |= (1 << (y % 8));
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	9a 81       	ldd	r25, Y+2	; 0x02
    1b18:	fc 01       	movw	r30, r24
    1b1a:	80 81       	ld	r24, Z
    1b1c:	48 2f       	mov	r20, r24
    1b1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	9c 01       	movw	r18, r24
    1b26:	27 70       	andi	r18, 0x07	; 7
    1b28:	33 27       	eor	r19, r19
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <nokia_lcd_set_pixel+0x64>
    1b30:	88 0f       	add	r24, r24
    1b32:	99 1f       	adc	r25, r25
    1b34:	2a 95       	dec	r18
    1b36:	e2 f7       	brpl	.-8      	; 0x1b30 <nokia_lcd_set_pixel+0x60>
    1b38:	84 2b       	or	r24, r20
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b40:	fc 01       	movw	r30, r24
    1b42:	20 83       	st	Z, r18
	else
		*byte &= ~(1 << (y %8 ));
}
    1b44:	19 c0       	rjmp	.+50     	; 0x1b78 <nokia_lcd_set_pixel+0xa8>
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
	if (value)
		*byte |= (1 << (y % 8));
	else
		*byte &= ~(1 << (y %8 ));
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	80 81       	ld	r24, Z
    1b4e:	48 2f       	mov	r20, r24
    1b50:	8c 81       	ldd	r24, Y+4	; 0x04
    1b52:	88 2f       	mov	r24, r24
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	9c 01       	movw	r18, r24
    1b58:	27 70       	andi	r18, 0x07	; 7
    1b5a:	33 27       	eor	r19, r19
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <nokia_lcd_set_pixel+0x96>
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	2a 95       	dec	r18
    1b68:	e2 f7       	brpl	.-8      	; 0x1b62 <nokia_lcd_set_pixel+0x92>
    1b6a:	80 95       	com	r24
    1b6c:	84 23       	and	r24, r20
    1b6e:	28 2f       	mov	r18, r24
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	9a 81       	ldd	r25, Y+2	; 0x02
    1b74:	fc 01       	movw	r30, r24
    1b76:	20 83       	st	Z, r18
}
    1b78:	00 00       	nop
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	df 91       	pop	r29
    1b86:	cf 91       	pop	r28
    1b88:	08 95       	ret

00001b8a <nokia_lcd_write_char>:

void nokia_lcd_write_char(char code, uint8_t scale)
{
    1b8a:	0f 93       	push	r16
    1b8c:	1f 93       	push	r17
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <nokia_lcd_write_char+0xa>
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <nokia_lcd_write_char+0xc>
    1b96:	1f 92       	push	r1
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	8c 83       	std	Y+4, r24	; 0x04
    1b9e:	6d 83       	std	Y+5, r22	; 0x05
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    1ba0:	10 e0       	ldi	r17, 0x00	; 0
    1ba2:	65 c0       	rjmp	.+202    	; 0x1c6e <nokia_lcd_write_char+0xe4>
		for (y = 0; y < 7*scale; y++)
    1ba4:	00 e0       	ldi	r16, 0x00	; 0
    1ba6:	4e c0       	rjmp	.+156    	; 0x1c44 <nokia_lcd_write_char+0xba>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    1ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    1baa:	88 2f       	mov	r24, r24
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	9c 01       	movw	r18, r24
    1bb0:	20 52       	subi	r18, 0x20	; 32
    1bb2:	31 09       	sbc	r19, r1
    1bb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb6:	81 2f       	mov	r24, r17
    1bb8:	69 2f       	mov	r22, r25
    1bba:	0e 94 a0 10 	call	0x2140	; 0x2140 <__udivmodqi4>
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	50 e0       	ldi	r21, 0x00	; 0
    1bc2:	c9 01       	movw	r24, r18
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	88 0f       	add	r24, r24
    1bca:	99 1f       	adc	r25, r25
    1bcc:	82 0f       	add	r24, r18
    1bce:	93 1f       	adc	r25, r19
    1bd0:	84 0f       	add	r24, r20
    1bd2:	95 1f       	adc	r25, r21
    1bd4:	88 59       	subi	r24, 0x98	; 152
    1bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd8:	9a 83       	std	Y+2, r25	; 0x02
    1bda:	89 83       	std	Y+1, r24	; 0x01
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	9a 81       	ldd	r25, Y+2	; 0x02
    1be0:	fc 01       	movw	r30, r24
    1be2:	84 91       	lpm	r24, Z
    1be4:	8b 83       	std	Y+3, r24	; 0x03
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	9d 81       	ldd	r25, Y+5	; 0x05
    1bee:	80 2f       	mov	r24, r16
    1bf0:	69 2f       	mov	r22, r25
    1bf2:	0e 94 a0 10 	call	0x2140	; 0x2140 <__udivmodqi4>
    1bf6:	88 2f       	mov	r24, r24
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	a9 01       	movw	r20, r18
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <nokia_lcd_write_char+0x78>
    1bfe:	55 95       	asr	r21
    1c00:	47 95       	ror	r20
    1c02:	8a 95       	dec	r24
    1c04:	e2 f7       	brpl	.-8      	; 0x1bfe <nokia_lcd_write_char+0x74>
    1c06:	ca 01       	movw	r24, r20
    1c08:	81 70       	andi	r24, 0x01	; 1
    1c0a:	99 27       	eor	r25, r25
    1c0c:	89 2b       	or	r24, r25
    1c0e:	61 f0       	breq	.+24     	; 0x1c28 <nokia_lcd_write_char+0x9e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
    1c10:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <nokia_lcd+0x1f9>
    1c14:	98 2f       	mov	r25, r24
    1c16:	90 0f       	add	r25, r16
    1c18:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <nokia_lcd+0x1f8>
    1c1c:	81 0f       	add	r24, r17
    1c1e:	41 e0       	ldi	r20, 0x01	; 1
    1c20:	69 2f       	mov	r22, r25
    1c22:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <nokia_lcd_set_pixel>
    1c26:	0b c0       	rjmp	.+22     	; 0x1c3e <nokia_lcd_write_char+0xb4>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    1c28:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <nokia_lcd+0x1f9>
    1c2c:	98 2f       	mov	r25, r24
    1c2e:	90 0f       	add	r25, r16
    1c30:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <nokia_lcd+0x1f8>
    1c34:	81 0f       	add	r24, r17
    1c36:	40 e0       	ldi	r20, 0x00	; 0
    1c38:	69 2f       	mov	r22, r25
    1c3a:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
    1c3e:	80 2f       	mov	r24, r16
    1c40:	01 e0       	ldi	r16, 0x01	; 1
    1c42:	08 0f       	add	r16, r24
    1c44:	40 2f       	mov	r20, r16
    1c46:	50 e0       	ldi	r21, 0x00	; 0
    1c48:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	c9 01       	movw	r24, r18
    1c50:	88 0f       	add	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	82 1b       	sub	r24, r18
    1c5e:	93 0b       	sbc	r25, r19
    1c60:	48 17       	cp	r20, r24
    1c62:	59 07       	cpc	r21, r25
    1c64:	0c f4       	brge	.+2      	; 0x1c68 <nokia_lcd_write_char+0xde>
    1c66:	a0 cf       	rjmp	.-192    	; 0x1ba8 <nokia_lcd_write_char+0x1e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    1c68:	81 2f       	mov	r24, r17
    1c6a:	11 e0       	ldi	r17, 0x01	; 1
    1c6c:	18 0f       	add	r17, r24
    1c6e:	41 2f       	mov	r20, r17
    1c70:	50 e0       	ldi	r21, 0x00	; 0
    1c72:	8d 81       	ldd	r24, Y+5	; 0x05
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	c9 01       	movw	r24, r18
    1c7a:	88 0f       	add	r24, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	88 0f       	add	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	82 0f       	add	r24, r18
    1c84:	93 1f       	adc	r25, r19
    1c86:	48 17       	cp	r20, r24
    1c88:	59 07       	cpc	r21, r25
    1c8a:	0c f4       	brge	.+2      	; 0x1c8e <nokia_lcd_write_char+0x104>
    1c8c:	8b cf       	rjmp	.-234    	; 0x1ba4 <nokia_lcd_write_char+0x1a>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    1c8e:	20 91 ea 03 	lds	r18, 0x03EA	; 0x8003ea <nokia_lcd+0x1f8>
    1c92:	9d 81       	ldd	r25, Y+5	; 0x05
    1c94:	89 2f       	mov	r24, r25
    1c96:	88 0f       	add	r24, r24
    1c98:	88 0f       	add	r24, r24
    1c9a:	89 0f       	add	r24, r25
    1c9c:	82 0f       	add	r24, r18
    1c9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ca0:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <nokia_lcd+0x1f8>
	if (nokia_lcd.cursor_x >= 84) {
    1ca4:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <nokia_lcd+0x1f8>
    1ca8:	84 35       	cpi	r24, 0x54	; 84
    1caa:	70 f0       	brcs	.+28     	; 0x1cc8 <nokia_lcd_write_char+0x13e>
		nokia_lcd.cursor_x = 0;
    1cac:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
    1cb0:	20 91 eb 03 	lds	r18, 0x03EB	; 0x8003eb <nokia_lcd+0x1f9>
    1cb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb6:	89 2f       	mov	r24, r25
    1cb8:	88 0f       	add	r24, r24
    1cba:	88 0f       	add	r24, r24
    1cbc:	88 0f       	add	r24, r24
    1cbe:	89 1b       	sub	r24, r25
    1cc0:	82 0f       	add	r24, r18
    1cc2:	8f 5f       	subi	r24, 0xFF	; 255
    1cc4:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <nokia_lcd+0x1f9>
	}
	if (nokia_lcd.cursor_y >= 48) {
    1cc8:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <nokia_lcd+0x1f9>
    1ccc:	80 33       	cpi	r24, 0x30	; 48
    1cce:	20 f0       	brcs	.+8      	; 0x1cd8 <nokia_lcd_write_char+0x14e>
		nokia_lcd.cursor_x = 0;
    1cd0:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
    1cd4:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <nokia_lcd+0x1f9>
	}
}
    1cd8:	00 00       	nop
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	1f 91       	pop	r17
    1cea:	0f 91       	pop	r16
    1cec:	08 95       	ret

00001cee <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
    1cee:	cf 93       	push	r28
    1cf0:	df 93       	push	r29
    1cf2:	00 d0       	rcall	.+0      	; 0x1cf4 <nokia_lcd_write_string+0x6>
    1cf4:	1f 92       	push	r1
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	9a 83       	std	Y+2, r25	; 0x02
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	6b 83       	std	Y+3, r22	; 0x03
	while(*str)
    1d00:	0c c0       	rjmp	.+24     	; 0x1d1a <nokia_lcd_write_string+0x2c>
		nokia_lcd_write_char(*str++, scale);
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	9a 81       	ldd	r25, Y+2	; 0x02
    1d06:	9c 01       	movw	r18, r24
    1d08:	2f 5f       	subi	r18, 0xFF	; 255
    1d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0c:	3a 83       	std	Y+2, r19	; 0x02
    1d0e:	29 83       	std	Y+1, r18	; 0x01
    1d10:	fc 01       	movw	r30, r24
    1d12:	80 81       	ld	r24, Z
    1d14:	6b 81       	ldd	r22, Y+3	; 0x03
    1d16:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1e:	fc 01       	movw	r30, r24
    1d20:	80 81       	ld	r24, Z
    1d22:	88 23       	and	r24, r24
    1d24:	71 f7       	brne	.-36     	; 0x1d02 <nokia_lcd_write_string+0x14>
		nokia_lcd_write_char(*str++, scale);
}
    1d26:	00 00       	nop
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	df 91       	pop	r29
    1d30:	cf 91       	pop	r28
    1d32:	08 95       	ret

00001d34 <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	00 d0       	rcall	.+0      	; 0x1d3a <nokia_lcd_set_cursor+0x6>
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	6a 83       	std	Y+2, r22	; 0x02
	nokia_lcd.cursor_x = x;
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <nokia_lcd+0x1f9>
}
    1d4e:	00 00       	nop
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	08 95       	ret

00001d5a <nokia_lcd_render>:

void nokia_lcd_render(void)
{
    1d5a:	0f 93       	push	r16
    1d5c:	1f 93       	push	r17
    1d5e:	cf 93       	push	r28
    1d60:	df 93       	push	r29
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
    1d66:	80 e8       	ldi	r24, 0x80	; 128
    1d68:	0e 94 a6 0b 	call	0x174c	; 0x174c <write_cmd>
	write_cmd(0x40);
    1d6c:	80 e4       	ldi	r24, 0x40	; 64
    1d6e:	0e 94 a6 0b 	call	0x174c	; 0x174c <write_cmd>

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    1d72:	00 e0       	ldi	r16, 0x00	; 0
    1d74:	10 e0       	ldi	r17, 0x00	; 0
    1d76:	09 c0       	rjmp	.+18     	; 0x1d8a <nokia_lcd_render+0x30>
		write_data(nokia_lcd.screen[i]);
    1d78:	c8 01       	movw	r24, r16
    1d7a:	8e 50       	subi	r24, 0x0E	; 14
    1d7c:	9e 4f       	sbci	r25, 0xFE	; 254
    1d7e:	fc 01       	movw	r30, r24
    1d80:	80 81       	ld	r24, Z
    1d82:	0e 94 b5 0b 	call	0x176a	; 0x176a <write_data>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    1d86:	0f 5f       	subi	r16, 0xFF	; 255
    1d88:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8a:	08 3f       	cpi	r16, 0xF8	; 248
    1d8c:	f1 e0       	ldi	r31, 0x01	; 1
    1d8e:	1f 07       	cpc	r17, r31
    1d90:	98 f3       	brcs	.-26     	; 0x1d78 <nokia_lcd_render+0x1e>
		write_data(nokia_lcd.screen[i]);
}
    1d92:	00 00       	nop
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	08 95       	ret

00001d9e <__cmpsf2>:
    1d9e:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fp_cmp>
    1da2:	08 f4       	brcc	.+2      	; 0x1da6 <__cmpsf2+0x8>
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	08 95       	ret

00001da8 <__divsf3>:
    1da8:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__divsf3x>
    1dac:	0c 94 f4 0f 	jmp	0x1fe8	; 0x1fe8 <__fp_round>
    1db0:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__fp_pscB>
    1db4:	58 f0       	brcs	.+22     	; 0x1dcc <__divsf3+0x24>
    1db6:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__fp_pscA>
    1dba:	40 f0       	brcs	.+16     	; 0x1dcc <__divsf3+0x24>
    1dbc:	29 f4       	brne	.+10     	; 0x1dc8 <__divsf3+0x20>
    1dbe:	5f 3f       	cpi	r21, 0xFF	; 255
    1dc0:	29 f0       	breq	.+10     	; 0x1dcc <__divsf3+0x24>
    1dc2:	0c 94 dd 0f 	jmp	0x1fba	; 0x1fba <__fp_inf>
    1dc6:	51 11       	cpse	r21, r1
    1dc8:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__fp_szero>
    1dcc:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <__fp_nan>

00001dd0 <__divsf3x>:
    1dd0:	0e 94 05 10 	call	0x200a	; 0x200a <__fp_split3>
    1dd4:	68 f3       	brcs	.-38     	; 0x1db0 <__divsf3+0x8>

00001dd6 <__divsf3_pse>:
    1dd6:	99 23       	and	r25, r25
    1dd8:	b1 f3       	breq	.-20     	; 0x1dc6 <__divsf3+0x1e>
    1dda:	55 23       	and	r21, r21
    1ddc:	91 f3       	breq	.-28     	; 0x1dc2 <__divsf3+0x1a>
    1dde:	95 1b       	sub	r25, r21
    1de0:	55 0b       	sbc	r21, r21
    1de2:	bb 27       	eor	r27, r27
    1de4:	aa 27       	eor	r26, r26
    1de6:	62 17       	cp	r22, r18
    1de8:	73 07       	cpc	r23, r19
    1dea:	84 07       	cpc	r24, r20
    1dec:	38 f0       	brcs	.+14     	; 0x1dfc <__divsf3_pse+0x26>
    1dee:	9f 5f       	subi	r25, 0xFF	; 255
    1df0:	5f 4f       	sbci	r21, 0xFF	; 255
    1df2:	22 0f       	add	r18, r18
    1df4:	33 1f       	adc	r19, r19
    1df6:	44 1f       	adc	r20, r20
    1df8:	aa 1f       	adc	r26, r26
    1dfa:	a9 f3       	breq	.-22     	; 0x1de6 <__divsf3_pse+0x10>
    1dfc:	35 d0       	rcall	.+106    	; 0x1e68 <__divsf3_pse+0x92>
    1dfe:	0e 2e       	mov	r0, r30
    1e00:	3a f0       	brmi	.+14     	; 0x1e10 <__divsf3_pse+0x3a>
    1e02:	e0 e8       	ldi	r30, 0x80	; 128
    1e04:	32 d0       	rcall	.+100    	; 0x1e6a <__divsf3_pse+0x94>
    1e06:	91 50       	subi	r25, 0x01	; 1
    1e08:	50 40       	sbci	r21, 0x00	; 0
    1e0a:	e6 95       	lsr	r30
    1e0c:	00 1c       	adc	r0, r0
    1e0e:	ca f7       	brpl	.-14     	; 0x1e02 <__divsf3_pse+0x2c>
    1e10:	2b d0       	rcall	.+86     	; 0x1e68 <__divsf3_pse+0x92>
    1e12:	fe 2f       	mov	r31, r30
    1e14:	29 d0       	rcall	.+82     	; 0x1e68 <__divsf3_pse+0x92>
    1e16:	66 0f       	add	r22, r22
    1e18:	77 1f       	adc	r23, r23
    1e1a:	88 1f       	adc	r24, r24
    1e1c:	bb 1f       	adc	r27, r27
    1e1e:	26 17       	cp	r18, r22
    1e20:	37 07       	cpc	r19, r23
    1e22:	48 07       	cpc	r20, r24
    1e24:	ab 07       	cpc	r26, r27
    1e26:	b0 e8       	ldi	r27, 0x80	; 128
    1e28:	09 f0       	breq	.+2      	; 0x1e2c <__divsf3_pse+0x56>
    1e2a:	bb 0b       	sbc	r27, r27
    1e2c:	80 2d       	mov	r24, r0
    1e2e:	bf 01       	movw	r22, r30
    1e30:	ff 27       	eor	r31, r31
    1e32:	93 58       	subi	r25, 0x83	; 131
    1e34:	5f 4f       	sbci	r21, 0xFF	; 255
    1e36:	3a f0       	brmi	.+14     	; 0x1e46 <__divsf3_pse+0x70>
    1e38:	9e 3f       	cpi	r25, 0xFE	; 254
    1e3a:	51 05       	cpc	r21, r1
    1e3c:	78 f0       	brcs	.+30     	; 0x1e5c <__divsf3_pse+0x86>
    1e3e:	0c 94 dd 0f 	jmp	0x1fba	; 0x1fba <__fp_inf>
    1e42:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__fp_szero>
    1e46:	5f 3f       	cpi	r21, 0xFF	; 255
    1e48:	e4 f3       	brlt	.-8      	; 0x1e42 <__divsf3_pse+0x6c>
    1e4a:	98 3e       	cpi	r25, 0xE8	; 232
    1e4c:	d4 f3       	brlt	.-12     	; 0x1e42 <__divsf3_pse+0x6c>
    1e4e:	86 95       	lsr	r24
    1e50:	77 95       	ror	r23
    1e52:	67 95       	ror	r22
    1e54:	b7 95       	ror	r27
    1e56:	f7 95       	ror	r31
    1e58:	9f 5f       	subi	r25, 0xFF	; 255
    1e5a:	c9 f7       	brne	.-14     	; 0x1e4e <__divsf3_pse+0x78>
    1e5c:	88 0f       	add	r24, r24
    1e5e:	91 1d       	adc	r25, r1
    1e60:	96 95       	lsr	r25
    1e62:	87 95       	ror	r24
    1e64:	97 f9       	bld	r25, 7
    1e66:	08 95       	ret
    1e68:	e1 e0       	ldi	r30, 0x01	; 1
    1e6a:	66 0f       	add	r22, r22
    1e6c:	77 1f       	adc	r23, r23
    1e6e:	88 1f       	adc	r24, r24
    1e70:	bb 1f       	adc	r27, r27
    1e72:	62 17       	cp	r22, r18
    1e74:	73 07       	cpc	r23, r19
    1e76:	84 07       	cpc	r24, r20
    1e78:	ba 07       	cpc	r27, r26
    1e7a:	20 f0       	brcs	.+8      	; 0x1e84 <__divsf3_pse+0xae>
    1e7c:	62 1b       	sub	r22, r18
    1e7e:	73 0b       	sbc	r23, r19
    1e80:	84 0b       	sbc	r24, r20
    1e82:	ba 0b       	sbc	r27, r26
    1e84:	ee 1f       	adc	r30, r30
    1e86:	88 f7       	brcc	.-30     	; 0x1e6a <__divsf3_pse+0x94>
    1e88:	e0 95       	com	r30
    1e8a:	08 95       	ret

00001e8c <__fixsfsi>:
    1e8c:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixunssfsi>
    1e90:	68 94       	set
    1e92:	b1 11       	cpse	r27, r1
    1e94:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__fp_szero>
    1e98:	08 95       	ret

00001e9a <__fixunssfsi>:
    1e9a:	0e 94 0d 10 	call	0x201a	; 0x201a <__fp_splitA>
    1e9e:	88 f0       	brcs	.+34     	; 0x1ec2 <__fixunssfsi+0x28>
    1ea0:	9f 57       	subi	r25, 0x7F	; 127
    1ea2:	98 f0       	brcs	.+38     	; 0x1eca <__fixunssfsi+0x30>
    1ea4:	b9 2f       	mov	r27, r25
    1ea6:	99 27       	eor	r25, r25
    1ea8:	b7 51       	subi	r27, 0x17	; 23
    1eaa:	b0 f0       	brcs	.+44     	; 0x1ed8 <__fixunssfsi+0x3e>
    1eac:	e1 f0       	breq	.+56     	; 0x1ee6 <__fixunssfsi+0x4c>
    1eae:	66 0f       	add	r22, r22
    1eb0:	77 1f       	adc	r23, r23
    1eb2:	88 1f       	adc	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	1a f0       	brmi	.+6      	; 0x1ebe <__fixunssfsi+0x24>
    1eb8:	ba 95       	dec	r27
    1eba:	c9 f7       	brne	.-14     	; 0x1eae <__fixunssfsi+0x14>
    1ebc:	14 c0       	rjmp	.+40     	; 0x1ee6 <__fixunssfsi+0x4c>
    1ebe:	b1 30       	cpi	r27, 0x01	; 1
    1ec0:	91 f0       	breq	.+36     	; 0x1ee6 <__fixunssfsi+0x4c>
    1ec2:	0e 94 27 10 	call	0x204e	; 0x204e <__fp_zero>
    1ec6:	b1 e0       	ldi	r27, 0x01	; 1
    1ec8:	08 95       	ret
    1eca:	0c 94 27 10 	jmp	0x204e	; 0x204e <__fp_zero>
    1ece:	67 2f       	mov	r22, r23
    1ed0:	78 2f       	mov	r23, r24
    1ed2:	88 27       	eor	r24, r24
    1ed4:	b8 5f       	subi	r27, 0xF8	; 248
    1ed6:	39 f0       	breq	.+14     	; 0x1ee6 <__fixunssfsi+0x4c>
    1ed8:	b9 3f       	cpi	r27, 0xF9	; 249
    1eda:	cc f3       	brlt	.-14     	; 0x1ece <__fixunssfsi+0x34>
    1edc:	86 95       	lsr	r24
    1ede:	77 95       	ror	r23
    1ee0:	67 95       	ror	r22
    1ee2:	b3 95       	inc	r27
    1ee4:	d9 f7       	brne	.-10     	; 0x1edc <__fixunssfsi+0x42>
    1ee6:	3e f4       	brtc	.+14     	; 0x1ef6 <__fixunssfsi+0x5c>
    1ee8:	90 95       	com	r25
    1eea:	80 95       	com	r24
    1eec:	70 95       	com	r23
    1eee:	61 95       	neg	r22
    1ef0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef6:	08 95       	ret

00001ef8 <__floatunsisf>:
    1ef8:	e8 94       	clt
    1efa:	09 c0       	rjmp	.+18     	; 0x1f0e <__floatsisf+0x12>

00001efc <__floatsisf>:
    1efc:	97 fb       	bst	r25, 7
    1efe:	3e f4       	brtc	.+14     	; 0x1f0e <__floatsisf+0x12>
    1f00:	90 95       	com	r25
    1f02:	80 95       	com	r24
    1f04:	70 95       	com	r23
    1f06:	61 95       	neg	r22
    1f08:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0e:	99 23       	and	r25, r25
    1f10:	a9 f0       	breq	.+42     	; 0x1f3c <__floatsisf+0x40>
    1f12:	f9 2f       	mov	r31, r25
    1f14:	96 e9       	ldi	r25, 0x96	; 150
    1f16:	bb 27       	eor	r27, r27
    1f18:	93 95       	inc	r25
    1f1a:	f6 95       	lsr	r31
    1f1c:	87 95       	ror	r24
    1f1e:	77 95       	ror	r23
    1f20:	67 95       	ror	r22
    1f22:	b7 95       	ror	r27
    1f24:	f1 11       	cpse	r31, r1
    1f26:	f8 cf       	rjmp	.-16     	; 0x1f18 <__floatsisf+0x1c>
    1f28:	fa f4       	brpl	.+62     	; 0x1f68 <__floatsisf+0x6c>
    1f2a:	bb 0f       	add	r27, r27
    1f2c:	11 f4       	brne	.+4      	; 0x1f32 <__floatsisf+0x36>
    1f2e:	60 ff       	sbrs	r22, 0
    1f30:	1b c0       	rjmp	.+54     	; 0x1f68 <__floatsisf+0x6c>
    1f32:	6f 5f       	subi	r22, 0xFF	; 255
    1f34:	7f 4f       	sbci	r23, 0xFF	; 255
    1f36:	8f 4f       	sbci	r24, 0xFF	; 255
    1f38:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3a:	16 c0       	rjmp	.+44     	; 0x1f68 <__floatsisf+0x6c>
    1f3c:	88 23       	and	r24, r24
    1f3e:	11 f0       	breq	.+4      	; 0x1f44 <__floatsisf+0x48>
    1f40:	96 e9       	ldi	r25, 0x96	; 150
    1f42:	11 c0       	rjmp	.+34     	; 0x1f66 <__floatsisf+0x6a>
    1f44:	77 23       	and	r23, r23
    1f46:	21 f0       	breq	.+8      	; 0x1f50 <__floatsisf+0x54>
    1f48:	9e e8       	ldi	r25, 0x8E	; 142
    1f4a:	87 2f       	mov	r24, r23
    1f4c:	76 2f       	mov	r23, r22
    1f4e:	05 c0       	rjmp	.+10     	; 0x1f5a <__floatsisf+0x5e>
    1f50:	66 23       	and	r22, r22
    1f52:	71 f0       	breq	.+28     	; 0x1f70 <__floatsisf+0x74>
    1f54:	96 e8       	ldi	r25, 0x86	; 134
    1f56:	86 2f       	mov	r24, r22
    1f58:	70 e0       	ldi	r23, 0x00	; 0
    1f5a:	60 e0       	ldi	r22, 0x00	; 0
    1f5c:	2a f0       	brmi	.+10     	; 0x1f68 <__floatsisf+0x6c>
    1f5e:	9a 95       	dec	r25
    1f60:	66 0f       	add	r22, r22
    1f62:	77 1f       	adc	r23, r23
    1f64:	88 1f       	adc	r24, r24
    1f66:	da f7       	brpl	.-10     	; 0x1f5e <__floatsisf+0x62>
    1f68:	88 0f       	add	r24, r24
    1f6a:	96 95       	lsr	r25
    1f6c:	87 95       	ror	r24
    1f6e:	97 f9       	bld	r25, 7
    1f70:	08 95       	ret

00001f72 <__fp_cmp>:
    1f72:	99 0f       	add	r25, r25
    1f74:	00 08       	sbc	r0, r0
    1f76:	55 0f       	add	r21, r21
    1f78:	aa 0b       	sbc	r26, r26
    1f7a:	e0 e8       	ldi	r30, 0x80	; 128
    1f7c:	fe ef       	ldi	r31, 0xFE	; 254
    1f7e:	16 16       	cp	r1, r22
    1f80:	17 06       	cpc	r1, r23
    1f82:	e8 07       	cpc	r30, r24
    1f84:	f9 07       	cpc	r31, r25
    1f86:	c0 f0       	brcs	.+48     	; 0x1fb8 <__fp_cmp+0x46>
    1f88:	12 16       	cp	r1, r18
    1f8a:	13 06       	cpc	r1, r19
    1f8c:	e4 07       	cpc	r30, r20
    1f8e:	f5 07       	cpc	r31, r21
    1f90:	98 f0       	brcs	.+38     	; 0x1fb8 <__fp_cmp+0x46>
    1f92:	62 1b       	sub	r22, r18
    1f94:	73 0b       	sbc	r23, r19
    1f96:	84 0b       	sbc	r24, r20
    1f98:	95 0b       	sbc	r25, r21
    1f9a:	39 f4       	brne	.+14     	; 0x1faa <__fp_cmp+0x38>
    1f9c:	0a 26       	eor	r0, r26
    1f9e:	61 f0       	breq	.+24     	; 0x1fb8 <__fp_cmp+0x46>
    1fa0:	23 2b       	or	r18, r19
    1fa2:	24 2b       	or	r18, r20
    1fa4:	25 2b       	or	r18, r21
    1fa6:	21 f4       	brne	.+8      	; 0x1fb0 <__fp_cmp+0x3e>
    1fa8:	08 95       	ret
    1faa:	0a 26       	eor	r0, r26
    1fac:	09 f4       	brne	.+2      	; 0x1fb0 <__fp_cmp+0x3e>
    1fae:	a1 40       	sbci	r26, 0x01	; 1
    1fb0:	a6 95       	lsr	r26
    1fb2:	8f ef       	ldi	r24, 0xFF	; 255
    1fb4:	81 1d       	adc	r24, r1
    1fb6:	81 1d       	adc	r24, r1
    1fb8:	08 95       	ret

00001fba <__fp_inf>:
    1fba:	97 f9       	bld	r25, 7
    1fbc:	9f 67       	ori	r25, 0x7F	; 127
    1fbe:	80 e8       	ldi	r24, 0x80	; 128
    1fc0:	70 e0       	ldi	r23, 0x00	; 0
    1fc2:	60 e0       	ldi	r22, 0x00	; 0
    1fc4:	08 95       	ret

00001fc6 <__fp_nan>:
    1fc6:	9f ef       	ldi	r25, 0xFF	; 255
    1fc8:	80 ec       	ldi	r24, 0xC0	; 192
    1fca:	08 95       	ret

00001fcc <__fp_pscA>:
    1fcc:	00 24       	eor	r0, r0
    1fce:	0a 94       	dec	r0
    1fd0:	16 16       	cp	r1, r22
    1fd2:	17 06       	cpc	r1, r23
    1fd4:	18 06       	cpc	r1, r24
    1fd6:	09 06       	cpc	r0, r25
    1fd8:	08 95       	ret

00001fda <__fp_pscB>:
    1fda:	00 24       	eor	r0, r0
    1fdc:	0a 94       	dec	r0
    1fde:	12 16       	cp	r1, r18
    1fe0:	13 06       	cpc	r1, r19
    1fe2:	14 06       	cpc	r1, r20
    1fe4:	05 06       	cpc	r0, r21
    1fe6:	08 95       	ret

00001fe8 <__fp_round>:
    1fe8:	09 2e       	mov	r0, r25
    1fea:	03 94       	inc	r0
    1fec:	00 0c       	add	r0, r0
    1fee:	11 f4       	brne	.+4      	; 0x1ff4 <__fp_round+0xc>
    1ff0:	88 23       	and	r24, r24
    1ff2:	52 f0       	brmi	.+20     	; 0x2008 <__fp_round+0x20>
    1ff4:	bb 0f       	add	r27, r27
    1ff6:	40 f4       	brcc	.+16     	; 0x2008 <__fp_round+0x20>
    1ff8:	bf 2b       	or	r27, r31
    1ffa:	11 f4       	brne	.+4      	; 0x2000 <__fp_round+0x18>
    1ffc:	60 ff       	sbrs	r22, 0
    1ffe:	04 c0       	rjmp	.+8      	; 0x2008 <__fp_round+0x20>
    2000:	6f 5f       	subi	r22, 0xFF	; 255
    2002:	7f 4f       	sbci	r23, 0xFF	; 255
    2004:	8f 4f       	sbci	r24, 0xFF	; 255
    2006:	9f 4f       	sbci	r25, 0xFF	; 255
    2008:	08 95       	ret

0000200a <__fp_split3>:
    200a:	57 fd       	sbrc	r21, 7
    200c:	90 58       	subi	r25, 0x80	; 128
    200e:	44 0f       	add	r20, r20
    2010:	55 1f       	adc	r21, r21
    2012:	59 f0       	breq	.+22     	; 0x202a <__fp_splitA+0x10>
    2014:	5f 3f       	cpi	r21, 0xFF	; 255
    2016:	71 f0       	breq	.+28     	; 0x2034 <__fp_splitA+0x1a>
    2018:	47 95       	ror	r20

0000201a <__fp_splitA>:
    201a:	88 0f       	add	r24, r24
    201c:	97 fb       	bst	r25, 7
    201e:	99 1f       	adc	r25, r25
    2020:	61 f0       	breq	.+24     	; 0x203a <__fp_splitA+0x20>
    2022:	9f 3f       	cpi	r25, 0xFF	; 255
    2024:	79 f0       	breq	.+30     	; 0x2044 <__fp_splitA+0x2a>
    2026:	87 95       	ror	r24
    2028:	08 95       	ret
    202a:	12 16       	cp	r1, r18
    202c:	13 06       	cpc	r1, r19
    202e:	14 06       	cpc	r1, r20
    2030:	55 1f       	adc	r21, r21
    2032:	f2 cf       	rjmp	.-28     	; 0x2018 <__fp_split3+0xe>
    2034:	46 95       	lsr	r20
    2036:	f1 df       	rcall	.-30     	; 0x201a <__fp_splitA>
    2038:	08 c0       	rjmp	.+16     	; 0x204a <__fp_splitA+0x30>
    203a:	16 16       	cp	r1, r22
    203c:	17 06       	cpc	r1, r23
    203e:	18 06       	cpc	r1, r24
    2040:	99 1f       	adc	r25, r25
    2042:	f1 cf       	rjmp	.-30     	; 0x2026 <__fp_splitA+0xc>
    2044:	86 95       	lsr	r24
    2046:	71 05       	cpc	r23, r1
    2048:	61 05       	cpc	r22, r1
    204a:	08 94       	sec
    204c:	08 95       	ret

0000204e <__fp_zero>:
    204e:	e8 94       	clt

00002050 <__fp_szero>:
    2050:	bb 27       	eor	r27, r27
    2052:	66 27       	eor	r22, r22
    2054:	77 27       	eor	r23, r23
    2056:	cb 01       	movw	r24, r22
    2058:	97 f9       	bld	r25, 7
    205a:	08 95       	ret

0000205c <__gesf2>:
    205c:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fp_cmp>
    2060:	08 f4       	brcc	.+2      	; 0x2064 <__gesf2+0x8>
    2062:	8f ef       	ldi	r24, 0xFF	; 255
    2064:	08 95       	ret

00002066 <__mulsf3>:
    2066:	0e 94 46 10 	call	0x208c	; 0x208c <__mulsf3x>
    206a:	0c 94 f4 0f 	jmp	0x1fe8	; 0x1fe8 <__fp_round>
    206e:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__fp_pscA>
    2072:	38 f0       	brcs	.+14     	; 0x2082 <__mulsf3+0x1c>
    2074:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__fp_pscB>
    2078:	20 f0       	brcs	.+8      	; 0x2082 <__mulsf3+0x1c>
    207a:	95 23       	and	r25, r21
    207c:	11 f0       	breq	.+4      	; 0x2082 <__mulsf3+0x1c>
    207e:	0c 94 dd 0f 	jmp	0x1fba	; 0x1fba <__fp_inf>
    2082:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <__fp_nan>
    2086:	11 24       	eor	r1, r1
    2088:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__fp_szero>

0000208c <__mulsf3x>:
    208c:	0e 94 05 10 	call	0x200a	; 0x200a <__fp_split3>
    2090:	70 f3       	brcs	.-36     	; 0x206e <__mulsf3+0x8>

00002092 <__mulsf3_pse>:
    2092:	95 9f       	mul	r25, r21
    2094:	c1 f3       	breq	.-16     	; 0x2086 <__mulsf3+0x20>
    2096:	95 0f       	add	r25, r21
    2098:	50 e0       	ldi	r21, 0x00	; 0
    209a:	55 1f       	adc	r21, r21
    209c:	62 9f       	mul	r22, r18
    209e:	f0 01       	movw	r30, r0
    20a0:	72 9f       	mul	r23, r18
    20a2:	bb 27       	eor	r27, r27
    20a4:	f0 0d       	add	r31, r0
    20a6:	b1 1d       	adc	r27, r1
    20a8:	63 9f       	mul	r22, r19
    20aa:	aa 27       	eor	r26, r26
    20ac:	f0 0d       	add	r31, r0
    20ae:	b1 1d       	adc	r27, r1
    20b0:	aa 1f       	adc	r26, r26
    20b2:	64 9f       	mul	r22, r20
    20b4:	66 27       	eor	r22, r22
    20b6:	b0 0d       	add	r27, r0
    20b8:	a1 1d       	adc	r26, r1
    20ba:	66 1f       	adc	r22, r22
    20bc:	82 9f       	mul	r24, r18
    20be:	22 27       	eor	r18, r18
    20c0:	b0 0d       	add	r27, r0
    20c2:	a1 1d       	adc	r26, r1
    20c4:	62 1f       	adc	r22, r18
    20c6:	73 9f       	mul	r23, r19
    20c8:	b0 0d       	add	r27, r0
    20ca:	a1 1d       	adc	r26, r1
    20cc:	62 1f       	adc	r22, r18
    20ce:	83 9f       	mul	r24, r19
    20d0:	a0 0d       	add	r26, r0
    20d2:	61 1d       	adc	r22, r1
    20d4:	22 1f       	adc	r18, r18
    20d6:	74 9f       	mul	r23, r20
    20d8:	33 27       	eor	r19, r19
    20da:	a0 0d       	add	r26, r0
    20dc:	61 1d       	adc	r22, r1
    20de:	23 1f       	adc	r18, r19
    20e0:	84 9f       	mul	r24, r20
    20e2:	60 0d       	add	r22, r0
    20e4:	21 1d       	adc	r18, r1
    20e6:	82 2f       	mov	r24, r18
    20e8:	76 2f       	mov	r23, r22
    20ea:	6a 2f       	mov	r22, r26
    20ec:	11 24       	eor	r1, r1
    20ee:	9f 57       	subi	r25, 0x7F	; 127
    20f0:	50 40       	sbci	r21, 0x00	; 0
    20f2:	9a f0       	brmi	.+38     	; 0x211a <__mulsf3_pse+0x88>
    20f4:	f1 f0       	breq	.+60     	; 0x2132 <__mulsf3_pse+0xa0>
    20f6:	88 23       	and	r24, r24
    20f8:	4a f0       	brmi	.+18     	; 0x210c <__mulsf3_pse+0x7a>
    20fa:	ee 0f       	add	r30, r30
    20fc:	ff 1f       	adc	r31, r31
    20fe:	bb 1f       	adc	r27, r27
    2100:	66 1f       	adc	r22, r22
    2102:	77 1f       	adc	r23, r23
    2104:	88 1f       	adc	r24, r24
    2106:	91 50       	subi	r25, 0x01	; 1
    2108:	50 40       	sbci	r21, 0x00	; 0
    210a:	a9 f7       	brne	.-22     	; 0x20f6 <__mulsf3_pse+0x64>
    210c:	9e 3f       	cpi	r25, 0xFE	; 254
    210e:	51 05       	cpc	r21, r1
    2110:	80 f0       	brcs	.+32     	; 0x2132 <__mulsf3_pse+0xa0>
    2112:	0c 94 dd 0f 	jmp	0x1fba	; 0x1fba <__fp_inf>
    2116:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__fp_szero>
    211a:	5f 3f       	cpi	r21, 0xFF	; 255
    211c:	e4 f3       	brlt	.-8      	; 0x2116 <__mulsf3_pse+0x84>
    211e:	98 3e       	cpi	r25, 0xE8	; 232
    2120:	d4 f3       	brlt	.-12     	; 0x2116 <__mulsf3_pse+0x84>
    2122:	86 95       	lsr	r24
    2124:	77 95       	ror	r23
    2126:	67 95       	ror	r22
    2128:	b7 95       	ror	r27
    212a:	f7 95       	ror	r31
    212c:	e7 95       	ror	r30
    212e:	9f 5f       	subi	r25, 0xFF	; 255
    2130:	c1 f7       	brne	.-16     	; 0x2122 <__mulsf3_pse+0x90>
    2132:	fe 2b       	or	r31, r30
    2134:	88 0f       	add	r24, r24
    2136:	91 1d       	adc	r25, r1
    2138:	96 95       	lsr	r25
    213a:	87 95       	ror	r24
    213c:	97 f9       	bld	r25, 7
    213e:	08 95       	ret

00002140 <__udivmodqi4>:
    2140:	99 1b       	sub	r25, r25
    2142:	79 e0       	ldi	r23, 0x09	; 9
    2144:	04 c0       	rjmp	.+8      	; 0x214e <__udivmodqi4_ep>

00002146 <__udivmodqi4_loop>:
    2146:	99 1f       	adc	r25, r25
    2148:	96 17       	cp	r25, r22
    214a:	08 f0       	brcs	.+2      	; 0x214e <__udivmodqi4_ep>
    214c:	96 1b       	sub	r25, r22

0000214e <__udivmodqi4_ep>:
    214e:	88 1f       	adc	r24, r24
    2150:	7a 95       	dec	r23
    2152:	c9 f7       	brne	.-14     	; 0x2146 <__udivmodqi4_loop>
    2154:	80 95       	com	r24
    2156:	08 95       	ret

00002158 <__umulhisi3>:
    2158:	a2 9f       	mul	r26, r18
    215a:	b0 01       	movw	r22, r0
    215c:	b3 9f       	mul	r27, r19
    215e:	c0 01       	movw	r24, r0
    2160:	a3 9f       	mul	r26, r19
    2162:	70 0d       	add	r23, r0
    2164:	81 1d       	adc	r24, r1
    2166:	11 24       	eor	r1, r1
    2168:	91 1d       	adc	r25, r1
    216a:	b2 9f       	mul	r27, r18
    216c:	70 0d       	add	r23, r0
    216e:	81 1d       	adc	r24, r1
    2170:	11 24       	eor	r1, r1
    2172:	91 1d       	adc	r25, r1
    2174:	08 95       	ret

00002176 <eeprom_read_dword>:
    2176:	a6 e1       	ldi	r26, 0x16	; 22
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	44 e0       	ldi	r20, 0x04	; 4
    217c:	50 e0       	ldi	r21, 0x00	; 0
    217e:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <eeprom_read_blraw>

00002182 <eeprom_write_dword>:
    2182:	24 2f       	mov	r18, r20
    2184:	0e 94 df 10 	call	0x21be	; 0x21be <eeprom_write_r18>
    2188:	25 2f       	mov	r18, r21
    218a:	0e 94 df 10 	call	0x21be	; 0x21be <eeprom_write_r18>
    218e:	0c 94 c9 10 	jmp	0x2192	; 0x2192 <eeprom_write_word>

00002192 <eeprom_write_word>:
    2192:	0e 94 de 10 	call	0x21bc	; 0x21bc <eeprom_write_byte>
    2196:	27 2f       	mov	r18, r23
    2198:	0c 94 df 10 	jmp	0x21be	; 0x21be <eeprom_write_r18>

0000219c <eeprom_read_block>:
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22

000021a0 <eeprom_read_blraw>:
    21a0:	fc 01       	movw	r30, r24
    21a2:	f9 99       	sbic	0x1f, 1	; 31
    21a4:	fe cf       	rjmp	.-4      	; 0x21a2 <eeprom_read_blraw+0x2>
    21a6:	06 c0       	rjmp	.+12     	; 0x21b4 <eeprom_read_blraw+0x14>
    21a8:	f2 bd       	out	0x22, r31	; 34
    21aa:	e1 bd       	out	0x21, r30	; 33
    21ac:	f8 9a       	sbi	0x1f, 0	; 31
    21ae:	31 96       	adiw	r30, 0x01	; 1
    21b0:	00 b4       	in	r0, 0x20	; 32
    21b2:	0d 92       	st	X+, r0
    21b4:	41 50       	subi	r20, 0x01	; 1
    21b6:	50 40       	sbci	r21, 0x00	; 0
    21b8:	b8 f7       	brcc	.-18     	; 0x21a8 <eeprom_read_blraw+0x8>
    21ba:	08 95       	ret

000021bc <eeprom_write_byte>:
    21bc:	26 2f       	mov	r18, r22

000021be <eeprom_write_r18>:
    21be:	f9 99       	sbic	0x1f, 1	; 31
    21c0:	fe cf       	rjmp	.-4      	; 0x21be <eeprom_write_r18>
    21c2:	1f ba       	out	0x1f, r1	; 31
    21c4:	92 bd       	out	0x22, r25	; 34
    21c6:	81 bd       	out	0x21, r24	; 33
    21c8:	20 bd       	out	0x20, r18	; 32
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	fa 9a       	sbi	0x1f, 2	; 31
    21d0:	f9 9a       	sbi	0x1f, 1	; 31
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	01 96       	adiw	r24, 0x01	; 1
    21d6:	08 95       	ret

000021d8 <_exit>:
    21d8:	f8 94       	cli

000021da <__stop_program>:
    21da:	ff cf       	rjmp	.-2      	; 0x21da <__stop_program>
